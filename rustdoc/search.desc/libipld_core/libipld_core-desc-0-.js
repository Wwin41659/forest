searchState.loadedDescShard("libipld_core", 0, "Core ipld types used by ipld codecs.\n<code>Ipld</code> codecs.\nConversion to and from ipld.\n<code>Ipld</code> error definitions.\nIpld representation.\nTyped cid.\nImplements the raw codec.\nmisc stuff\nSerde (de)serialization for <code>crate::ipld::Ipld</code>.\nCodec trait.\nDecode trait.\nEncode trait.\nReferences trait.\nUtility for testing codecs.\nDecode from an <code>impl Read</code>.\nDecodes a decodable type.\nEncodes into a <code>impl Write</code>.\nEncodes an encodable type.\nScrape the references from an <code>impl Read</code>.\nScrapes the references.\nThe block wasn’t found. The supplied string is a CID.\nBlock exceeds 1MiB.\nBoolean type.\nBytes type.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nFloat type.\nIndex type.\nInteger type.\nHash does not match the CID.\nKey type.\nLink type.\nList type.\nMap type.\nNull type.\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nError during Serde operations.\nString type.\nType error.\nType error type.\nThe codec is unsupported.\nThe multihash is unsupported.\nGet the backtrace for this Error.\nAn iterator of the chain of source errors contained by …\nWrap the error value with additional context.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nThe expected type.\nThe actual type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nCreates a new type error.\nThe lowest level cause of this error — this error’s …\nRepresents a boolean value.\nRepresents a sequence of bytes.\nRepresents a floating point value.\nRepresents an integer.\nIpld\nAn index into ipld\nIpld iterator.\nRepresents a map of integers.\nAn index into an ipld list.\nRepresents a list.\nAn owned index into an ipld map.\nRepresents a map of strings.\nAn index into an ipld map.\nRepresents the absence of a value or the value undefined.\nRepresents an UTF-8 string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndexes into an ipld list or map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator.\nReturns the references to other blocks.\nDestructs an ipld list or map\nTyped cid.\nReturns a reference to the cid.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Link</code>.\nRaw codec.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllows to ignore a single item\nA raw value for a certain codec.\ntrait to implement to skip a single item at the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nassuming r is at the start of an item, advance r to the end\nThe IPLD serializer.\nReturns the argument unchanged.\nDeserialize instances of <code>crate::ipld::Ipld</code>.\nCalls <code>U::from(self)</code>.\nSerialize into instances of <code>crate::ipld::Ipld</code>.")