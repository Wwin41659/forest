searchState.loadedDescShard("fil_actor_power_state", 0, "Minimum power of an individual miner to meet the threshold …\nConstructor for Storage Power Actor\ngenesis power in <code>bytes = 750,000 GiB</code>\nmax chain throughput in bytes per …\nMaximum number of prove commits a miner can submit in one …\nStorage power actor methods available\nImplicit termination after all deals expire\nImplicit termination due to unrecovered fault\nUnscheduled explicit termination by the miner\nStorage power actor state\nClaimed power for each miner.\nReturns the minimum storage power required for each seal …\nA queue of events to be triggered by cron, indexed by …\nFirst epoch in which a cron task may be stored. Cron will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical ID-based address for the actor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of miners having proven the minimum consensus power.\nChecks power actor state for if miner meets minimum …\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nRe-org safe address for created actor.\nMiner’s proof type used to determine minimum miner size\nMinimum power of an individual miner to meet the threshold …\nConstructor for Storage Power Actor\ngenesis power in bytes = 750,000 GiB\nmax chain throughput in bytes per epoch = 120 ProveCommits …\nMaximum number of prove commits a miner can submit in one …\nStorage power actor methods available\nImplicit termination after all deals expire\nImplicit termination due to unrecovered fault\nUnscheduled explicit termination by the miner\nStorage power actor state\nClaimed power for each miner.\nReturns the minimum storage power required for each PoSt …\nA queue of events to be triggered by cron, indexed by …\nGasOnSubmitVerifySeal is amount of gas charged for …\nFirst epoch in which a cron task may be stored. Cron will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical ID-based address for the actor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of miners having proven the minimum consensus power.\nChecks power actor state for if miner meets minimum …\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nRe-org safe address for created actor.\nMiner’s proof type used to determine minimum miner size\nMinimum power of an individual miner to meet the threshold …\nConstructor for Storage Power Actor\ngenesis power in bytes = 750,000 GiB\nmax chain throughput in bytes per epoch = 120 ProveCommits …\nMaximum number of prove commits a miner can submit in one …\nStorage power actor methods available\nImplicit termination after all deals expire\nImplicit termination due to unrecovered fault\nUnscheduled explicit termination by the miner\nStorage power actor state\nClaimed power for each miner.\nReturns the minimum storage power required for each PoSt …\nA queue of events to be triggered by cron, indexed by …\nGasOnSubmitVerifySeal is amount of gas charged for …\nFirst epoch in which a cron task may be stored. Cron will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical ID-based address for the actor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of miners having proven the minimum consensus power.\nChecks power actor state for if miner meets minimum …\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nRe-org safe address for created actor.\nMiner’s proof type used to determine minimum miner size\nMinimum power of an individual miner to meet the threshold …\nConstructor for Storage Power Actor\ngenesis power in bytes = 750,000 GiB\nmax chain throughput in bytes per epoch = 120 ProveCommits …\nMaximum number of prove commits a miner can submit in one …\nStorage power actor methods available\nImplicit termination after all deals expire\nImplicit termination due to unrecovered fault\nUnscheduled explicit termination by the miner\nStorage power actor state\nClaimed power for each miner.\nReturns the minimum storage power required for each PoSt …\nA queue of events to be triggered by cron, indexed by …\nGasOnSubmitVerifySeal is amount of gas charged for …\nFirst epoch in which a cron task may be stored. Cron will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical ID-based address for the actor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of miners having proven the minimum consensus power.\nChecks power actor state for if miner meets minimum …\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nRe-org safe address for created actor.\nMiner’s proof type used to determine minimum miner size\nMinimum power of an individual miner to meet the threshold …\nConstructor for Storage Power Actor\ngenesis power in bytes = 750,000 GiB\nmax chain throughput in bytes per epoch = 120 ProveCommits …\nMaximum number of prove commits a miner can submit in one …\nStorage power actor methods available\nImplicit termination after all deals expire\nImplicit termination due to unrecovered fault\nUnscheduled explicit termination by the miner\nStorage power actor state\nClaimed power for each miner.\nReturns the minimum storage power required for each PoSt …\nA queue of events to be triggered by cron, indexed by …\nFirst epoch in which a cron task may be stored. Cron will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical ID-based address for the actor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of miners having proven the minimum consensus power.\nChecks power actor state for if miner meets minimum …\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nRe-org safe address for created actor.\nMiner’s proof type used to determine minimum miner size\nMinimum power of an individual miner to meet the threshold …\nConstructor for Storage Power Actor\ngenesis power in <code>bytes = 750,000 GiB</code>\nmax chain throughput in bytes per …\nMaximum number of prove commits a miner can submit in one …\nStorage power actor methods available\nImplicit termination after all deals expire\nImplicit termination due to unrecovered fault\nUnscheduled explicit termination by the miner\nStorage power actor state\nClaimed power for each miner.\nReturns the minimum storage power required for each seal …\nA queue of events to be triggered by cron, indexed by …\nFirst epoch in which a cron task may be stored. Cron will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical ID-based address for the actor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of miners having proven the minimum consensus power.\nChecks power actor state for if miner meets minimum …\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nRe-org safe address for created actor.\nMiner’s proof type used to determine minimum miner size\nMinimum power of an individual miner to meet the threshold …\nConstructor for Storage Power Actor\ngenesis power in <code>bytes = 750,000 GiB</code>\nmax chain throughput in bytes per <code>epoch = 120 </code>ProveCommits…\nMaximum number of prove commits a miner can submit in one …\nStorage power actor methods available\nImplicit termination after all deals expire\nImplicit termination due to unrecovered fault\nUnscheduled explicit termination by the miner\nStorage power actor state\nClaimed power for each miner.\nReturns the minimum storage power required for each seal …\nA queue of events to be triggered by cron, indexed by …\nFirst epoch in which a cron task may be stored. Cron will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical ID-based address for the actor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of miners having proven the minimum consensus power.\nChecks power actor state for if miner meets minimum …\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nRe-org safe address for created actor.\nMiner’s proof type used to determine minimum miner size")