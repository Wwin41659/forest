searchState.loadedDescShard("filecoin_proofs_api", 0, "Proofs library for Filecoin open blockchain network.\nThe ApiFeature enum is used for optional features that the …\nThe ApiVersion enum is used for mandatory changes that the …\nTrait used to abstract over the way Merkle Trees are …\nAn ordered set of <code>SectorId</code>s.\nAvailable aggregation of zk-SNARK proofs.\nAvailable PoSt proofs.\nAvailable seal proofs.\nAvailable proofs for updating sectors\nIdentifier for a single sector.\nCustom error types\nReturns the PoRepConfig with correct Proof-of-Replication …\nReturns the PoRepConfig with correct Proof-of-Replication …\nReturns the PoStConfig with correct Proof-of-Spacetime …\nReturns the expected file path of the params file (*…\nReturns the expected file path of the params file (*…\nReturns the expected file path of the params file (*…\nReturns the expected file path of the verifying key (*.vk …\nReturns the expected file path of the verifying key (*.vk …\nReturns the expected file path of the verifying key (*.vk …\nReturns the circuit identifier.\nReturns the circuit identifier.\nReturns the circuit identifier.\nPrint a unique name for this configuration.\nReturns if the feature is enabled based on the proof type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a merkle proof of the node at the given index.\nGet the correct parameter data for a given cache id.\nGet the correct verifying key data for a given cache id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the correct Proof-of-Spacetime window type for …\nReturn the major version for this proof.\nReturn the major version for this proof.\nReturn the major version for this proof.\nReturn the minor version for this proof.\nReturn the minor version for this proof.\nReturn the minor version for this proof.\nGet the correct parameter data for the circuit identifier.\nGet the correct parameter data for this circuit identifier.\nGet the correct parameter data for the circuit identifier.\nReturn the number of partitions for this proof.\nReturn the number of partitions for this proof.\nReturn the patch version for this proof.\nReturn the patch version for this proof.\nReturn the patch version for this proof.\nGeneration and verification of Proof-of-Spacetime Merkle …\nReturns the root hash of the tree.\nProof-of-Replication for sealing, unsealing, and verifying …\nReturn the sector count for this proof.\nReturn the sector size for this proof.\nReturn the sector size for this proof.\nReturn the sector size for this proof.\nReturns the size of a single zk-SNARK proof in bytes.\nReturns length of proof for a single partition in bytes.\nReturn the PoStType  for this proof.\nUpdate data within existing sealed sectors.\nGet the correct verifying key data for the circuit …\nGet the correct verifying key data for this circuit …\nGet the correct verifying key data for the circuit …\nReturn the version for this proof.\nReturn the version for this proof.\nReturn the version for this proof.\nGenerates the challenges per SectorId required for either …\nGenerates a single vanilla proof required for either …\nGenerates a Window Proof-of-Spacetime with provided …\nGenerates a Window Proof-of-Spacetime.\nGenerates a Window Proof-of-Spacetime with provided …\nGenerates a Winning Proof-of-Spacetime.\nGiven some randomness and the length of available sectors, …\nGenerates a Winning Proof-of-Spacetime with provided …\nFor window PoSt only, gets the number of partitions based …\nMerge multiple window PoSt partition proofs into a single …\nVerifies a window Proof-of-Spacetime.\nVerifies a winning Proof-of-Spacetime.\nThe output of <code>seal_pre_commit_phase1</code>.\nThe output of <code>seal_pre_commit_phase2</code>.\nComputes a NUL-byte prefix and/or suffix for <code>source</code> using …\nGiven a <code>porep_config</code> and a list of seal commit outputs, …\nEnsure that any persisted cached data for specified sector …\nEnsure that any persisted layers are discarded.\nEnsure that any persisted synthetic proofs are discarded.\nComputes a sectors’s <code>comm_d</code> data commitment given its …\nArguments\nfauxrep2 is a faster way to generate sectors for network …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a piece commitment for the provided byte source. …\nGenerate and persist synthetic Merkle tree proofs for …\nGenerate Merkle tree for the label layers (TreeC) and …\nGenerate Merkle tree for sector replica (TreeRLast) and …\nGiven the specified arguments, this method returns the …\nUnseals the sector at <code>sealed_path</code> and returns the bytes …\nUnseals the sector read from <code>sealed_sector</code>, memory maps …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate label layers (SDR).\nGenerate Merkle tree proofs for sector replica. Must be …\nGenerates zk-SNARK proof for sector replica. Must be …\nFirst step in sector sealing process. Called before …\nSecond phase of seal precommit operation, must be called …\nUnseals the sector read from <code>sealed_sector</code> and returns the …\nGiven a <code>porep_config</code>, an aggregate proof, a list of seeds …\nVerify multiple proofs of sealed sector. Each input …\nVerify a single proof of a sealed sector.\nWrites bytes from <code>source</code> to <code>target</code>, adding bit-padding (“…\nReverses the encoding process and outputs the data into …\nReverses the encoding process for a certain range.\nEncodes data into an existing replica.\nRemoves encoded data and outputs the sector key.\nGenerate updated proof from an empty sector replica.\nGenerate updated proof from an empty sector provided the …\nGenerate all vanilla partition proofs across all …\nVerify an empty sector update proof provided the proof and …\nVerify all vanilla partition proofs across all partitions.")