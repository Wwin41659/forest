searchState.loadedDescShard("fil_actor_multisig_state", 0, "Add signer params.\nParameters for approve and cancel multisig functions.\nPropose method call parameters\nConstructor parameters for multisig actor.\nLock balance call params.\nMultisig actor methods available\nData for a BLAKE2B-256 to be attached to methods …\nPropose method call parameters.\nPropose method call return.\nRemove signer params.\nSignersMax is the maximum number of signers allowed in a …\nMultisig actor state\nSwap signer multisig method params\nTransaction type used in multisig actor\nTransaction ID type\nParameters for approve and cancel multisig functions.\nReturns amount locked in multisig contract\nApplied indicates if the transaction was applied as …\nApplied indicates if the transaction was applied as …\nCode is the exitcode of the transaction, if Applied is …\nCode is the exitcode of the transaction, if Applied is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if <code>address</code> is in the list of signers\nOptional hash of proposal to ensure an operation can only …\nIterates all pending transactions and removes an address …\nRet is the return value of the transaction, if Applied is …\nRet is the return value of the transaction, if Applied is …\nSet locked amount in multisig state.\nTxnID is the ID of the proposed transaction.\nAdd signer params.\nParameters for approve and cancel multisig functions.\nPropose method call parameters\nConstructor parameters for multisig actor.\nLock balance call params.\nMultisig actor methods available\nData for a BLAKE2B-256 to be attached to methods …\nPropose method call parameters.\nPropose method call return.\nRemove signer params.\nSignersMax is the maximum number of signers allowed in a …\nMultisig actor state\nSwap signer multisig method params\nTransaction type used in multisig actor\nTransaction ID type\nParameters for approve and cancel multisig functions.\nReturns amount locked in multisig contract\nApplied indicates if the transaction was applied as …\nApplied indicates if the transaction was applied as …\nCode is the exitcode of the transaction, if Applied is …\nCode is the exitcode of the transaction, if Applied is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if <code>address</code> is in the list of signers\nOptional hash of proposal to ensure an operation can only …\nIterates all pending transactions and removes an address …\nRet is the return value of the transaction, if Applied is …\nRet is the return value of the transaction, if Applied is …\nSet locked amount in multisig state.\nTxnID is the ID of the proposed transaction.\nAdd signer params.\nParameters for approve and cancel multisig functions.\nPropose method call parameters\nConstructor parameters for multisig actor.\nLock balance call params.\nMultisig actor methods available\nData for a BLAKE2B-256 to be attached to methods …\nPropose method call parameters.\nPropose method call return.\nRemove signer params.\nSignersMax is the maximum number of signers allowed in a …\nMultisig actor state\nSwap signer multisig method params\nTransaction type used in multisig actor\nTransaction ID type\nParameters for approve and cancel multisig functions.\nReturns amount locked in multisig contract\nApplied indicates if the transaction was applied as …\nApplied indicates if the transaction was applied as …\nCode is the exitcode of the transaction, if Applied is …\nCode is the exitcode of the transaction, if Applied is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if <code>address</code> is in the list of signers\nOptional hash of proposal to ensure an operation can only …\nIterates all pending transactions and removes an address …\nRet is the return value of the transaction, if Applied is …\nRet is the return value of the transaction, if Applied is …\nSet locked amount in multisig state.\nTxnID is the ID of the proposed transaction.\nAdd signer params.\nParameters for approve and cancel multisig functions.\nPropose method call parameters\nConstructor parameters for multisig actor.\nLock balance call params.\nMultisig actor methods available\nData for a BLAKE2B-256 to be attached to methods …\nPropose method call parameters.\nPropose method call return.\nRemove signer params.\nSignersMax is the maximum number of signers allowed in a …\nMultisig actor state\nSwap signer multisig method params\nTransaction type used in multisig actor\nTransaction ID type\nParameters for approve and cancel multisig functions.\nReturns amount locked in multisig contract\nApplied indicates if the transaction was applied as …\nApplied indicates if the transaction was applied as …\nCode is the exitcode of the transaction, if Applied is …\nCode is the exitcode of the transaction, if Applied is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if <code>address</code> is in the list of signers\nOptional hash of proposal to ensure an operation can only …\nIterates all pending transactions and removes an address …\nRet is the return value of the transaction, if Applied is …\nRet is the return value of the transaction, if Applied is …\nSet locked amount in multisig state.\nTxnID is the ID of the proposed transaction.\nAdd signer params.\nParameters for approve and cancel multisig functions.\nPropose method call parameters\nConstructor parameters for multisig actor.\nLock balance call params.\nMultisig actor methods available\nData for a BLAKE2B-256 to be attached to methods …\nPropose method call parameters.\nPropose method call return.\nRemove signer params.\nSignersMax is the maximum number of signers allowed in a …\nMultisig actor state\nSwap signer multisig method params\nTransaction type used in multisig actor\nTransaction ID type\nParameters for approve and cancel multisig functions.\nReturns amount locked in multisig contract\nApplied indicates if the transaction was applied as …\nApplied indicates if the transaction was applied as …\nCode is the exitcode of the transaction, if Applied is …\nCode is the exitcode of the transaction, if Applied is …\nComputes a digest of a proposed transaction. This digest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if <code>address</code> is in the list of signers\nOptional hash of proposal to ensure an operation can only …\nIterates all pending transactions and removes an address …\nRet is the return value of the transaction, if Applied is …\nRet is the return value of the transaction, if Applied is …\nSet locked amount in multisig state.\nTxnID is the ID of the proposed transaction.\nAdd signer params.\nParameters for approve and cancel multisig functions.\nPropose method call parameters\nConstructor parameters for multisig actor.\nLock balance call params.\nMultisig actor methods available\nData for a BLAKE2B-256 to be attached to methods …\nPropose method call parameters.\nPropose method call return.\nRemove signer params.\nSignersMax is the maximum number of signers allowed in a …\nMultisig actor state\nSwap signer multisig method params\nTransaction type used in multisig actor\nTransaction ID type\nParameters for approve and cancel multisig functions.\nReturns amount locked in multisig contract\nApplied indicates if the transaction was applied as …\nApplied indicates if the transaction was applied as …\nCode is the exitcode of the transaction, if Applied is …\nCode is the exitcode of the transaction, if Applied is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if <code>address</code> is in the list of signers\nOptional hash of proposal to ensure an operation can only …\nIterates all pending transactions and removes an address …\nRet is the return value of the transaction, if Applied is …\nRet is the return value of the transaction, if Applied is …\nSet locked amount in multisig state.\nTxnID is the ID of the proposed transaction.\nAdd signer params.\nParameters for approve and cancel multisig functions.\nPropose method call parameters\nConstructor parameters for multisig actor.\nLock balance call params.\nMultisig actor methods available\nData for a BLAKE2B-256 to be attached to methods …\nPropose method call parameters.\nPropose method call return.\nRemove signer params.\nSignersMax is the maximum number of signers allowed in a …\nMultisig actor state\nSwap signer multisig method params\nTransaction type used in multisig actor\nTransaction ID type\nParameters for approve and cancel multisig functions.\nReturns amount locked in multisig contract\nApplied indicates if the transaction was applied as …\nApplied indicates if the transaction was applied as …\nCode is the exitcode of the transaction, if Applied is …\nCode is the exitcode of the transaction, if Applied is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if <code>address</code> is in the list of signers\nOptional hash of proposal to ensure an operation can only …\nIterates all pending transactions and removes an address …\nRet is the return value of the transaction, if Applied is …\nRet is the return value of the transaction, if Applied is …\nSet locked amount in multisig state.\nTxnID is the ID of the proposed transaction.")