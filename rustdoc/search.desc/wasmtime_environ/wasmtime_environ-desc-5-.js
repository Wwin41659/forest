searchState.loadedDescShard("wasmtime_environ", 5, "Returns the number of <code>br_table</code> entries, not including the …\nReturns the number of input types.\nReturns the number of defined local variables in the …\nReturns the number of output types.\nThe locals for this stack frame (including function …\nUnder the function references proposal, returns whether t1 …\nMaximum alignment, stored as <code>n</code> where the actual alignment …\nOptional maximum size of the table, in elements.\nOptional maximum size of this memory, in wasm pages.\nWhich of the coredump’s memories are this instance’s …\nThe index of the memory this immediate points to.\nWhether or not this is a 64-bit memory, using i64 as an …\nThe WebAssembly memory64 proposal\nReturns the linear memory at given index.\nThe WebAssembly memory control proposal\nValidates <code>Payload::MemorySection</code>.\nGet this error’s message.\nThe module being imported from.\nThe module that this is an instance of, as an index into a …\nValidates <code>Payload::ModuleSection</code>.\nA list of module names, which may be URLs, file paths, or …\nThe WebAssembly multi memory proposal\nThe WebAssembly multi-value proposal (enabled by default)\nAre elements mutable.\nWhether or not the global is mutable.\nThe WebAssembly <code>mutable-global</code> proposal (enabled by …\nThe name of the custom section.\nThe name of the process that created the core dump\nThe thread name\nThe name of the exported item.\nThe name of the imported item.\nThe name of the module argument.\nThe name of the component argument.\nThe name of the variant case.\nThe name of the exported item.\nThe name of the imported item.\nThe name for the index.\nThe name of the field.\nThe field name.\nDefinitions of name-related helpers and newtypes, …\nThe map of names within the <code>index</code> prior.\nCreates a new section reader from the provided contents.\nCreates a new reader for the specified section contents …\nCreates a new function to validate which will have the …\nConstructs <code>BinaryReader</code> type.\nCreates a new parser.\nConstructs a new <code>FunctionBody</code> for the given data and …\nConstructs a new <code>CustomSectionReader</code> for the given data …\nConstructs a new <code>ConstExpr</code> from the given data and offset.\nCreate a new <code>RefType</code>.\nCreates a new <code>FuncType</code> from the given <code>params</code> and <code>results</code>.\nCreates a new <code>Validator</code> ready to validate a WebAssembly …\nCreates a new <code>Validator</code> which has the specified set of wasm\nConstructs a <code>BinaryReader</code> with an explicit starting offset.\nReads content of the code section with offsets.\nGet the non-nullable version of this ref type.\nGet the offset within the Wasm binary where the error …\nA fixed byte-offset that this memory immediate specifies.\nValidates the next operator in a function.\nGet the current height of the operand stack.\nGets the original position of the reader.\nReturns whether the original byte offset of this section.\nReturns the current byte offset of the section within this …\nReturns whether the original byte offset of this section.\nGets the original position of the binary reader.\nGets the original position of the reader.\nReturns the type at given index if any.\nReturns the list of outputs as an iterator.\nReturns a shared slice to the parameter types of the …\nThe function parameters.\nAttempts to parse a chunk of data.\nConvenience function that can be used to parse a module or …\nConvenience function to validate a single <code>Payload</code>.\nReturns the range, as byte offsets, of this section within …\nReturns the range, as byte offsets, of this section within …\nReturns a range from the starting offset to the end of the …\nGets the range of the function body.\nThe range of bytes that specify this whole custom section …\nThe range of the data segment.\nThe range of the the element segment.\nReads an item from the reader.\nReads a value of type <code>T</code> from this binary reader, advancing …\nReads an operator from the reader.\nAdvances the <code>BinaryReader</code> <code>size</code> bytes, and returns a slice …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads a variable-length 32-bit size from the byte stream …\nReads the local definitions from the given <code>BinaryReader</code>, …\nReads the next available <code>Operator</code>.\nReads a length-prefixed list of bytes from this reader and …\nReads a variable-length 32-bit size from the byte stream …\nReads a WebAssembly string from the module.\nAdvances the <code>BinaryReader</code> four bytes and returns a <code>u32</code>.\nAdvances the <code>BinaryReader</code> eight bytes and returns a <code>u64</code>.\nAdvances the <code>BinaryReader</code> a single byte.\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to eight bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads an operator with its offset.\nThe WebAssembly reference types proposal (enabled by …\nThe index of the variant case that is refined by this one.\nThe WebAssembly Relaxed SIMD proposal\nReturns the underlying module resources that this …\nReturns a shared slice to the result types of the <code>FuncType</code>.\nThe number of expected results for the start function.\nThe function result.\nThe WebAssembly <code>nontrapping-float-to-int-conversions</code> …\nWhether or not this is a “shared” memory, indicating …\nThe WebAssembly <code>sign-extension-ops</code> proposal (enabled by …\nThe WebAssembly SIMD proposal (enabled by default)\nExecutes <code>f</code> to skip some data in this binary reader and …\nSkip parsing the code section entirely.\nAdvances the <code>BinaryReader</code> past a WebAssembly string. This …\nThe values on the stack\nValidates <code>Payload::StartSection</code>.\nThe structural type of the subtype.\nThe list of supertype indexes. As of GC MVP, there can be …\nReturns the table at given index if any.\nValidates <code>Payload::TableSection</code>.\nReturns the tag at given index.\nValidates <code>Payload::TagSection</code>.\nThe WebAssembly tail-call proposal\nReturns the list of targets that this <code>br_table</code> instruction …\nThe WebAssembly threads proposal\nAn optionally specified type ascribed to this export.\nThe type reference for the import.\nThe value type of the variant case.\nThe global’s type.\nThe type of the imported item.\nThe type of this table, including its element type and its …\nGets the count of types returned by the function.\nIf this is a reference to a typed function, get its type …\nReturns the type index associated with the given function …\nReturns the <code>FuncType</code> associated with the given function …\nValidates <code>Payload::TypeSection</code>.\nTypes relating to type information provided by validation.\nGets the types known by the validator so far within the …\nValidates <code>Payload::UnknownSection</code>.\nWhether this frame is unreachable so far.\nTest whether the given buffer contains a valid WebAssembly …\nConvenience function to validate an entire function’s …\nValidates an entire in-memory module or component with …\nThe values specified for this field\nValidates <code>Payload::Version</code>.\nThe field version.\nVisits the <code>Operator</code> <code>op</code> using the given <code>offset</code>.\nVisit the next available operator with the specified …\nVisit a single operator with the specified <code>VisitOperator</code> …\nGet the operator visitor for the next operator in the …\nThe index of the core WebAssembly function to lift.\nThe index of the function to lower.\nThe canonical options for the function.\nThe canonical options for the function.\nThe type index of the resource that’s being created.\nThe type index of the resource that’s being dropped.\nThe type index of the resource that’s being accessed.\nThe index of the lifted function’s type.\nThis many bytes of the <code>data</code> input to <code>Parser::parse</code> were …\nThe value that we actually parsed.\nThe outward count, starting at zero for the current …\nThe index of the item within the outer component.\nThe instance index.\nThe instance index.\nThe alias kind.\nThe alias kind.\nThe alias kind.\nThe export name.\nThe export name.\nThe type returned for failure.\nThe type returned for success.\nThe component’s instantiation arguments.\nThe component index.\nThe contents of this subsection.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nAn optionally-specified destructor to use for when this …\nThe representation of this resource type in core …\nThe name of the export.\nThe type reference for the export.\nThe memory index for the data segment.\nThe initialization expression for the data segment.\nThe initial expression of the element segment.\nThe index of the table being initialized.\nThe module’s instantiation arguments.\nThe module index.\nThe name of the export.\nThe type reference for the export.\nThe outward count, starting at zero for the current type.\nThe index of the item within the outer type.\nThe alias kind.\nThe name of the exported item.\nThe type reference of the export.\nThe contents of this subsection.\nThe specified name.\nThe byte range that <code>name</code> occupies in the original binary.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nThe contents of this section.\nThe number of data segments.\nThe number of functions in this section.\nThe encoding format being parsed.\nThe start function index\nThe 8-bit identifier for this section.\nThe version number found in the header.\nThe parser for the nested module.\nThe parser for the nested component.\nThe range of bytes that were parsed to consume the header …\nThe range of bytes that specify the <code>func</code> field, specified …\nThe range of bytes that specify the <code>count</code> field, specified …\nThe range of bytes that represent this section, specified …\nThe range of bytes that represent the nested module in the …\nThe range of bytes that represent the nested component in …\nThe range of bytes that specify the <code>start</code> field.\nThe range of bytes, relative to the start of the original …\nThe size, in bytes, of the remaining contents of this …\nThe start function description.\n<code>[constructor]a-b</code>\n<code>wasi:http/types@2.0</code>\nA “kebab name” in the component model which is backed …\nCreated via <code>KebabName::kind</code> and classifies a name.\nRepresents a kebab string slice used in validation.\nRepresents an owned kebab string for validation.\n<code>[method]a-b.c-d</code>\n<code>a-b-c</code>\n<code>[static]a-b.c-d</code>\nConverts the kebab string to a kebab string slice.\nGets the underlying string slice.\nGets the underlying string.\nReturns the raw underlying name as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>KebabNameKind</code> corresponding to this name.\nCreates a new kebab string slice.\nCreates a new kebab string.\nAttempts to parse <code>name</code> as a kebab name, returning <code>None</code> if …\nConverts the slice to an owned string.\nThe type is a borrowed handle to the specified resource.\nThe definition is for a component type.\nThe entity is a component.\nRepresents a component defined type.\nThe entity type for imports and exports of a component.\nThe definition is for a component function type.\nRepresents a type of a component function.\nThe definition is for a component instance type.\nRepresents a type of a component instance.\nRepresents a type of a component.\nA component value type.\nThe definition is for a component defined type.\nThe entity type for imports and exports of a module.\nThe type is an enumeration.\nThe instance type is the result of instantiating from …\nThe type is a set of flags.\nThe entity is a function.\nThe entity is a function.\nThe entity is a global.\nThe definition is for a core module instance type.\nThe entity is a component instance.\nRepresents a module instance type.\nRepresents the kind of module instance type.\nThe instance type is the result of instantiating a module …\nThe type is a list.\nThe entity is a memory.\nThe definition is for a core module type.\nThe entity is a core module.\nRepresents a core module type.\nThe type is an <code>option</code>.\nThe type is an owned handle to the specified resource.\nThe value type is one of the primitive types.\nThe type is a primitive value type.\nThe type is a record.\nRepresents a record type.\nThis definition is for a resource type in the component …\nAn opaque identifier intended to be used to distinguish …\nThe type is a <code>result</code>.\nThe definition is for a sub type.\nThe entity is a table.\nThe entity is a tag.\nThe type is a tuple.\nRepresents a tuple type.\nA unified type definition for validating WebAssembly …\nThe type is represented with the given type identifier.\nThe entity is a type.\nRepresents a unique identifier for a type known to a …\nRepresents the types known to a <code>crate::Validator</code> once …\nRepresents the types known to a <code>crate::Validator</code> during …\nThe type is a union.\nRepresents a union type.\nThe entity is a value.\nThe type is a variant.\nRepresents a variant case.\nRepresents a variant type.\nGets a reference to this validation type information.\nThe map of variant cases.\nGets the type of a component at the given component index.\nGets the type of a component at the given component index.\nGets the count of imported, exported, or aliased …\nReturns the number of components defined so far.\nGets the component entity type for the given component …\nGets the component entity type for the given component …\nGets the component entity type for the given component …\nGets the component entity type for the given component …\nGets the type of a component function at the given …\nGets the type of a component function at the given …\nGets the count of imported, exported, or aliased component …\nReturns the number of component functions defined so far.\nGets the type of an component instance at the given …\nGets the type of an component instance at the given …\nGets the count of imported, exported, or aliased component …\nReturns the number of component instances defined so far.\nGets a component type from the given component type index.\nGets a type id from a type index.\nReturns the number of component types defined so far.\nGets a core WebAssembly type at the given type index.\nGets a core WebAssembly type id from a type index.\nReturns the number of core types defined so far.\nThe dual of the <code>imported_resources</code>, or the set of defined …\nThe list of “defined resources” or those which are …\nGets the type of an element segment at the given element …\nGets the type of an element segment at the given element …\nGets the count of element segments.\nReturns the number of elements defined so far.\nGets the entity type from the given export.\nGets the entity type from the given export.\nGets the entity type from the given import.\nGets the entity type for the given import.\nThe set of all resources which are explicitly exported by …\nThe list of all resources that are explicitly exported …\nGets the exports of the instance type.\nThe exports of the module type.\nThe exports of the component type.\nThe list of exports, keyed by name, that this instance has.\nThe map of record fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the type of a core function at the given function …\nGets the type of a core function at the given function …\nGets the count of core functions defined so far.\nGets the count of core functions defined so far.\nGets a type based on its type id.\nGets a type based on its type id.\nGets the type of a global at the given global index.\nGets the type of a global at the given global index.\nGets the count of imported and defined globals.\nReturns the number of globals defined so far.\nUniversally quantified resources required to be provided …\nThe imports of the module type.\nThe imports of the component type.\nGets the type of a module instance at the given module …\nGets the type of a module instance at the given module …\nGets the count of imported, exported, or aliased core …\nReturns the number of core wasm instances defined so far.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if component entity type <code>a</code> is a subtype of <code>b</code>.\nThe kind of module instance type.\nLooks up an import by its module and name.\nGets the type of a memory at the given memory index.\nGets the type of a memory at the given memory index.\nGets the count of imported and defined memories.\nReturns the number of memories defined so far.\nGets the type of a module at the given module index.\nGets the type of a module at the given module index.\nGets the count of imported, exported, or aliased modules.\nReturns the number of core wasm modules defined so far.\nThe function parameters.\nAttempts to lookup the type id that <code>ty</code> is an alias of.\nThe name of the variant case refined by this one.\nThe function’s results.\nGets the type of a table at the given table index.\nGets the type of a table at the given table index.\nGets the count of imported and defined tables.\nReturns the number of tables defined so far.\nGets the type of a tag at the given tag index.\nGets the type of a tag at the given tag index.\nGets the count of imported and defined tags.\nReturns the number of tags defined so far.\nThe variant case type.\nGets the count of core types.\nThe types of the tuple.\nThe types of the union.\nConverts the type to an array type.\nConverts the type to a component type.\nConverts the type to a component function type.\nConverts the type to a component instance type.\nConverts the type to a component defined type.\nConverts the type to a core function type.\nConverts the type to a core module instance type.\nConverts the type to a core module type.\nConverts this type to a resource type, returning the …\nConverts the type to a struct type.\nGets the type of a value at the given value index.\nGets the type of a value at the given value index.\nGets the count of imported, exported, or aliased values.\nThe <code>error</code> type.\nThe <code>ok</code> type.\nThis is the identifier of the type that was created when …\nThis is the identifier of the type that was referenced …")