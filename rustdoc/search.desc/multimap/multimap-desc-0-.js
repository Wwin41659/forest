searchState.loadedDescShard("multimap", 0, "A map implementation which allows storing multiple values …\nA view into a single location in a map, which may be …\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn occupied Entry.\nA view into a single occupied location in a MultiMap.\nA vacant Entry.\nA view into a single empty location in a MultiMap.\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns true if the map contains a value for the specified …\nGets the specified key’s corresponding entry in the map …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the first item in value in the vector …\nReturns a reference to the first item in the vector …\nGets a mut reference to the first item in value in the …\nReturns a mutable reference to the first item in the …\nGets a reference to the values (vector) corresponding to …\nReturns a reference to the vector corresponding to the key.\nGets a mut reference to the values (vector) corresponding …\nReturns a mutable reference to the vector corresponding to …\nInserts a new value onto the vector of the entry.\nSets the first value in the vector of the entry with the …\nInserts a key-value pair into the multimap. If the key …\nInserts multiple key-value pairs into the multimap. If the …\nInserts multiple key-value pairs into the multimap. If the …\nExtends the existing vector with the specified values.\nSets values in the entry with the VacantEntry’s key, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nReturns true if the map contains no elements.\nReturns true if the key is multi-valued.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. Iterator …\nReturns the number of elements in the map.\nCreate a <code>MultiMap</code> from a list of key value pairs\nCreates an empty MultiMap\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nTakes the values (vector) out of the entry, and returns it\nRemoves a key from the map, returning the vector of values …\nRetains only the elements specified by the predicate.\nSerde trait implementations for MultiMap\nCreates an empty multimap with the given initial capacity.\nCreates an empty MultiMap with the given intial capacity …\nCreates an empty MultiMap which will use the given hash …")