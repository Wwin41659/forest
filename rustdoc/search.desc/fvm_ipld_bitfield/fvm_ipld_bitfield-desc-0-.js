searchState.loadedDescShard("fvm_ipld_bitfield", 0, "A bit field with buffered insertion/removal that …\nA bit field that may not yet have been validated for valid …\nA trait for types that can produce a <code>&amp;BitField</code> (or fail to …\nConstructs a <code>BitField</code> from a given list of 1s and 0s.\nReturns an iterator over the indices of the bit field’s …\nReturns true if the <code>self</code> is a superset of <code>other</code>.\nReturns true if <code>self</code> overlaps with <code>other</code>.\nReturns a new bit field containing the bits in <code>self</code> that …\nReturns the index of the lowest bit present in the bit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes RLE+ encoded bytes into a bit field.\nCreates a new bit field from a <code>RangeIterator</code>.\nReturns <code>true</code> if the bit field contains the bit at a given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the bit field is empty.\nReturns an iterator over the indices of the bit field’s …\nReturns the index of the highest bit present in the bit …\nReturns the number of set bits in the bit field.\nCreates an empty bit field.\nReturns an iterator over the ranges of set bits that make …\nAdds the bit at a given index to the bit field, panicing …\nReturns a slice of the bit field with the start index of …\nTurns a bit field into its RLE+ encoded form.\nTries to create a new bitfield from a bit iterator. It …\nAdds the bit at a given index to the bit field, returning …\nReturns the union of the given bit fields as a new bit …\nRemoves the bit at a given index from the bit field.\nValidates the RLE+ encoding of the bit field, returning a …\nValidates the RLE+ encoding of the bit field, returning a …\nA trait for iterators over <code>Range&lt;u64&gt;</code>.\nA <code>RangeIterator</code> that wraps a regular iterator over …\nA <code>RangeIterator</code> that skips over <code>n</code> bits of antoher …\nA <code>RangeIterator</code> that iterates over the first <code>n</code> bits of …\nReturns a new <code>RangeIterator</code> over the bits in <code>self</code> that …\nReturns a new <code>RangeIterator</code> over the bits that are in <code>self</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new <code>RangeIterator</code> over the bits that are in both …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Ranges</code> instance.\nReturns a new <code>RangeIterator</code> over the bits in <code>self</code> after …\nReturns a new <code>RangeIterator</code> over the bits that are in <code>self</code> …\nReturns a new <code>RangeIterator</code> over the first <code>n</code> bits in <code>self</code>.\nReturns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…\nWrapper for serializing a UnsignedMessage reference to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")