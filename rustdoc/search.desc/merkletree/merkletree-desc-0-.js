searchState.loadedDescShard("merkletree", 0, "light <em>Merkle Tree</em> implementation.\nHash infrastructure for items in Merkle tree. Hash …\nMerkle tree abstractions, implementation and algorithms.\nMerkle tree inclusion proof.\nStore implementations.\nA trait for hashing an arbitrary stream of bytes for …\nA hashable type.\nFeeds this value into the given <code>Hasher</code>.\nReturns the hash value for the data stream written so far.\nFeeds a slice of this type into the given <code>Hasher</code>.\nReturns hash value for MT leaf (prefix 0x00).\nReturns hash value for MT interior node (prefix 0x01).\nReturns hash value for MT interior node (prefix 0x01).\nReset Hasher state.\nElement stored in the merkle tree.\nReturns the length of an element when serialized as a byte …\nTruncates the data for later access via LevelCacheStore …\nReturns data reference\nRemoves the backing store for this merkle tree.\nReturns the argument unchanged.\nBuild the tree given a slice of all leafs, in bytes form.\nBuild the tree given a slice of all leafs, in bytes form.\nCreates new merkle tree from a list of hashable objects.\nCreates new merkle tree from an already allocated ‘Store…\nCreates new merkle tree from a list of hashable objects.\nCreates new merkle tree from an iterator over hashable …\nCreates new merkle tree from an iterator over hashable …\nCreates the element from its byte form. Panics if the …\nCreate a compound merkle tree given already constructed …\nCreate a compound merkle tree given already constructed …\nGiven a set of StoreConfig’s (i.e on-disk references to …\nGiven a set of StoreConfig’s (i.e on-disk references to …\nGiven a set of Stores (i.e. backing to MTs), instantiate …\nGiven a set of StoreConfig’s (i.e on-disk references to …\nGiven a set of StoreConfig’s (i.e on-disk references to …\nCreates new top layer merkle tree from a vector of merkle …\nCreates new top layer merkle tree from a vector of merkle …\nRepresent a fully constructed merkle tree from a provided …\nRepresent a fully constructed merkle tree from a provided …\nCreates new compound merkle tree from a vector of merkle …\nGenerate merkle tree inclusion proof for leaf <code>i</code> by first …\nGenerate merkle tree inclusion proof for leaf <code>i</code>\nFIXME: Ideally this function should be replaced with ‘…\nThis function calculates length of the generic tree by …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the store contains no elements.\nReturns original number of elements the tree was built …\nReturns number of elements in the tree.\nfind power of 2 of a number which is power of 2\nCreates new merkle from a sequence of hashes.\nCreates new merkle from a sequence of hashes.\nreturns next highest power of two from a given number if …\nReturns merkle leaf at index i\nReads into a pre-allocated slice (for optimization …\nReturns merkle root\nReturns row_count of the tree\nGiven a pathbuf, instantiate an ExternalReader and set it …\nAttempts to create a new merkle tree using hashable …\nAttempts to create a new merkle tree using hashable …\nMerkle tree inclusion proof for data element, for which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn proof target leaf\nReturns the lemma of this proof.\nReturns the lemma of this proof as mutable.\nCreates new MT inclusion proof\nReturns the path of this proof.\nReturn tree root\nReturn sub tree root\nVerifies MT inclusion proof\nVerifies MT inclusion proof and that leaf_data is the …\nThe Disk-only store is used to reduce memory to the …\nThe LevelCacheStore is used to reduce the on-disk …\nStore that saves the data on disk, and accesses it using …\nTree size (number of nodes) used as threshold to decide …\nBacking store of the merkle tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA unique identifier used to help specify the on-disk store …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis constructor is used for instantiating stores ONLY …\nUsed for opening v2 compacted DiskStores.\nCreates a new store which can store up to <code>size</code> elements.\nA directory in which data (a merkle tree) can be persisted.\nThe number of merkle tree rows_to_discard then cache on …\nThe number of elements in the DiskStore.  This field is …")