searchState.loadedDescShard("prometheus_client", 0, "Client library implementation of the Open Metrics …\nMetric collector implementation.\nExposition format implementations.\nMetric type implementations.\nMetric registry implementation.\nThe <code>Collector</code> abstraction allows users to provide …\nOnce the <code>Collector</code> is registered, this method is called on …\nEncoder for a counter value.\nEncoder for a Metric Descriptor.\nAn encodable counter value.\nAn encodable exemplar value.\nAn encodable gauge value.\nAn encodable label.\nAn encodable label key.\nAn encodable label set.\nDerive <code>prometheus_client::encoding::EncodeLabelSet</code>.\nAn encodable label value.\nDerive <code>prometheus_client::encoding::EncodeLabelValue</code>.\nTrait implemented by each metric type, e.g. <code>Counter</code>, to …\nEncoder for an exemplar value.\nEncoder for a gauge value.\nEncoder for a label.\nEncoder for a label key.\nEncoder for a label set.\nEncoder for a label value.\nEncoder for a metric.\nEncode the given instance in the OpenMetrics text encoding.\nEncode oneself into the given encoder.\nEncode oneself into the given encoder.\nEncode oneself into the given encoder.\nEncode oneself into the given encoder.\nEncode the given instance in the OpenMetrics text encoding.\nEncode the given instance in the OpenMetrics text encoding.\nEncode the given instance in the OpenMetrics text encoding.\nEncode a counter.\nEncode a descriptor.\nEncode a metric family.\nEncode a gauge.\nEncode a histogram.\nEncode an info.\nEncode the given label.\nEncode a label.\nEncode a label value.\nFinish encoding the label value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe OpenMetrics metric type of the instance.\nOpen Metrics text format implementation.\nEncode both the metrics registered with the provided …\nEncode the EOF marker into the provided <code>Write</code>r using the …\nEncode the metrics registered with the provided <code>Registry</code> …\nOpenMetrics metric type.\nThe OpenMetrics metric type.\nA metric that is aware of its Open Metrics metric type.\nReturns the given metric type’s str representation.\nModule implementing an Open Metrics counter.\nModule implementing an Open Metrics exemplars for counters …\nModule implementing an Open Metrics metric family.\nReturns the argument unchanged.\nModule implementing an Open Metrics gauge.\nModule implementing an Open Metrics histogram.\nModule implementing an Open Metrics info metric.\nCalls <code>U::from(self)</code>.\nAtomic operations for a <code>Counter</code> value store.\nAs a <code>Counter</code>, but constant, meaning it cannot change once …\nOpen Metrics <code>Counter</code> to measure discrete events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the the value.\nGet the current value of the <code>Counter</code>.\nIncrease the value by <code>1</code>.\nIncrease the <code>Counter</code> by 1, returning the previous value.\nIncrease the value.\nIncrease the <code>Counter</code> by <code>v</code>, returning the previous value.\nExposes the inner atomic type of the <code>Counter</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ConstCounter</code>.\nOpen Metrics <code>Counter</code> with an <code>Exemplar</code> to both measure …\nAn OpenMetrics <code>Counter</code> in combination with an OpenMetrics …\nAn OpenMetrics exemplar.\nOpen Metrics <code>Histogram</code> to both measure distributions of …\nAn OpenMetrics <code>Histogram</code> in combination with an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current value of the <code>CounterWithExemplar</code> as well …\nIncrease the <code>CounterWithExemplar</code> by <code>v</code>, updating the …\nExposes the inner atomic type of the <code>CounterWithExemplar</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>HistogramWithExemplars</code>.\nObserve the given value, optionally providing a label set …\nRepresentation of the OpenMetrics <em>MetricFamily</em> data type.\nA constructor for creating new metrics in a <code>Family</code> when …\nClear all label sets from the metric family.\nReturns the argument unchanged.\nAccess a metric with the given label set, creating it if …\nCalls <code>U::from(self)</code>.\nCreate a new instance of the metric type.\nCreate a metric family using a custom constructor to …\nRemove a label set from the metric family.\nAtomic operations for a <code>Gauge</code> value store.\nAs a <code>Gauge</code>, but constant, meaning it cannot change once …\nOpen Metrics <code>Gauge</code> to record current measurements.\nDecrease the value by <code>1</code>.\nDecrease the <code>Gauge</code> by 1, returning the previous value.\nDecrease the value.\nDecrease the <code>Gauge</code> by <code>v</code>, returning the previous value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value.\nGet the current value of the <code>Gauge</code>.\nIncrease the value by <code>1</code>.\nIncrease the <code>Gauge</code> by 1, returning the previous value.\nIncrease the value.\nIncrease the <code>Gauge</code> by <code>v</code>, returning the previous value.\nExposes the inner atomic type of the <code>Gauge</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ConstGauge</code>.\nSet the value.\nSets the <code>Gauge</code> to <code>v</code>, returning the previous value.\nOpen Metrics <code>Histogram</code> to measure distributions of …\nExponential bucket distribution.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLinear bucket distribution.\nCreate a new <code>Histogram</code>.\nObserve the given value.\nOpen Metrics <code>Info</code> metric “to expose textual information …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate <code>Info</code> metric with the provided label set.\nSuper trait representing an abstract Prometheus metric.\nA metric registry.\nMetric units recommended by Open Metrics.\nReturns the given Unit’s str representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister a metric with the <code>Registry</code>.\nRegister a <code>Collector</code>.\nRegister a metric with the <code>Registry</code> specifying the metric…\nLike <code>Registry::sub_registry_with_prefix</code> but with a label …\nLike <code>Registry::sub_registry_with_prefix</code> but with multiple …\nCreate a sub-registry to register metrics with a common …\nCreates a new default <code>Registry</code> with the given labels.\nCreates a new default <code>Registry</code> with the given prefix.\nCreates a new default <code>Registry</code> with the given prefix and …")