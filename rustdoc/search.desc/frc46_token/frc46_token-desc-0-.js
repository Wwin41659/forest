searchState.loadedDescShard("frc46_token", 0, "Receive parameters for an FRC46 token\nAmount of tokens being transferred/minted\nReturns the argument unchanged.\nThe account that the tokens are being pulled from (the …\nCalls <code>U::from(self)</code>.\nAddress of the operator that initiated the transfer/mint\nData specified by the operator during transfer/mint\nThe account that the tokens are being sent to (the …\nAdditional data specified by the token-actor during …\nRatio of integral units to interpretation as standard …\nLibrary functions that implement core FRC-??? standards\nGets the allowance between owner and operator\nChecks the state invariants, throwing an error if they are …\nReturns the balance associated with a particular address\nBurns an amount of token from the specified address, …\nBurns an amount of token from the specified address, …\nCalls the receiver hook, returning the result\nChecks the state invariants, returning a state summary and …\nCreates a new clean token state instance\nCreates a new clean token state instance, specifying the …\nDecrease the allowance that an operator controls of the …\nFlush state and return Cid for root\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the smallest amount of tokens which is indivisible\nIncrease the allowance that an operator can control of an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a fresh copy of the state from a blockstore from a …\nFor an already initialised state tree, loads the state …\nMints the specified value of tokens into an account\nFinalise return data from MintIntermediate data returned …\nReplace the current state with another The previous state …\nSets the allowance between owner and operator to zero, …\nGet a reference to the underlying runtime\nSets the allowance to a specified amount, returning the …\nSets the balance of an account to a specific amount\nGet a reference to the wrapped state tree\nGets the total number of tokens in existence\nTransfers an amount from the caller to another address\nTransfers an amount from one address to another\nGenerate TransferReturn from the intermediate data …\nGenerate TransferReturn from the intermediate data …\nValidates that an allowance is non-negative. Allowances do …\nValidates that a token amount for burning/transfer/minting …\nWrap an existing token state\nThis value has been chosen to optimise to reduce gas-costs …\nA summary of the current state to allow checking …\nToken state IPLD structure\nMap&lt;ActorId, Map&lt;ActorId, TokenAmount&gt;&gt; as a Hamt. …\nAtomically checks if value is less than the allowance and …\nMap&lt;ActorId, TokenAmount&gt; of balances as a Hamt\nChange the allowance between owner and operator by the …\nChanges the balance of the specified account by the delta\nIncrease/decrease the total supply by the specified value\nChecks that the current state obeys all system invariants\nRetrieve the number of token holders\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the allowance that an owner has approved for a operator\nGet the global allowances map\nGet the balance of an ActorID from the currently stored …\nRetrieve the balance map as a HAMT\nGet the allowances map of a specific actor, resolving the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a fresh copy of the state from a blockstore from a …\nRecord a transfer of an amount between two accounts\nCreate a new token state-tree, without committing it (the …\nCreate a new token state-tree, without committing it (the …\nRevokes an approved allowance by removing the entry from …\nSaves the current state to the blockstore, returning the …\nSet the allowance between owner and operator to a specific …\nSet the balance of the account returning the old balance\nTotal supply of token\nInstruction to burn an amount of tokens from another …\nThe updated value after a delegated burn\nInstruction to burn an amount of tokens\nThe updated value after burning\nInstruction to decrease an allowance between two addresses\nA standard fungible token interface allowing for on-chain …\nParams to get allowance between to addresses\nInstruction to increase an allowance between two addresses\nIntermediate data used by mint_return to construct the …\nReturn value after a successful mint. The mint method is …\nInstruction to revoke (set to 0) an allowance\nIntermediate data used by transfer_from_return to …\nInstruction to transfer tokens between two addresses as an …\nReturn value after a successful delegated transfer\nIntermediate data used by transfer_return to construct the …\nInstruction to transfer tokens to another address\nReturn value after a successful transfer\nReturns the allowance approved for an operator on a spender…\nThe new remaining allowance between <code>owner</code> and <code>operator</code> …\nNew remaining allowance between the owner and operator …\nA non-negative amount to transfer\nA non-negative amount to transfer\nA non-negative amount to burn\nA non-negative amount to burn\nThe new balance of the owner address\nNew balance in the account after the successful burn\nNew balance in the account after the successful burn\nReturns the balance of an address\nBurns tokens from the caller’s balance, decreasing the …\nBurns tokens from an address’s balance\nA non-negative amount to decrease the allowance by\nAtomically decreases the approved balance that a operator …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe new balance of the <code>from</code> address\nThe new balance of the <code>from</code> address\nReturns the smallest amount of tokens which is indivisible.\nA non-negative amount to increase the allowance by\nAtomically increases the approved allowance that a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the name of the token\nArbitrary data to pass on via the receiver hook\nArbitrary data to pass on via the receiver hook\nRecipient address to use for querying balance\n(Optional) data returned from receiver hook\n(Optional) data returned from receiver hook\n(Optional) data returned from receiver hook\n(Optional) data returned from receiver hook\n(Optional) data returned from receiver hook\n(Optional) data returned from receiver hook\nSets the allowance a operator has on the owner’s account …\nThe new total supply.\nReturns the ticker symbol of the token\nThe new balance of the <code>to</code> address\nThe new balance of the <code>to</code> address\nReturns the total amount of the token in existence\nTransfers tokens from the caller to another address\nTransfers tokens from one address to another")