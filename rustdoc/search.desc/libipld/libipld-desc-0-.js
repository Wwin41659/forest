searchState.loadedDescShard("libipld", 0, "The <code>Ipld</code> crate.\nRepresents a boolean value.\nRepresents a boolean value.\nRepresents a sequence of bytes.\nRepresents a sequence of bytes.\nA Cid that contains a multihash with an allocated size of …\nContains the error value\nRepresents a floating point value.\nRepresents a floating point value.\nRepresents an integer.\nRepresents an integer.\nIpld\nIpld\nTyped cid.\nRepresents a map of integers.\nRepresents a map of integers.\nRepresents a list.\nRepresents a list.\nRepresents a map of strings.\nRepresents a map of strings.\nA Multihash with the same allocated size as the …\nRepresents the absence of a value or the value undefined.\nRepresents the absence of a value or the value undefined.\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nRepresents an UTF-8 string.\nRepresents an UTF-8 string.\nBlock validation\n<code>Ipld</code> codecs.\nIPLD Codecs.\nConversion to and from ipld.\n<code>Ipld</code> error definitions.\nReturns the argument unchanged.\nIndexes into an ipld list or map.\nCalls <code>U::from(self)</code>.\nIpld representation.\nReturns an iterator.\nTyped cid.\nPath\nPrelude\nImplements the raw codec.\nmisc stuff\nReturns the references to other blocks.\nSerde (de)serialization for <code>crate::ipld::Ipld</code>.\nStore traits.\nDestructs an ipld list or map\nBlock\nReturns the cid.\nReturns the payload.\nDecodes a block.\nEncode a block.`\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the inner cid and data.\nReturns the decoded ipld.\nCreates a new block. Returns an error if the hash doesn’…\nCreates a new block without verifying the cid.\nReturns the references.\nA Cid that contains a multihash with an allocated size of …\nRepresentation of a CID.\nContains the error value\nError types\nInput data is too short.\nInvalid CIDv0 base encoding.\nInvalid CIDv0 codec.\nInvalid CIDv0 multihash.\nInvalid CID version.\nInvalid explicit CIDv0.\nIo error.\nContains the success value\nMultibase or multihash codec failure\nType alias to use this library’s <code>Error</code> type in a <code>Result</code>.\nUnknown CID codec.\nCID version 0.\nCID version 1.\nVarint decode failure.\nThe version of the CID.\nReturns the cid codec.\nReturns the length in bytes needed to encode this cid into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the cid multihash.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a CIDv0 to a CIDv1. Returns unchanged if already a …\nCheck if the version of <code>data</code> bytes is CIDv0.\nCheck if the version of <code>data</code> string is CIDv0.\nCreate a new CID.\nCreate a new CIDv0.\nCreate a new CIDv1.\nReads the bytes from a byte stream.\nCID Serde (de)serialization for the IPLD Data Model.\nReturns the encoded bytes of the <code>Cid</code>.\nConvert CID into a multibase encoded string\nReturns the cid version.\nWrites the bytes to a byte stream, returns the number of …\nList of types currently supported in the multibase spec.\nBase10 (alphabet: 0123456789).\nBase16 lower hexadecimal (alphabet: 0123456789abcdef).\nBase16 upper hexadecimal (alphabet: 0123456789ABCDEF).\nBase2 (alphabet: 01).\nBase32hex, rfc4648 no padding (alphabet: …\nBase32hex, rfc4648 with padding (alphabet: …\nBase32hex, rfc4648 with padding (alphabet: …\nBase32hex, rfc4648 no padding (alphabet: …\nBase32, rfc4648 no padding (alphabet: …\nBase32, rfc4648 with padding (alphabet: …\nBase32, rfc4648 with padding (alphabet: …\nBase32, rfc4648 no padding (alphabet: …\nz-base-32 (used by Tahoe-LAFS) (alphabet: …\nBase36, [0-9a-z] no padding (alphabet: …\nBase36, [0-9A-Z] no padding (alphabet: …\nBase58 bitcoin (alphabet: …\nBase58 flicker (alphabet: …\nBase64, rfc4648 no padding (alphabet: …\nBase64, rfc4648 with padding (alphabet: …\nBase64 url, rfc4648 no padding (alphabet: …\nBase64 url, rfc4648 with padding (alphabet: …\nBase8 (alphabet: 01234567).\nContains the error value\nError types\n8-bit binary (encoder and decoder keeps data unmodified).\nInvalid string.\nContains the success value\nType alias to use this library’s <code>Error</code> type in a <code>Result</code>.\nUnknown base code.\nGet the code corresponding to the base algorithm.\nDecode the base string.\nDecode the base string.\nEncode with the given byte slice to base string.\nEncode the given byte slice to base string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a number to the matching base algorithm, or <code>Error</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n256 bit blake2b hasher.\nBLAKE2b-256 (32-byte hash size)\n512 bit blake2b hasher.\nBLAKE2b-512 (64-byte hash size)\nMultihash hasher.\n256 bit blake2b hasher.\nBLAKE2s-128 (16-byte hash size)\n512 bit blake2b hasher.\nBLAKE2s-256 (32-byte hash size)\nMultihash hasher.\nMultihash hasher.\nblake3-256 hasher.\nBLAKE3-256 (32-byte hash size)\nDefault (cryptographically secure) Multihash …\nContains the error value\nMultihash error.\nTrait implemented by a hash function implementation.\nIdentity hash (max. 64 bytes)\n32 byte Identity hasher (constrained to 32 bytes).\nIdentity hasher with a maximum size.\nInvalid multihash size.\nIo error.\nMultihash hasher.\nKeccak-224 (28-byte hash size)\nMultihash hasher.\nKeccak-256 (32-byte hash size)\nMultihash hasher.\nKeccak-384 (48-byte hash size)\nMultihash hasher.\nKeccak-512 (64-byte hash size)\nA Multihash with the same allocated size as the …\nTrait that implements hashing.\nA Multihash instance that only supports the basic …\nContains the success value\nMultihash result.\nMultihash hasher.\nRIPEMD-160 (20-byte hash size)\nMultihash hasher.\nRIPEMD-256 (32-byte hash size)\nMultihash hasher.\nRIPEMD-320 (40-byte hash size)\nMultihash hasher.\nSHA-256 (32-byte hash size)\nMultihash hasher.\nSHA-512 (64-byte hash size)\nMultihash hasher.\nSHA3-224 (28-byte hash size)\nMultihash hasher.\nSHA3-256 (32-byte hash size)\nMultihash hasher.\nSHA3-384 (48-byte hash size)\nMultihash hasher.\nSHA3-512 (64-byte hash size)\nUnsupported multihash code.\nInvalid varint.\nReturns the code of the multihash.\nCalculate the hash of some input data.\nReturns the digest.\nReturns the length in bytes needed to encode this …\nReturns the final digest.\nusing blake3’s XOF function, fills the given slice with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a multihash from a bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecomposes struct, useful when needing a <code>Sized</code> array or …\nReads a multihash from a byte stream.\nReset the internal hasher state.\nResizes the backing multihash buffer. This function fails …\nReturns the size of the digest.\nReturns the bytes of a multihash.\nTruncates the multihash to the given size. It’s up to …\nConsume input and update internal state.\nCreate a multihash from an existing multihash digest.\nWraps the digest in a multihash.\nWrites a multihash to a byte stream, returning the written …\nVisitor to transform bytes into a CID.\nAn identifier that is used internally by Serde …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSome Serde data formats interpret a byte stream as a …\nCodec trait.\nDecode trait.\nEncode trait.\nReferences trait.\nUtility for testing codecs.\nDecode from an <code>impl Read</code>.\nDecodes a decodable type.\nEncodes into a <code>impl Write</code>.\nEncodes an encodable type.\nScrape the references from an <code>impl Read</code>.\nScrapes the references.\nCbor codec.\nJson codec.\nDefault codecs.\nRaw codec.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe block wasn’t found. The supplied string is a CID.\nBlock exceeds 1MiB.\nBoolean type.\nBytes type.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nFloat type.\nIndex type.\nInteger type.\nHash does not match the CID.\nKey type.\nLink type.\nList type.\nMap type.\nNull type.\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nError during Serde operations.\nString type.\nType error.\nType error type.\nThe codec is unsupported.\nThe multihash is unsupported.\nGet the backtrace for this Error.\nAn iterator of the chain of source errors contained by …\nWrap the error value with additional context.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nThe expected type.\nThe actual type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nCreates a new type error.\nThe lowest level cause of this error — this error’s …\nRepresents a boolean value.\nRepresents a sequence of bytes.\nRepresents a floating point value.\nRepresents an integer.\nIpld\nAn index into ipld\nIpld iterator.\nRepresents a map of integers.\nAn index into an ipld list.\nRepresents a list.\nAn owned index into an ipld map.\nRepresents a map of strings.\nAn index into an ipld map.\nRepresents the absence of a value or the value undefined.\nRepresents an UTF-8 string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTyped cid.\nReturns a reference to the cid.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Link</code>.\nPath in a dag.\nRepresents a path in an ipld dag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over path segments.\nJoin segment.\nCreate a new dag path.\nReturns the ipld path.\nReturns the root of the path.\nCodec trait.\nDecode trait.\nEncode trait.\nReferences trait.\nDecode from an <code>impl Read</code>.\nDecodes a decodable type.\nEncodes into a <code>impl Write</code>.\nEncodes an encodable type.\nScrape the references from an <code>impl Read</code>.\nScrapes the references.\nRaw codec.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllows to ignore a single item\nA raw value for a certain codec.\ntrait to implement to skip a single item at the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nassuming r is at the start of an item, advance r to the end\nThe IPLD serializer.\nReturns the argument unchanged.\nDeserialize instances of <code>crate::ipld::Ipld</code>.\nCalls <code>U::from(self)</code>.\nSerialize into instances of <code>crate::ipld::Ipld</code>.\nThe codec type of the store.\nDefault store parameters.\nThe multihash type of the store.\nThe maximum block size supported by the store.\nThe store parameters.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")