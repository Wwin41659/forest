searchState.loadedDescShard("fvm_sdk", 0, "Contains the error value\nBlockID representing nil parameters or return data.\nContains the success value\nSDK functions performing a syscall return a SyscallResult …\nGenerate a set of FVM syscall shims.\nInitialize the FVM SDK. Calling this function optional but …\nThis module defines the low-level syscall API.\nRetrieves the balance of the specified actor, or None if …\nCreates a new actor of the specified type in the state …\nLook up the code ID at an actor address. Returns <code>None</code> if …\nDetermines whether the supplied CodeCID belongs to a …\nReturns the CodeCID for a built-in actor type. Aborts with …\nLooks up the delegated (f4) address of the specified …\nGenerates a new actor address for an actor deployed by the …\nResolves the ID address of an actor. Returns <code>None</code> if the …\nComputes an unsealed sector CID (CommD) from its …\nHashes input data using blake2b with 256 bit output.\nHashes input data using one of the supported functions …\nHashes input data using one of the supported functions. …\nRecovers the signer public key from the message hash and …\nVerifies that two block headers provide proof of a …\nVerifies a window proof of spacetime.\nVerifies that a signature is valid for an address and …\nReturns whether debug mode is enabled.\nInitialize logging if debugging is enabled.\nLogs a message on the node.\nSaves an artifact to the host env. New artifacts with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCharge gas for the operation identified by name.\nThe unit/void object.\nGet a block. It’s valid to call this on:\nGets the data of the block referenced by BlockId. If the …\nStore a block. The block will only be persisted in the …\nWrites the supplied block and returns the BlockId.\nReturns the ID address of the caller.\nReturns the execution gas premium\nReturns the message’s method number.\nReturns the nonce from the (explicit) message.\nReturns the ID address of the origin\nReturns the message parameters as an Option.\nReturns the ID address of the actor.\nReturns the value received from the caller in AttoFIL.\nReturns the tipset CID of the specified epoch, if …\nReturns the current block time in seconds since the EPOCH.\nGets 32 bytes of randomness from the beacon system …\nGets 32 bytes of randomness from the ticket chain. The …\nSends a message to another actor.\nGets the current balance for the calling actor.\nGet the IPLD root CID. Fails if the actor doesn’t have …\nDestroys the calling actor, burning any remaining balance.\nSet the actor’s state-tree root.\nA system-level assertion has failed.\nThe passed buffer is too small.\nWhen a syscall fails, it returns an <code>ErrorNumber</code> to …\nThe operation is forbidden.\nA syscall parameters was invalid.\nThe requested CID shape (multihash codec, multihash …\nThe requested IPLD codec isn’t supported.\nThe actor is not in the correct state to perform the …\nThere were insufficient funds to complete the requested …\nThe specified IPLD block handle was invalid.\nThis syscall would exceed some system limit (memory, …\nA resource was not found.\nThe actor is executing in a read-only context.\nThe IPLD block did not match the specified IPLD codec.\nThe token amount type used in syscalls. It can represent …\nSyscalls for creating and resolving actors.\nSyscalls for cryptographic operations.\nSyscalls for debugging.\nSyscalls related to eventing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a set of FVM syscall shims.\nSyscalls for working with gas.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSyscalls for manipulating IPLD state.\nSyscalls for network metadata.\nSyscalls for getting randomness.\nSyscalls for sending messages to other actors.\nSyscalls for querying and modifying the current actor.\nSyscalls for interacting with the VM.\nGets the balance of the specified actor.\nGets the CodeCID of an actor by address.\nReturns the builtin-actor type ID for the given CodeCID, …\nReturns the CodeCID for the given built-in actor type.\nLooks up the “delegated” (f4) address of the target …\nResolves the ID address of an actor.\nVerifies a batch of sector seal proofs.\nComputes an unsealed sector CID (CommD) from its …\nReturns the argument unchanged.\nHashes input data using the specified hash function. The …\nCalls <code>U::from(self)</code>.\nRecovers the signer public key from a signed message hash …\nVerifies an aggregated batch of sector seal proofs.\nVerifies that a BLS aggregate signature is valid for a …\nVerifies that two block headers provide proof of a …\nVerifies a window proof of spacetime.\nVerifies a replica update proof.\nVerifies that a signature is valid for an f1 or f3 address …\nReturns if we’re in debug mode. A zero or positive …\nLogs a message on the node.\nSave data as a debug artifact on the node.\nA fixed sized struct for serializing an event <code>Entry</code> …\nEmits an actor event to be recorded in the receipt.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the amount of gas remaining.\nCharge gas.\nThe ID of the “unit” block (or void for C programmers).\nCreates a new block, returning the block’s ID. The block…\nComputes the given block’s CID, writing the resulting …\nOpens a block from the “reachable” set, returning an …\nReads the block identified by <code>id</code> into <code>obuf</code>, starting at …\nReturns the codec and size of the specified block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current base-fee.\nThe Chain ID of the network.\nReturns the details about the network.\nThe current epoch.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe network version.\nThe current time (seconds since the unix epoch).\nRetrieves a tipset’s CID within the last finality, if …\nGets the circulating supply.\nGets 32 bytes of randomness from the beacon system …\nGets 32 bytes of randomness from the ticket chain.\nSend in “read-only” mode.\nFlags passed to the send syscall.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nSends a message to another actor, and returns the exit …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGets the current balance for the calling actor.\nGets the current root for the calling actor.\nDestroys the calling actor. If <code>burn_funds</code> is true, any …\nSets the root CID for the calling actor. The new root must …\nThe caller’s actor ID.\nAbort execution with the given code and optional message …\nFlags pertaining to the currently executing actor’s …\nReturns the argument unchanged.\nThe gas premium being paid by the currently executing …\nCalls <code>U::from(self)</code>.\nReturns the details about the message causing this …\nThe method number from the message.\nThe nonce from the explicit message.\nThe current call’s origin actor ID.\nThe receiver’s actor ID (i.e. ourselves).\nThe value that was received.\nBlockID representing nil parameters or return data.\nAbort execution; exit code must be non zero.\nExit from current message execution, with the specified …\nReturns true if the invocation context is read-only. In …\nSets a panic handler to turn all panics into aborts with …")