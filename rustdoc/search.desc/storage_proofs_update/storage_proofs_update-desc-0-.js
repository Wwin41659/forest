searchState.loadedDescShard("storage_proofs_update", 0, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the <code>h</code> for the given sector-size. The <code>h</code> value is …\nReturns the bit pattern to select the <code>h</code> value from the …\nReturns the <code>h</code> values allowed for the given sector-size. …\nCalls <code>U::from(self)</code>.\nThis circuit is NOT AUDITED, USE AT YOUR OWN RISK.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis circuit is NOT AUDITED, USE AT YOUR OWN RISK.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrites the decoded data into out_data_path\nReturns tuple of (comm_r_new, comm_r_last_new, comm_d_new)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the rho for a specific node offset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate the <code>rho</code>s for a certain number of nodes.\nGenerate the inverted <code>rho</code>s for a certain number of nodes.\nGenerate the inverted <code>rho</code>s for a certain number of nodes …\nGenerate the <code>rho</code>s for a certain number of nodes and range.\nRemoves encoded data and outputs the sector_key.")