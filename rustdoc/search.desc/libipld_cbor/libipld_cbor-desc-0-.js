searchState.loadedDescShard("libipld_cbor", 0, "CBOR codec.\nMarker trait for types supporting the <code>DagCborCodec</code>.\nCBOR codec.\nContains the error value\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nThe codec is unsupported.\nCBOR helper types for encoding and decoding.\nCBOR decoder\nCBOR encoder.\nCBOR error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArray (major type 4).\nByte string (major type 2).\nThe major “byte” indicating that a 16 bit float …\nThe major “byte” indicating that a 32 bit float …\nThe major “byte” indicating that a 64 bit float …\nThe constant TRUE.\nRepresents a major “byte”. This includes both the …\nThe type\nMap (major type 5).\nThe constant NULL.\nNegative integer (major type 1).\nOther (major type 7).\nThe constant FALSE.\nTag (major type 6).\nUnicode text string (major type 3).\nNon-negative integer (major type 0).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the additional info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the major type.\nInterprets the additioanl info as a number of additional …\nReads <code>len</code> number of bytes from a byte stream.\nReads a f32 from a byte stream.\nReads a f64 from a byte stream.\nReads a cid from a stream of cbor encoded bytes.\nReads a list of any type that implements <code>TryReadCbor</code> from …\nRead a and validate major “byte”. This includes both …\nReads a map of any type that implements <code>TryReadCbor</code> from a …\nReads <code>len</code> number of bytes from a byte stream and converts …\nReads a u16 from a byte stream.\nReads a u32 from a byte stream.\nReads a u64 from a byte stream.\nReads a u8 from a byte stream.\nRead the uint argument to the given major type. This …\nWrites a null byte to a cbor encoded byte stream.\nWrites a tag to a cbor encoded byte stream.\nWrites a u16 to a cbor encoded byte stream.\nWrites a u32 to a cbor encoded byte stream.\nWrites a u64 to a cbor encoded byte stream.\nWrites a u8 to a cbor encoded byte stream.\nA duplicate key within a map.\nThe byte before Cid was not multibase identity prefix.\nLength larger than usize or too small, for example zero …\nMissing key.\nNumber is not minimally encoded.\nNumber larger than u64.\nUnexpected cbor code.\nUnexpected eof.\nUnexpected key.\nUnknown cbor tag.\nCode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey.\nKey.\nCreates a new <code>NumberOutOfRange</code> error.\nCreates a new <code>LengthOutOfRange</code> error.\nCreates a new <code>UnexpectedCode</code> error.\nCreates a new <code>UnexpectedKey</code> error.\nCreates a new <code>MissingKey</code> error.\nType.\nType.\nType.\nType.\nType.")