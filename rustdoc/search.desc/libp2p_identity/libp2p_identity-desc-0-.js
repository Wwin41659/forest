searchState.loadedDescShard("libp2p_identity", 0, "A node’s network identity keys.\nAn error during decoding of key material.\nThe type of key a <code>KeyPair</code> is holding.\nIdentity keypair of a node.\nError produced when failing to convert <code>Keypair</code> to a more …\nError when parsing a <code>PeerId</code> from string or bytes.\nIdentifier of a peer of the network.\nThe public key of a node’s identity keypair.\nAn error during signing of a message.\nDeterministically derive a new secret from this <code>Keypair</code>, …\nECDSA keys with secp256r1 curve support.\nEd25519 keys.\nEncode the public key into a protobuf structure for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a <code>PeerId</code> from bytes.\nTries to turn a <code>Multihash</code> into a <code>PeerId</code>.\nDecode a private key from a protobuf structure and parse …\nBuilds a <code>PeerId</code> from a public key.\nGenerate a new ECDSA keypair.\nGenerate a new Ed25519 keypair.\nGenerate a new Secp256k1 keypair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a <code>KeyType</code> of the <code>Keypair</code>.\nReturn a <code>KeyType</code> of the <code>PublicKey</code>.\nGet the public key of this keypair.\nGenerates a random peer ID from a cryptographically secure …\nRSA keys.\nDecode an keypair from a DER-encoded secret key in PKCS#8 …\nSecp256k1 keys.\nDecode a keypair from a DER-encoded Secp256k1 secret key …\nSign a message using the private key of this keypair, …\nReturns a base-58 encoded string of this <code>PeerId</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nConvert the <code>PublicKey</code> into the corresponding <code>PeerId</code>.\nEncode a private key as protobuf structure.\nDecode a public key from a protobuf structure, e.g. read …\nVerify a signature for a message using this public key, …\nAn ECDSA keypair generated using <code>secp256r1</code> curve.\nAn ECDSA public key.\nAn ECDSA secret key generated using <code>secp256r1</code> curve.\nEncode a public key into a DER encoded byte buffer as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new random ECDSA keypair.\nGenerate a new random ECDSA secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message using the private key of this keypair.\nSign a message with this secret key, producing a …\nConvert a secret key into a byte buffer containing raw …\nConvert a public key into a byte buffer containing raw …\nTry to decode a public key from a DER encoded byte buffer …\nTry to parse a secret key from a byte buffer containing …\nTry to parse a public key from a byte buffer containing …\nVerify an ECDSA signature on a message using the public …\nAn Ed25519 keypair.\nAn Ed25519 public key.\nAn Ed25519 secret key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new random Ed25519 keypair.\nGenerate a new Ed25519 secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message using the private key of this keypair.\nConvert the keypair into a byte array by concatenating the …\nConvert the public key to a byte array in compressed form, …\nTry to parse a keypair from the binary format produced by …\nTry to parse a public key from a byte array containing the …\nTry to parse an Ed25519 secret key from a byte slice …\nVerify the Ed25519 signature on a message using the public …\nAn RSA keypair.\nAn RSA public key.\nEncode the RSA public key in DER as a PKCS#1 RSAPublicKey …\nEncode the RSA public key in DER as a X.509 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key from the keypair.\nSign a message with this keypair.\nDecode an RSA keypair from a DER-encoded private key in …\nDecode an RSA keypair from a DER-encoded private key in …\nDecode an RSA public key from a DER-encoded X.509 …\nVerify an RSA signature on a message using the public key.\nA Secp256k1 keypair.\nA Secp256k1 public key.\nA Secp256k1 secret key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a DER-encoded Secp256k1 secret key in an …\nGenerate a new sec256k1 <code>Keypair</code>.\nGenerate a new random Secp256k1 secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message with this secret key, producing a …\nReturns the raw bytes of the secret key.\nConvert the public key to a byte buffer in compressed …\nConvert the public key to a byte buffer in uncompressed …\nCreate a secret key from a byte slice, zeroing the slice …\nDecode a public key from a byte slice in the the format …\nVerify the Secp256k1 signature on a message using the …\nVerify the Secp256k1 DER-encoded signature on a raw …")