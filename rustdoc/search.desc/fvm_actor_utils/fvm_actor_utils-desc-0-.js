searchState.loadedDescShard("fvm_actor_utils", 0, "Generic utils related to actors on the FVM\nA fake actor fixture that can be twiddled for testing\nA helper handle for actors deployed on FVM\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the root cid of the actor’s state\nA blockstore that delegates to IPLD syscalls.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nAn abstraction used to send messages to other actors\nContains the success value\nThis method number comes from taking the name as “Receive…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSends a message to an actor\nImplements a guarded call to a token receiver hook\nType of asset received - could be tokens (FRC46 or other) …\nStandard interface for an actor that wishes to receive …\nParameters for universal receiver\nCall the receiver hook and return the result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new ReceiverHook call\nConstruct a new ReceiverHookError::Receiver\nPayload corresponding to asset type\nInvoked by a token actor during pending transfer or mint …\nAsset type\nA shared wrapper around MemoryBlockstore Clones of it will …\nReturns the argument unchanged.\nGets the block from the blockstore.\nChecks if the blockstore has the specified block.\nCalls <code>U::from(self)</code>.\nPut a block with a pre-computed cid.\nCopied to avoid linking against <code>fvm_sdk</code> for non-WASM …\nThe Syscalls trait defines methods available to the actor …\nReturns the ID address of the calling actor\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the ID address of the actor\nResolves the ID address of an actor.\nGet the IPLD root CID. Fails if the actor doesn’t have …\nSends a message to an actor\nSet the actor’s state-tree root.\nFlag to control message success\nThe f0 ID of the receiving actor\nA map of addresses that were instantiated in this runtime\nActor ID to return as caller ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last message sent via this runtime\nThe next-to-allocate f0 address\nThe root of the receiving actor\nSet the ActorID returned as caller\nRuntime that delegates to fvm_sdk allowing actors to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nActorRuntime provides access to system resources via …\nReturns the address of the current actor as an ActorID\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a runtime suitable for more complex tests, using …\nCreates a runtime suitable for tests, using mock syscalls …\nAttempts to resolve the given address to its ID address …\nResolves an address to an ID address, sending a message to …\nGet the root cid of the actor’s state\nAttempts to compare two addresses, seeing if they would …\nSends a message to an actor\nSet the root cid of the actor’s state")