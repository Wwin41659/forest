searchState.loadedDescShard("raw_sync_2", 0, "Event implementations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLock implementations\nClear’s the event state so the next wait() call will …\nSets the event to the signaled state unblocking any waiters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRe-uses an event from an already initialized location and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a new instance of the event in the provided …\nSet the current state of the event\nSize required for the event’s internal representation\nWait for the event to be signaled\nUsed to wrap an acquired lock’s data. Lock is …\nUsed to wrap an acquired lock’s read only data. Lock is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRe-uses a lock from an already initialized location and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAcquires the lock\nInitializes a new instance of the lock in the provided …\nRelease the lock\nAcquires the lock for read access only. This method uses …\nSize required for the lock’s internal representation\nAcquires lock with timeout\nAcquires the lock for read access only with timeout. This …")