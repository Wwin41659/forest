searchState.loadedDescShard("positioned_io", 0, "This crate allows you to specify an offset for reads and …\nRead or write with a given inherent byte-order.\nAdapts a <code>ReadAt</code> or <code>WriteAt</code> into a <code>Read</code> or <code>Write</code>.\nA wrapper for <code>File</code> that provides optimized random access …\nTrait for reading bytes at an offset.\nExtends <code>ReadAt</code> with methods for reading numbers at offsets.\nTrait to get the size in bytes of an I/O object.\nAdapts a <code>ReadAt</code> or <code>WriteAt</code> into a <code>Read</code> or <code>Write</code>, with …\nA window into another <code>ReadAt</code> or <code>WriteAt</code>.\nTrait for writing bytes at an offset.\nExtends <code>WriteAt</code> with methods for writing numbers at …\nFlush this writer, ensuring that any intermediately …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrow the inner <code>ReadAt</code> or <code>WriteAt</code> mutably.\nGet a mutable reference to the underlying value in this …\nMutably borrows the underlying reader or writer.\nBorrow the inner <code>ReadAt</code> or <code>WriteAt</code>.\nGet a reference to the underlying value in this slice.\nBorrows the underlying reader or writer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and yield the inner <code>ReadAt</code> or <code>WriteAt</code>.\nConsumes the slice, returning the underlying value.\nReturns the underlying reader or writer.\nCreate a new Cursor which starts reading at offset zero.\nCreate a new <code>SizeCursor</code> which starts reading at offset …\nCreate a new <code>Slice</code>.\nCreate a new <code>ByteIo</code> from some sort of reader or writer.\nCreate a new <code>Cursor</code> which starts reading at a specified …\nCreate a new <code>SizeCursor</code> which starts reading at a …\nCreate a new <code>Slice</code> that goes to the end of <code>io</code>.\nGet the offset that this slice starts at within the …\nOpens a file for random access.\nGet the current read/write position.\nReads bytes from an offset in this source into a buffer, …\nReads the exact number of bytes required to fill <code>buf</code> from …\nReads a single-precision floating point number at an …\nReads a single-precision floating point number at an …\nReads a double-precision floating point number at an …\nReads a double-precision floating point number at an …\nReads a signed 16-bit integer at an offset.\nReads a signed 16-bit integer at an offset.\nReads a signed 32-bit integer at an offset.\nReads a signed 32-bit integer at an offset.\nReads a signed 64-bit integer at an offset.\nReads a signed 64-bit integer at an offset.\nReads a signed 8-bit integer at an offset.\nReads a signed 8-bit integer at an offset.\nReads a signed <code>nbytes</code>-bit integer at an offset.\nReads a signed <code>nbytes</code>-bit integer at an offset.\nReads an unsigned 16-bit integer at an offset.\nReads an unsigned 16-bit integer at an offset.\nReads an unsigned 32-bit integer at an offset.\nReads an unsigned 32-bit integer at an offset.\nReads an unsigned 64-bit integer at an offset.\nReads an unsigned 64-bit integer at an offset.\nReads an unsigned 8-bit integer at an offset.\nReads an unsigned 8-bit integer at an offset.\nReads an unsigned <code>nbytes</code>-bit integer at an offset.\nReads an unsigned <code>nbytes</code>-bit integer at an offset.\nSet the offset that this slice starts at within the …\nSet the current read/write position.\nGet the size of this object, in bytes.\nTries to unwrap the inner <code>File</code>.\nCreates a <code>RandomAccessFile</code> wrapper around a <code>File</code>.\nWrites a complete buffer at an offset.\nWrites bytes from a buffer to an offset, returning the …\nWrites a single-precision floating point number to an …\nWrites a single-precision floating point number to an …\nWrites a double-precision floating point number to an …\nWrites a double-precision floating point number to an …\nWrites a signed 16-bit integer to an offset.\nWrites a signed 16-bit integer to an offset.\nWrites a signed 32-bit integer to an offset.\nWrites a signed 32-bit integer to an offset.\nWrites a signed 64-bit integer to an offset.\nWrites a signed 64-bit integer to an offset.\nWrites a signed 8-bit integer to an offset.\nWrites a signed 8-bit integer to an offset.\nWrites a signed <code>nbytes</code>-bit integer to an offset.\nWrites a signed <code>nbytes</code>-bit integer to an offset.\nWrites an unsigned 16-bit integer to an offset.\nWrites an unsigned 16-bit integer to an offset.\nWrites an unsigned 32-bit integer to an offset.\nWrites an unsigned 32-bit integer to an offset.\nWrites an unsigned 64-bit integer to an offset.\nWrites an unsigned 64-bit integer to an offset.\nWrites an unsigned 8-bit integer to an offset.\nWrites an unsigned 8-bit integer to an offset.\nWrites an unsigned <code>nbytes</code>-bit integer to an offset.\nWrites an unsigned <code>nbytes</code>-bit integer to an offset.")