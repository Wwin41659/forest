searchState.loadedDescShard("storage_proofs_porep", 0, "The expansion degree used for Stacked Graphs.\nStored along side the sector on disk.\nStacked DRG based Proof of Replication.\nTau for a single parition.\nIf the porep challenge randomness <code>self.seed</code> is set, this …\nPorep challenge count per partition.\nDiscards all persisted merkle and layer data that is not …\nEnsure that any persisted vanilla proofs generated from …\nBuild the column for the given node.\nBuild the column for the given node.\nCompute a single label.\nReturns the porep challenges for partition <code>k</code>.\nReturns the synthetic challenge indexes of the porep …\nReturns the entire synthetic challenge set.\nAssign <code>self.expansion_degree</code> parents to <code>node</code> using an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the synthetic challenge indexes that select the …\nReturns all porep challenges selected from the synthetic …\nReturns the porep challenges for partition <code>k</code> selected from …\nReturns the <code>i</code>-th synthetic challenge.\nGenerates the layers, as needed for decoding.\nGenerate the replica id as expected for Stacked DRG.\nCalculate the column hashes <code>C_i = H(E_i, O_i)</code> for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a column proof for this column.\nPartition index\nIndexed by layer in 1..layers.\nThe encoded nodes for 1..layers.\nThe encoded nodes for 1..layers.\nReturns label for the last layer.\nReturns the labels on the last layer.\nReturns a reference to the parent cache.\nPhase1 of replication.\nPhase2 of replication.\nPoRep challenge generation randomness. <code>Some</code> indicates that …\nUpdate all configs to the new passed in root cache path.\nVerify the full proof.\nChecks if the given layer is already written and of the …\nPrepares the necessary <code>StoreConfig</code>s with which the layers …\nReads a layer from disk, into the provided slice.\nStores a layer atomically on disk, by writing first to <code>.tmp</code>…")