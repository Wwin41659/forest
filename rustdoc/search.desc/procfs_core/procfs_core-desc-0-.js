searchState.loadedDescShard("procfs_core", 0, "This crate provides to an interface into the linux <code>procfs</code> …\nContainer group controller information.\nContainer group controller information.\nPossible values for a kernel config option\nRepresents the data from <code>/proc/cpuinfo</code>.\nCPU pressure information\nThe amount of time, measured in ticks, the CPU has been in …\nDisk IO stat information\nA list of disk stats.\nContains the error value\nA convenience stuct implementing SystemInfoInterface with …\nA BSD file lock created using <code>flock</code>\nTypes which can be parsed from a BufRead implementation.\nTypes which can be parsed from a BufRead implementation …\nTypes which can be parsed from a Read implementation.\nTypes which can be parsed from a Read implementation and …\nThis might mean that a procfs file has incomplete contents.\nAn internal error in the procfs crate\nThis error indicates that some unexpected error occurred.  …\nAny other IO error (rare).\nIO pressure information\nA list of the arguments passed to the Linux kernel at boot …\nThe kernel configuration.\nDetails about a loaded kernel module\nA set of loaded kernel modules\nKernel/system statistics, from <code>/proc/stat</code>\nLoad average figures.\nDetails about an individual file lock\nThe kind of a lock (read or write)\nThe mode of a lock (advisory or mandatory)\nThe type of a file lock\nDetails about file locks\nThis  struct  reports  statistics about memory usage on …\nMemory pressure information\nA mountpoint entry under <code>/proc/mounts</code>\nThis might mean that the process no longer exists, or that …\nAn Open File Description (ODF) lock created with <code>fnctl</code>\nContains the success value\nSome other unknown lock type\nSome other unknown lock mode\nSome other unknown lock kind\nAny other non-IO error (very rare).\nA partition entry under <code>/proc/partitions</code>\nA standard permission denied error.\nA POSIX byte-range lock created with <code>fcntl</code>\nPressure stall information for either CPU, memory, or IO.\nThe various error conditions in the procfs crate.\nExtensions for dealing with ProcErrors.\nThe main error type for the procfs crate.\nInformation about a process cgroup\nInformation about process cgroups.\nA read lock (or BSD shared lock)\nA set of shared memory segments parsed from …\nA shared memory segment parsed from <code>/proc/sysvipc/shm</code> …\nAuxiliary system information.\nAuxiliary system information interface.\nThe uptime of the system, based on the <code>/proc/uptime</code> file.\nVarious virtual memory statistics\nValues which can provide an output given the SystemInfo.\nA write lock (or a BSD exclusive lock)\nMemory that has been used more recently and usually not …\n[To be documented.]\n[To be documented.]\nThe address space in the process that the mapping occupies.\nNon-file backed huge pages mapped into user-space page …\nNon-file backed pages mapped into user-space page tables.\nTime of last <code>shmat</code> (attach), epoch\n10 second window\n300 second window\n60 second window\nNumber of 1024 byte blocks\nMemory used for block device “bounce buffers”.\nBoot time, in number of seconds since the Epoch\nRelatively temporary storage for raw disk blocks that …\nIn-memory cache for files read from the disk (the page …\nCreator GID\nFree CMA (Contiguous Memory Allocator) pages.\nTotal CMA (Contiguous Memory Allocator) pages.\nThis is the total amount of memory currently available to …\nThe  amount of memory presently allocated on the system.\nFor cgroups version 1 hierarchies, this field contains a …\nCreator PID\nThe amount of time that specific CPUs spent in various …\nTime of last permission change, epoch\nThe number of context switches that the system underwent\nCreator UID\nThe number of currently runnable kernel scheduling  …\nThe major ID of the device containing the FS that contains …\nThe minor ID of the device containing the FS that contains …\n(x86 with CONFIG_X86_64 and CONFIG_X86_DIRECT_GBPAGES …\nNumber of bytes of RAM linearly mapped by kernel in 2MB …\nNumber of bytes of RAM linearly mapped by kernel in 4MB …\nNumber of bytes of RAM linearly mapped by kernel in 4kB …\nMemory which is waiting to get written back to the disk.\nDiscards completed successfully\nDiscards merged\nTime of last <code>shmdt</code> (detach), epoch\nThis field contains the value <code>true</code> if this controller is …\nAdd path information to the error.\nThis stores fields that are common among all CPUs\nThe fifteen-minute load average\nUndocumented field\nUndocumented field\nThe five-minute load average\nFlush requests completed successfully\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis should correspond to the data in <code>/proc/modules</code>.\nRead the type from a file.\nParse the type from a file.\nRead the type from a Read.\nParse the type from a Read and system info.\nThis should correspond to the data in <code>/proc/cmdline</code>.\nMountpoint\nDump\nMount options\nCheck\nDevice\nFS type\nThis record indicates this share of time in which all …\nThis record indicates this share of time in which all …\nGet the content of a specific field associated to a CPU\nGet info for a specific cpu.\nGet the PFN range for the mapping\nGroup ID\nTicks spent running a virtual CPU for guest operating …\nTime spent running a virtual CPU for guest operating …\nMilliseconds spent running a virtual CPU for guest …\nTicks spent running a niced guest\nTime spent running a niced guest\nMilliseconds spent running a niced guest\n[To be documented.]\nThe  unique  ID  of  the  cgroup hierarchy on which this …\nFor cgroups version 1 hierarchies, this field contains a  …\nAmount of free highmem.\nTotal amount of highmem.\nThe number of huge pages in the pool that are not yet …\nThis is the number of huge pages for which a commitment to …\nThis is the number of huge pages in the pool above the …\nThe size of the pool of huge pages.\nThe size of huge pages.\nneeds documentation\nThe sum of how much time each core has spent idle.\nTicks spent in the idle state\nThe sum of how much time each core has spent idle.\nTime spent in the idle state\nMilliseconds spent in the idle state\nI/Os currently in progress\nMemory which has been less recently used.  It is more …\n[To be documented.]\n[To be documented.]\nThe inode of the locked file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTicks waiting for I/O to complete\nTime spent waiting for I/O to complete\nMilliseconds spent waiting for I/O to complete\nTicks servicing interrupts\nTime spent servicing interrupts\nMilliseconds spent servicing interrupts\nWhether the system is little endian (true) or big endian …\nKernel allocations that the kernel will attempt to reclaim …\nAmount of memory allocated to kernel stacks.\nSegment key\nFunctions related to the in-kernel key management and …\nThe kind of lock (read or write)\nThe fifth field is the PID of the process that was most …\nThe type of lock\nAmount of free lowmem.\nTotal amount of lowmem.\nLast operator PID\nThe device major number\nDevice major number\nFiles which have been mapped into memory (with mmap(2)), …\nThe number of kernel scheduling entities that currently …\nAn estimate of how much memory is available for starting …\nThe sum of LowFree + HighFree.\nTotal usable RAM (i.e., physical RAM minus a few reserved …\nReads merged\nThe device minor number\nDevice minor number\n[To be documented.]\n[To be documented.]\nThe lock mode (advisory or mandatory)\nThe name of the controller.\nDevice name\nDevice name\nThe name of the module\nNumber of attached processes\nInformation about the networking layer.\nNFS pages sent to the server, but not yet committed to …\nTicks spent in user mode with low priority (nice)\nTime spent in user mode with low priority (nice)\nMilliseconds spent in user mode with low priority (nice)\nThe number of control groups in this hierarchy using this …\nGet the total number of cpu cores.\nThe offset (in bytes) of the first byte of the lock.\nThe offset (in bytes) of the last byte of the lock.\nThe one-minute load average\nAmount of memory dedicated to the lowest level of page …\nThis field contains the pathname of the control group in …\nMemory allocated to the per-cpu alloctor used to back …\nAccess permissions, as octal\nMay not be available on some older 2.6 kernels\nThe process that owns the lock\nExtension traits useful for importing wholesale.\nFunctions and structs related to process information\nNumber of forks since boot\nNumber of processes blocked waiting for I/O\nNumber of processes in runnable state\n[To be documented.]\nReads completed successfully\nThe number of references in the kernel to this module.  …\nCurrent part of the shared memory resident in memory\nPart of Slab, that cannot be reclaimed on memory pressure.\nPart of Slab, that cannot be reclaimed on memory pressure.\nAmount of memory allocated for seconary page tables. This …\nSectors discarded\nSectors read successfully\nSectors written successfully\nAmount of memory consumed in tmpfs(5) filesystems.\nMemory used by shared memory (shmem) and tmpfs(5) …\nShared memory mapped into user space with huge pages.\nSegment ID, unique\nSize in bytes\nThe size of the module\nIn-kernel data structures cache.\nTicks servicing softirqs\nTime spent servicing softirqs\nMilliseconds spent servicing softirqs\nThis record indicates the share of time in which at least …\nThis record indicates the share of time in which at least …\nThe module state\nTicks of stolen time.\nAmount of stolen time\nMilliseconds of stolen time\nCurrent part of the shared memory in SWAP\nMemory  that  once  was  swapped  out, is swapped back in …\nAmount of swap space that is currently unused.\nTotal amount of swap space available.\nSysctl is a means of configuring certain aspects of the …\nTicks spent in system mode\nTime spent in system mode\nMilliseconds spent in system mode\nTime spent discarding\nTime spent flushing\nTime spent doing I/Os (ms)\nTime spent reading (ms)\nTime spent writing (ms)\nTotal stall time (in microseconds).\nThe amount of time the system spent in various states\nUser ID\n[To be documented.]\nThe uptime of the system (including time spent in suspend).\nThe uptime of the system (including time spent in suspend).\nA list of modules that depend on this module.\nTicks spent in user mode\nTime spent in user mode\nMilliseconds spent in user mode\nLargest contiguous block of vmalloc area which is free.\nTotal size of vmalloc memory area.\nAmount of vmalloc area which is used.\nWeighted time spent doing I/Os (ms)\nGet the output derived from the given SystemInfo.\nMemory which is actively being written back to the disk.\nMemory used by FUSE for temporary writeback buffers.\nwrites completed\nwrites merged\nMemory consumed by the zswap backend (compressed size).\nAmount of anonymous memory stored in zswap (original size).\nThis key type is similar to the “user” key type, but …\nThe key is dead\nThe key has been instantiated\nThe key has been invalidated\nA key\nVarious key flags\nInformation about a user with at least one key\nInformation about a set of users with at least one key.\nKeyrings are special keys which store a set of links to …\nA set of keys.\nLinks may be created from keyrings to the key.\nThis  key  type  is  essentially  the same as “user”, …\nThe key is negatively instantiated\nOther specialized, but rare keys types\nBitflags that represent the permissions for a key\nThe key contributes to the user’s quota\nFor a key: the payload of the key may be read.  For a …\nTHe key has been revoked\nThe key may be found by a search.\nThe ownership details and security label of the key may be …\nThe key is under construction via a callback to user space\nThis is a general-purpose key type.\nThe attributes of the key may be read\nThe payload of the key may be updated and the key may be …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe key description\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nA set of flags describing the state of the key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe group ID of the key.\nThe ID (serial number) of the key\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe type of key\nThe upper limit on the number of bytes in key payloads for …\nThe maximum number of keys that the user may own\nTHe number of keys that have been instantiated\nThe total number of keys owned by the user\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nKey permissions\nThe number of bytes consumed in playloads of the keys …\nThe number of keys owned by the user\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nKey timeout\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe user ID of the key owner\nThe user that owns the key\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCount of the number of kernel credential structures that …\nThe kernel-internal usage count for the kernel structure …\nAPPLEtalk\nArcnet\nAn entry in the ARP table\nFlags for ARP entries\nHardware type for an ARP table entry.\nATM\nAX.25 Level 2\nARP table entries.\nChaosnet\nCompleted entry\nA constant rto\nFrame Relay DLCI\nGeneral statistics for a network interface/device\nExperimental ethernet\nEthernet\nEUI-64\nActing as a gateway\nIEEE 802.2 Ethernet/TR/TB\nInfiniBand\nDevice status information for all network interfaces.\nThe indication of whether this entity is acting as an IP …\nMetricom STRIP\nWant to use a netmask (only for proxy entries)\nNET/ROM pseudo\nNot acting as a gateway\nNone of the following\nPermanent entry\nPROnet token ring\nPublish entry\nA set of ipv4 routes.\nAn entry in the ipv4 route table\nMIL-STD-1778, Appendix B\nThis struct holds the data needed for the IP, ICMP, TCP, …\nThis struct holds the data needed for the IP, ICMP, TCP, …\nTCP socket entries.\nAn entry in the TCP socket table\nThe algorithm used to determine the timeout value used for …\nHas requested trailers\nUDP socket entries.\nAn entry in the UDP socket table\nUnix socket entries.\nAn entry in the Unix socket table\nVan Jacobson’s algorithm\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe destination network or destination host\nDevice name\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nInternal kernel flags\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nMAC Address\nHardware type\nThe number of ICMP Address Mask Reply messages received.\nThe number of ICMP Address Mask Request messages received.\nThis counter indicates the checksum of the ICMP packet is …\nThis counter indicates the checksum of the ICMP packet is …\nThe number of ICMP Destination Unreachable messages …\nThe number of ICMP Destination Unreachable messages …\nThe number of ICMP Echo Reply messages received.\nThe number of ICMP Echo Reply messages received.\nThe number of ICMP Echo (request) messages received.\nThe number of ICMP Echo (request) messages received.\nThe number of ICMP messages which the entity received but …\nThe number of ICMP messages which the entity received but …\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe total number of ICMP messages which the entity …\nThe total number of ICMP messages which the entity …\n[To be documented.]\n[To be documented.]\nThe number of ICMP Parameter Problem messages received.\nThe number of ICMP Parameter Problem messages received.\n[To be documented.]\nThe number of ICMP Redirect messages received.\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe number of ICMP Source Quench messages received.\nThe number of ICMP Time Exceeded messages received.\nThe number of ICMP Time Exceeded messages received.\nThe number of ICMP Timestamp Reply messages received.\nThe number of ICMP Timestamp (request) messages received.\nThe number of ICMP Address Mask Reply messages sent.\nThe number of ICMP Address Mask Request messages sent.\nThe number of ICMP Destination Unreachable messages sent.\nThe number of ICMP Destination Unreachable messages sent.\nThe number of ICMP Echo Reply messages sent.\nThe number of ICMP Echo Reply messages sent.\nThe number of ICMP Echo (request) messages sent.\nThe number of ICMP Echo (request) messages sent.\nThe number of ICMP messages which this entity did not send …\nThe number of ICMP messages which this entity did not send …\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe total number of ICMP messages which this entity …\nThe total number of ICMP messages which this entity …\n[To be documented.]\n[To be documented.]\nThe number of ICMP Parameter Problem messages sent.\nThe number of ICMP Parameter Problem messages sent.\n[To be documented.]\nThe number of ICMP Redirect messages sent.  For a host, …\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe number of ICMP Source Quench messages sent.\nThe number of ICMP Time Exceeded messages sent.\nThe number of ICMP Time Exceeded messages sent.\nThe number of ICMP Timestamp Reply messages sent.\nThe number of ICMP Timestamp (request) messages sent.\nInterface to which packets for this route will be sent\nCount of lookups for the route\nThe inode number of the socket\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIPv4 address\nThe default value inserted into the Time-To-Live field of …\nThe number of input datagrams for which this entity was …\nThe number of IP datagram fragments that have been …\nThe number of IP datagram fragments that have been …\nThe number of IP datagrams that have been discarded …\nThe number of IP datagrams that have been discarded …\nThe number of IP datagrams that have been successfully …\nThe number of IP datagrams that have been successfully …\nThe number of input datagrams discarded because the IP …\nThe number of input datagrams discarded because the IP …\n[To be documented.]\n[To be documented.]\nThe total number of input datagrams successfully delivered …\nThe total number of input datagrams successfully delivered …\nThe number of input IP datagrams for which no problems …\nThe number of input IP datagrams for which no problems …\n[To be documented.]\n[To be documented.]\nThe number of input datagrams discarded due to errors in …\nThe number of input datagrams discarded due to errors in …\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe total number of input datagrams received from …\nThe total number of input datagrams received from …\n[To be documented.]\n[To be documented.]\nThe number of locally-addressed datagrams received …\nThe number of locally-addressed datagrams received …\n[To be documented.]\nThe number of output IP datagrams for which no problem was …\nThe number of output IP datagrams for which no problem was …\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe number of IP datagrams discarded because no route …\nThe number of IP datagrams discarded because no route …\n[To be documented.]\nThe total number of IP datagrams which local IP …\nThe total number of IP datagrams which local IP …\nThe number of failures detected by the IP re-assembly …\nThe number of failures detected by the IP re-assembly …\nThe number of IP datagrams successfully re-assembled.\nThe number of IP datagrams successfully re-assembled.\nThe number of IP fragments received which needed to be …\nThe number of IP fragments received which needed to be …\nThe maximum number of seconds which received fragments are …\nThe maximum number of seconds which received fragments are …\nInitial RTT (Round Trip Time)\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe ‘distance’ to the target (usually counted in hops)\nDefault maximum transmission unit for TCP connections over …\nName of the interface\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bound pathname (if any) of the socket.\nTotal bytes received\nNumber of compressed packets received\nPackets dropped\nBad packets received\nFifo overrun\nFrame alignment errors\nNumber of multicast packets received\nTotal packets received\nThe number of users of the socket\nNumber of references to this route\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nTotal bytes transmitted\nNumber of packets not sent due to carrier errors\nNumber of collisions\nNumber of compressed packets transmitted\nNumber of packets dropped during transmission\nNumber of transmission errors\nTotal packets transmitted\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe socket type.\nThe state of the socket\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe number of times TCP connections have made a direct …\nThe number of times TCP connections have made a direct …\nThe number of TCP connections for which the current state …\nThe number of times TCP connections have made a direct …\n[To be documented.]\nThe total number of segments received in error (e.g., bad …\nThe total number of segments received, including those …\nThe limit on the total number of TCP connections the …\nThe number of TCP segments sent containing the RST flag.\nThe total number of segments sent, including those on …\nThe number of times TCP connections have made a direct …\nThe total number of segments retransmitted - that is, the …\nThe maximum value permitted by a TCP implementation for the\nThe minimum value permitted by a TCP implementation for the\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe total number of UDP datagrams delivered to UDP users.\nThe total number of UDP datagrams delivered to UDP users.\nThe number of received UDP datagrams that could not be …\nThe number of received UDP datagrams that could not be …\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe total number of received UDP datagrams for which there …\nThe total number of received UDP datagrams for which there …\nThe total number of UDP datagrams sent from this entity.\nThe total number of UDP datagrams sent from this entity.\n[To be documented.]\n[To be documented.]\n[To be documented.]\n[To be documented.]\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDefault window size for TCP connections over this route\nArea is accountable\nArchitecture specific flag\nA file descriptor that have no corresponding inode.\nAn anonymous mapping as obtained via mmap(2).\nClearing the PG_Referenced and ACCESSED/YOUNG bits …\nSee the coredump_filter() method.\nDo not copy area on fork\nDo not include area into core dump\nDo not expand area on remapping\nDisable write to the mapped file\nDead (X)\nExecutable\nExecute permission\nDescribes a file descriptor opened by a process.\nPage is file-page or shared-anon\nPage is file-page or shared-anon\nStack segment grows down\nHuge page advise flag\nArea uses huge TLB pages\nThe process’s heap.\nMemory mapped I/O area\nIdle (I)\nThis struct contains I/O statistics for the process, built …\nPages are locked in memory\nProcess limits\nMay execute\nMergeable advise flag\nMixed map area\nPage is exclusively mapped\nPage is exclusively mapped\nThe permissions a process has on memory map entries.\nRepresents the information about a specific mapping as …\nMay read\nMay share\nMay write\nTHis mount is a slave to the specified shared peer group.\nA memfd file descriptor with a name.\nRepresents an entry in a <code>/proc/&lt;pid&gt;/maps</code> or …\nRepresents all entries in a <code>/proc/&lt;pid&gt;/maps</code> or …\nEntry referring to a memory page\nRepresents the fields and flags in a page table entry for …\nInformation about a specific mount in a process’s mount …\nInformation about a all mounts in a process’s mount …\nOnly NFS mounts provide additional statistics in <code>MountStat</code> …\nOptional fields used in MountInfo\nA single entry in MountStats.\nMount information from <code>/proc/&lt;pid&gt;/mountstats</code>.\nRepresents NFS data from <code>/proc/&lt;pid&gt;/mountstats</code> under the …\nRepresents NFS data from <code>/proc/&lt;pid&gt;/mountstats</code> under the …\nRepresents NFS data from <code>/proc/&lt;pid&gt;/mountstats</code> under the …\nNo-huge page advise flag\nNon-linear mapping (removed in Linux 4.0)\nNo permissions\nNo flags\nSwap space is not reserved for the area\nInformation about a namespace\nAll namespaces of a process.\nSome other pseudo-path\nSome other file descriptor type, with an inode.\nPure PFN range\nDumped core\nGetting shut down\nPI exit done on shut down\nForked but didn’t exec\nFreezer should not count it as freezable\nFrozen for system suspend\nI am an IDLE thread\nI am kswapd\nI am a kernel thread\nThrottle me less: I clean memory\nEarly kill for mce process policy\nProcess policy on mce errors;\nAllocating memory\nAll allocation request will have _GFP_MOVABLE cleared\nAll allocation requests will inherit GFP_NOFS\nAll allocation requests will inherit GFP_NOIO\nStalled due to lack of memory\nThread belongs to the rt mutex tester\nThis thread should not be frozen\nUserland is not allowed to meddle with cpus_allowed\nset_user() noticed that RLIMIT_NPROC was exceeded\nRandomize virtual address space\nKilled by a signal\nUsed super-user privileges\nThis thread called freeze_processes() and should not be …\nAllowed to write to swap\nI’m an Usermodehelper process\nUsed async_schedule*(), used by module init\nIf unset the fpu must be initialized before use\nI’m a virtual CPU\nI’m a workqueue worker\n(since Linux 2.6.22)\n(since Linux 2.6.32)\n(since Linux 2.6.32)\nPage is present\nPage is present\nMemory is private (and copy-on-write)\nRepresents a page table entry in <code>/proc/&lt;pid&gt;/pagemap</code>.\nParked (P) (Linux 3.9 to 3.13 only)\nThe file that is backing the mapping.\nA file or device\n(since Linux 4.0)\nA Page Frame Number, representing a 4 kiB physical memory …\nRepresents the state of a process.\nThis mount is a slave and receives propagation from the …\nReadable\nRead permission\nRandom read provided\nrollup memory mappings, from <code>/proc/&lt;pid&gt;/smaps_rollup</code>\nRunning (R)\nSoft-dirty flag (since Linux 3.13)\nPerform synchronous page faults (since Linux 4.15)\nShared\nMemory is shared with another process.\nPTE is soft-dirty\nPTE is soft-dirty\nSequential read advise provided\nProvides scheduler statistics of the process, based on the …\nThis mount point is shared in peer group.  Each peer group …\nSleeping in an interruptible wait (S)\nA socket type, with an inode\n(since Linux 3.11)\nThe initial process’s (also known as the main thread’…\nStatus information about the process, based on the …\nKernel flags for a process\nProvides information about memory usage, measured in pages.\nStatus information about the process, based on the …\nStopped (on a signal) (T)\nEntry referring to a swapped page\nRepresents the fields and flags in a page table entry for …\nA thread’s stack (where the <code>&lt;tid&gt;</code> is a thread ID).  It …\nTracing stop (t) (Linux 2.6.33 onward)\nUserfaultfd missing pages tracking (since Linux 4.3)\nUserfaultfd wprotect pages tracking (since Linux 4.3)\nThis is an unbindable mount\nThe virtual dynamically linked shared object.\nRepresents the kernel flags associated with the virtual …\nShared memory segment. The i32 value corresponds to Shm.key…\nobsolete virtual syscalls, succeeded by vdso\nShared kernel variables\nWipe on fork (since Linux 4.14)\nWritable\nWrite permission\nWaiting in uninterruptible disk sleep (D)\nWakekill (K) (Linux 2.6.33 to 3.13 only)\nWaking (W) (Linux 2.6.33 to 3.13 only)\nZombie (Z)\nThe address space in the process that the mapping occupies.\nDuration the NFS mount has been in existence.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAddress below program command-line arguments (argv) are …\nAddress above which program command-line arguments (argv) …\nReturns this permission map as a 4-character string, …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitmap of blocked signals, displayed as a decimal …\nCount of bytes received as <code>bytes_sent</code>.\nCount of bytes send. Does not only include the RPC payload …\nCancelled write bytes.\nAmbient capability set (since Linux 4.3, see …\nCapability Bounding set (since Linux 2.6.26, see …\nMasks of capabilities enabled in effective sets (see …\nMasks of capabilities enabled in inheritable sets (see …\nMasks of capabilities enabled in permitted sets (see …\nNFS Capabilities.\nGuest time of the process’s children, measured in clock …\nThe number of major faults that the process’s waited-for …\nThe number of minor faults that the process’s waited-for …\nCumulative nswap for child processes <strong>(not maintained)</strong>.\nThe filename of the executable, without the parentheses.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nContains true if the process is currently dumping core.\nMask of CPUs on which this process may run (since Linux …\nSame as previous, but in “list format” (since Linux …\nAmount of time that this process’s waited-for  children  …\nHow long all requests have spend in the queue before being …\nHow long it took to get a response back.\nHow long all requests have taken from beeing queued to the …\nAmount  of  time  that  this  process’s  waited-for  …\ndata + stack\nAggregated block I/O delays, measured in clock ticks …\nThe device (major, minor)\nThe name of the mounted device\nDevice id of the namespace\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\ndirty pages (unused since Linux 2.6; always 0)\nEffective GID.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nAddress below which program initialized and uninitialized …\nThe address below which program text can run.\nAddress below which program environment is placed.\nAddress above which program environment is placed.\nEffective UID.\nThe thread’s exit status in the form reported by …\nSignal to be sent to parent when we die.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nMemory mapping extension information, populated when …\nNumber of file descriptor slots currently allocated.\nFilesystem GID.\nThe kernel flags word of the process, as a bitfield\nThe kernel flags  word of the process.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThis should correspond to data in <code>/proc/&lt;pid&gt;/mountstats</code>.\nThe data should be formatted according to procfs …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe filesystem type\nFilesystem type\nFilesystem UID.\nReturns the page frame number recorded in this entry.\nReturns the swap offset recorded in this entry.\nReturns the swap type recorded in this entry.\nSupplementary group list.\nGuest time of the process (time spent running a virtual …\nSize of hugetlb memory portions by kB.  (since Linux 4.4).\nNamespace identifier (inode number)\nThe inode on that device\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturn whether the extension information is empty.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nReturn an iterator over MemoryMap.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe time in jiffies before the next SIGALRM is sent to the …\nThe current EIP (instruction pointer).\nThe current value of ESP (stack pointer), as found in the …\nlibrary (unused since Linux 2.6; always 0)\nThe number of major faults the process has made which have …\nThe value of <code>st_dev</code> for files on this filesystem\nCount of rpc major timeouts\nKey-value pairs that may represent statistics about memory …\nMax address space\nMax core file size\nMax Cpu Time\nMax data size\nMax file locks\nMax file size\nMax locked memory\nMax msgqueue size\nMax nice priority\nMax open files\nMax pending signals\nMax processes\nMax realtime priority\nMax realtime timeout\nMax resident set\nMax stack size\nMask of memory nodes allowed to this process (since Linux …\nSame as previous, but in “list format” (since Linux …\nThe number of minor faults the process has made which have …\nMount ID.  A unique ID for the mount (but may be reused …\nPer-mount options\nThe pathname of the mount point relative to the process’…\nThe mountpoint within the filesystem tree\nMount source\nCommand run by this process.\nNUMA group ID (0 if none; since Linux 3.13).\nThe nice value (see <code>setpriority(2)</code>), a value in the range …\nValue of the no_new_privs bit (since Linux 4.10, see …\nNumber of involuntary context switches (since Linux …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNamespace type\nProcess group ID in each of the PID namespaces of which …\nThread ID in each of the PID namespaces of which (pid)[…\nNSsid: descendant namespace session ID hierarchy Session ID\nThread group ID (i.e., PID) in each of the PID namespaces …\nNumber of pages swapped <strong>(not maintained)</strong>.\nNumber  of  threads in this process (since Linux 2.6).  …\nThe offset into the file/whatever\nCount of rpc operations.\nOptional fields\nThe mount options.\nHandle to the namespace\n# of timeslices run on this cpu.\nThe process group ID of the process.\nThe process ID.\nParent mount ID.  The ID of the parent mount (or of self …\nThread ID (see gettid(2)).\nScheduling policy (see sched_setscheduler(2)).\nThe PID of the parent of this process.\nPID of parent process.\nFor processes running a real-time scheduling policy …\nCPU number last executed on.\nCharacters read\nbytes read\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nResident set size, measured in pages\nReal GID.\nThe pathname of the directory in the filesystem which …\nResident Set Size: number of pages the process has in real …\nGets the Resident Set Size (in bytes)\nSize of resident anonymous memory by kibibytes.  (since …\nSize of resident file mappings by kibibytes.  (since Linux …\nCurrent soft limit in bytes on the rss of the process; see …\nSize of resident shared memory by kibibytes (includes …\nReal-time scheduling priority\nReal UID.\nTime spent waiting on a runqueue.\nSeccomp mode of the process (since Linux 3.8, see …\nAttempts to parse the caps= value from the caps field.\nThe session ID of the process.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSaved set GID.\nnumber of resident shared pages (i.e., backed by a file)\nNumber of signals pending for process as a whole (see …\nMasks indicating signals being blocked (see signal(7)).\nThe bitmap of caught signals, displayed as a decimal …\nMasks indicating signals being caught (see signal(7)).\nMasks indicating signals being ignored (see signal(7)).\nThe  bitmap of ignored signals, displayed as a decimal …\nThe  bitmap of pending signals, displayed as a decimal …\nNumber of signals pending for thread (see pthreads(7) and …\nThis field contains two slash-separated numbers that …\nTotal program size, measured in pages\nSpeculative store bypass mitigation status.\nAddress above which program heap can be expanded with …\nAddress above which program initialized and uninitialized …\nThe address above which program text can run.\nThe address of the start (i.e., bottom) of the stack.\nThe time the process started after system boot.\nProcess State.\nCurrent state of the process.\nIf the mount is NFS, this will contain various NFS …\nAmount of time that this process has been scheduled in …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSaved set UID.\nTime spent on the cpu.\nPer-superblock options.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nread syscalls\nwrite syscalls\nText (code)\nThread group ID (i.e., Process ID).\nContains true if the process is allowed to use THP\nNumber of threads in process containing this thread.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe ID of the foreground process group of the controlling …\nPID of process tracing this process (0 if not being …\nCount of rpc transmissions\nThe controlling terminal of the process.\nProcess umask, expressed in octal with a leading zero; see …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAmount of time that this process has been scheduled in …\nThe version of the NFS statistics block.  Either “1.0” …\nKernel flags associated with the virtual memory area\nSize of data by kibibytes.\nSize of text seg‐ments by kibibytes.\nPeak resident set size by kibibytes (“high water mark”…\nLocked memory size by kibibytes (see mlock(3)).\nShared library code size by kibibytes.\nPeak virtual memory size by kibibytes.\nPinned memory size by kibibytes (since Linux 3.2).  These …\nPage table entries size by kibibytes (since Linux 2.6.10).\nResident set size by kibibytes.  Note that the value here …\nVirtual memory size by kibibytes.\nSize of stack by kibibytes.\nSwapped-out virtual memory size by anonymous private pages …\nNumber of voluntary context switches (since Linux 2.6.23).\nVirtual memory size in bytes.\nThis  is  the  “channel”  in which the process is …\ncharacters written\nbytes written\nGlobal kernel info / tuning miscellaneous stuff\nAllow nicing of all real-time tasks\nAllow reboot/poweroff\nFlags representing allowed sysrq functions\nBitmask of allowed sysrq functions\nRepresents a kernel build information\nDisable sysrq completely\nEnable control of keyboard (SAK, unraw)\nEnable control of console log level\nEnable debugging dumps of processes etc\nEnable remound read-only\nEnable signaling of processes (term, kill, oom-kill)\nEnable sync command\nEnable all functions of sysrq\nRepresents the data from <code>/proc/sys/kernel/sem</code>\nValues controlling functions allowed to be invoked by the …\nThe maximum value that can be written to …\nThe minimum value that can be written to …\nRepresents a kernel type\nRepresents a kernel version, in major.minor.release …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThis field contains any extra data from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nParses a kernel version string, in major.minor.release …\nParses a kernel version string, in major.minor.release …\nParse a kernel type string\nParse a kernel build information string\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCheck if PREEMPT is ON\nCheck if PREEMPTRT is ON\nThe intersection of a source flags value with the …\nA system-wide limit on the maximum number of semaphore …\nA system-wide limit on the number of semaphores in all …\nThe maximum semaphores per semaphore set\nThe maximum number of operations that may be specified in …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCheck if SMP is ON\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturn version number")