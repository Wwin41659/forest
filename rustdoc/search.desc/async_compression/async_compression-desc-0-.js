searchState.loadedDescShard("async_compression", 0, "Adaptors between compression crates and Rust’s modern …\nBest quality of compression, usually produces the smallest …\nDefault quality of compression defined by the selected …\nFastest quality of compression, usually produces bigger …\nLevel of compression data should be compressed with.\nPrecise quality based on the underlying compression …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementations for IO traits exported by <code>tokio</code> v1.x.\nThis module contains zstd-specific types for …\nTypes which operate over <code>AsyncBufRead</code> streams, both …\nTypes which operate over <code>AsyncWrite</code> streams, both encoders …\nA zstd decoder, or decompressor\nA zstd encoder, or compressor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying reader that …\nAcquires a mutable reference to the underlying reader that …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying reader that this …\nAcquires a reference to the underlying reader that this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this decoder returning the underlying reader.\nConsumes this encoder returning the underlying reader.\nConfigure multi-member/frame decoding, if enabled this …\nCreates a new decoder which will read compressed data from …\nCreates a new encoder which will read uncompressed data …\nCreates a new decoder, using the specified compression …\nCreates a new encoder, using the specified compression …\nCreates a new decoder, using the specified parameters, …\nCreates a new encoder which will read uncompressed data …\nCreates a new encoder, using the specified compression …\nA zstd decoder, or decompressor\nA zstd encoder, or compressor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying reader that …\nAcquires a mutable reference to the underlying writer that …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying reader that this …\nAcquires a reference to the underlying writer that this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this decoder returning the underlying reader.\nConsumes this encoder returning the underlying writer.\nCreates a new decoder which will take in compressed data …\nCreates a new encoder which will take in uncompressed data …\nCreates a new decoder, using the specified compression …\nCreates a new encoder, using the specified compression …\nCreates a new decoder, using the specified parameters, …\nCreates a new encoder which will take in uncompressed data …\nCreates a new encoder, using the specified compression …\nA compression parameter for zstd. This is a stable wrapper …\nA decompression parameter for zstd. This is a stable …\nSize of the multi-probe table in 4-byte entries (as a …\nEmit a checksum (default: false).\nEmit the size of the content (default: true).\nEmit a dictionary ID when using a custom dictionary …\nEnable long-distance matching mode to look for and emit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSize of the initial probe table in 4-byte entries (as a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of bytes given to each worker.\nSize of each bucket in the LDM hash table for collision …\nSize of the long-distance matching table (as a power of …\nFrequency of using the LDM hash table (as a power of two)\nMinimum size of long-distance matches searched for\nMinimum size of matches searched for\nNumber of threads to spawn.\nNumber of search attempts (as a power of two)\nStrategy-dependent length modifier\nWindow size in bytes (as a power of two)\nMaximum window size in bytes (as a power of two)")