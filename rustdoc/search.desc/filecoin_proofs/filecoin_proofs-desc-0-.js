searchState.loadedDescShard("filecoin_proofs", 0, "Calculates comm-d of the data piped through to it. Data …\nComputes a NUL-byte prefix and/or suffix for <code>source</code> using …\nGiven a porep_config and a list of seal commit outputs, …\nComputes a sectors’s <code>comm_d</code> given its pieces.\nReverses the encoding process and outputs the data into …\nDecodes a range of data with the given sector key.\nEncodes data into an existing replica.  The original …\nReturns the argument unchanged.\nGenerates the challenges per SectorId required for either …\nGenerate all vanilla partition proofs across all …\nGenerates a piece commitment for the provided byte source. …\nGenerate a single vanilla partition proof for a specified …\nGenerates a single vanilla proof required for either …\nGenerates a Window proof-of-spacetime with provided …\nGenerate the merkle tree on top of the labels (TreeC).\nGenerate the merkle tree on top of the replica (TreeRLast).\nGenerates a Window proof-of-spacetime.\nGenerates a Window proof-of-spacetime with provided …\nGenerates a Winning proof-of-spacetime.\nGiven some randomness and the length of available sectors, …\nGenerates a Winning proof-of-spacetime with provided …\nGiven the specified arguments, this method returns the …\nUnseals the sector at <code>sealed_path</code> and returns the bytes …\nCalls <code>U::from(self)</code>.\nRemoves encoded data and outputs the sector key.\nUnseals the sector read from <code>sealed_sector</code> and returns the …\nUnseals the sector read from <code>sealed_sector</code> and returns the …\nGiven a porep_config, an aggregate proof, a list of seeds …\nVerifies a batch of outputs of some previously-run seal …\nVerify all vanilla partition proofs across all partitions.\nVerifies the output of some previously-run seal operation.\nVerify a single vanilla partition proof for a specified …\nVerifies a window proof-of-spacetime.\nVerifies a winning proof-of-spacetime.\nCalls a function with the type hint of the sector shape …\nWrites bytes from <code>source</code> to <code>target</code>, adding bit-padding (“…\nWe have a separate SRSCache type for srs keys since they …\nReturns the argument unchanged.\nReturns <code>None</code> for non existent entries, <code>Some(v)</code> for …\nCalls <code>U::from(self)</code>.\nInitializes the cache by pre-populating the internal map …\nChunks the given reader to the given size.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn a new iterator with a default chunk size of 4KiB.\nThe base degree used for all DRG graphs. One degree from …\nA binary merkle tree with Poseidon hashing, where all …\nA merkle tree with Poseidon hashing, where all levels have …\nA merkle tree with Poseidon hashing, where all levels have …\nThe hasher used for creating comm_d.\nThe default hasher for merkle trees currently in use.\nThe expansion degree used for Stacked Graphs.\nThe minimum size a single piece must have before padding.\nSector sizes for which parameters have been published.\nThe size of a single snark proof.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps the name of a file in the cache to its parameter id. …\nBuilds a map from a parameter_id (file in cache) to …\nNumber of challenges per sector.\nNumber of challenges per sector.\nNumber of challenged sectors.\nNumber of challenged sectors.\nSize of the sector in bytes.\nSize of the sector in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an enumeration of pieces in a staged sector and a …\nGiven a number of bytes already written to a staged sector …\nGiven a list of pieces, find the byte where a given piece …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a list of pieces, sum the number of bytes taken by …\nVerify that the provided <code>piece_infos</code> and <code>comm_d</code> match.\nCreate a padding <code>PieceInfo</code> of size <code>size</code>.\nArity for binary trees, used for comm_d.\nRepresentation of a merkle proof.\nTrait used to abstract over the way Merkle Trees are …\nArity for oct trees, used for comm_r_last.\nStored along side the sector on disk.\nThe minimal information required about a replica, in order …\nThe minimal information required about a replica, in order …\nContains sector-specific (e.g. merkle trees) assets\nBuild the column for the given node.\nPrint a unique name for this configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a merkle proof of the node at the given index.\nReturns the cache identifier as used by …\nReturns the cache identifier as used by …\nA unique identifier used to help specify the on-disk store …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndexed by layer in 1..layers.\nThe encoded nodes for 1..layers.\nReturns label for the last layer.\nGenerate the merkle tree of this particular replica.\nconstruct PoRepConfig by groth16\nA directory in which data (a merkle tree) can be persisted.\nHigh priority (always runs on GPU) == true\nReturns the root hash of the tree.\nThe number of merkle tree rows_to_discard then cache on …\nThe number of elements in the DiskStore.  This field is …\nUpdate all configs to the new passed in root cache path.")