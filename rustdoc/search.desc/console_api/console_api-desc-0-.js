searchState.loadedDescShard("console_api", 0, "tokio-console API\nState attributes of an entity. These are dependent on the …\nA message representing a key-value pair of data associated …\nUnique identifier for each task.\nA Rust source code location.\nUnique identifier for metadata.\nMetadata associated with a span or event.\nContains stats about objects that can be polled. Currently …\nAny new metadata that was registered since the last update.\nRepresents a period of time in which a program was …\nUnique identifier for spans.\nRepresents the operations performed by an async runtime.\nTimestamp for the span.\nThe total duration this object was being <em>actively polled</em>, …\nReturns the value of <code>column</code>, or the default value if <code>column</code>…\nThe character in <code>line</code>.\nNested message and enum types in <code>Field</code>.\nThe key-value pair for the attribute\nThe names of the key-value fields attached to the span or …\nUser-defined key-value pairs of arbitrary data that …\nReturns the value of <code>file</code>, or the default value if <code>file</code> is …\nThe file path\nThe timestamp of the first time this object was polled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique identifier’s concrete value.\nThe unique identifier’s concrete value.\nThe unique identifier’s concrete value.\nAn Id that uniquely identifies it in relation to other …\nRepresents interactions between the console-subscriber and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the enum value of <code>kind</code>, or the default if the …\nIndicates whether metadata is associated with a span or …\nThe timestamp of the most recent time this objects’s …\nThe timestamp of the most recent time this objects’s …\nReturns the enum value of <code>level</code>, or the default if the …\nDescribes the level of verbosity of a span or event.\nReturns the value of <code>line</code>, or the default value if <code>line</code> is …\nThe line number in the source code file.\nThe Rust source location associated with the span or event.\nNested message and enum types in <code>Metadata</code>.\nThe new metadata that was registered since the last update.\nMetadata for the task span that the field came from.\nIdentifier for metadata describing static characteristics …\nReturns the value of <code>module_path</code>, or the default value if …\nThe Rust module path\nThe path to the Rust module where the span occurred.\nThe key of the key-value pair.\nThe name of the span or event.\nThe total number of times this object has been polled.\nNested message and enum types in <code>RegisterMetadata</code>.\nRepresents updates to the resources in an async runtime.\nSets <code>kind</code> to the provided enum value.\nSets <code>level</code> to the provided enum value.\nDescribes the part of the system where the span or event …\nRepresents updates to the tasks in an async runtime.\nRepresents events on the tracing subsystem: thread …\nReturns the value of <code>unit</code>, or the default value if <code>unit</code> is …\nSome values carry a unit of measurement. For example, a …\nThe value of the key-value pair.\nAn async operation.\nAn <code>AsyncOp</code> state update.\nStatistics associated with a given async operation.\nState attributes of the async op.\nTimestamp of when the async op has been created.\nTimestamp of when the async op was dropped.\nA count of how many async op events (e.g. polls, creation, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe async op’s ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe numeric ID of the op’s <code>Metadata</code>.\nA list of new async operations that were created since the …\nThe ID of the parent async op.\nContains the operation poll stats.\nThe resources’s ID.\nThe source of this async operation. Most commonly this …\nAny async op stats that have changed since the last update.\nThe Id of the task that is awaiting on this op.\nA boolean value.\nA value serialized to a string using <code>fmt::Debug</code>.\nA signed integer value.\nThe key of the key-value pair.\nAn index position into the <code>Metadata.field_names</code> of the …\nThe string representation of the name.\nA string value.\nAn unsigned integer value.\nThe value of the key-value pair.\nEncodes the message to a buffer.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nDecodes an instance of the message from a buffer, and …\nInstrumentRequest requests the stream of updates to …\nPauseRequest requests the stream of updates to pause.\n<code>PauseResponse</code> is the value returned after a pause request.\nResumeRequest requests the stream of updates to resume …\n<code>ResumeResponse</code> is the value returned after a resume …\nTaskDetailsRequest requests the stream of updates about …\nUpdate carries all information regarding tasks, resources, …\nAsync operations state update\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifies the task for which details were requested.\nGenerated client implementations.\nGenerated server implementations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny new span metadata that was registered since the last …\nThe system time when this update was recorded.\nResource state update.\nTask state update.\n<code>InstrumentServer&lt;T&gt;</code> implements <code>Instrument</code> as a service.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nRegisters that the console observer wants to pause the …\nRegisters that the console observer wants to resume the …\nCompress requests with the given encoding.\nProduces a stream of updates describing the activity of a …\nProduces a stream of updates representing the behavior of …\nGenerated trait containing gRPC methods that should be …\n<code>InstrumentServer&lt;T&gt;</code> implements <code>Instrument</code> as a service.\nServer streaming response type for the WatchTaskDetails …\nServer streaming response type for the WatchUpdates method.\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nRegisters that the console observer wants to pause the …\nRegisters that the console observer wants to resume the …\nCompress responses with the given encoding, if the client …\nProduces a stream of updates describing the activity of a …\nProduces a stream of updates representing the behavior of …\nThe “debug” level.\nThe “error” level.\nIndicates metadata is associated with an event.\nThe “info” level. Designates useful information.\nIndicates whether metadata is associated with a span or …\nDescribes the level of verbosity of a span or event.\nIndicates metadata is associated with a span.\nThe “trace” level.\nThe “warn” level.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Kind</code>, or <code>None</code> if <code>value</code> is not a valid …\nConverts an <code>i32</code> to a <code>Level</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Kind</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Level</code>.\nOne metadata element registered since the last update.\nReturns the argument unchanged.\nUnique identifier for <code>metadata</code>.\nCalls <code>U::from(self)</code>.\nThe metadata payload.\nA <code>PollOp</code> describes each poll operation that completes …\nStatic data recorded when a new resource is created.\nA resource state update.\nTask runtime stats of a resource.\nIdentifies the async op ID that this poll op is part of.\nState attributes of the resource. These are dependent on …\nThe resources’s concrete rust type.\nTimestamp of when the resource was created.\nTimestamp of when the resource was dropped.\nA count of how many resource events (e.g. polls, creation, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe resources’s ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the resource an internal component of another resource?\nWhether this poll op has returned with ready or pending.\nThe kind of resource (e.g timer, mutex)\nThe location in code where the resource was created.\nThe numeric ID of the resources’s <code>Metadata</code>.\nThe numeric ID of the op’s <code>Metadata</code>.\nthe name of this op (e.g. poll_elapsed, new_timeout, …\nA list of all new poll ops that have been invoked on …\nA list of new resources that were created since the last …\nThe ID of the parent resource.\nNested message and enum types in <code>Resource</code>.\nThe resources’s ID.\nAny resource stats that have changed since the last update.\nIdentifies the task context that this poll op has been …\nThe kind of resource (e.g. timer, mutex).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Kind</code>.\nEvery resource is either a known kind or an other …\nEvery resource is either a known kind or an other …\n<code>Known</code> collects the kinds of resources that are known in …\n<code>known</code> signals that this kind of resource is known to the …\n<code>other</code> signals that this kind of resource is unknown to the …\n<code>TIMER</code> signals that this is a timer resource, e.g. waiting …\nString value of the enum field names used in the ProtoBuf …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Known</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Known</code>.\nDecodes an instance of the message from a buffer, and …\nTask performance statistics.\nData recorded when a new task is spawned.\nA task details update\nA task state update.\nTimestamp of when the task was spawned.\nTimestamp of when the task was dropped.\nA count of how many task events (e.g. polls, spawns, etc) …\nA list of <code>Field</code> objects attached to this task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number of outliers which have exceeded the histogram’…\nReturns the value of <code>highest_outlier</code>, or the default value …\nThe highest recorded outlier. This is only present if …\nThe task’s ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the enum value of <code>kind</code>, or the default if the …\nThe category of task this task belongs to.\nThe timestamp of the most recent time this task has been …\nThe location in code where the task was spawned.\nThe histogram’s maximum value.\nThe numeric ID of the task’s <code>Metadata</code>.\nA list of new tasks that were spawned since the last …\nThe timestamp for when the update to the task took place.\nAn ordered list of span IDs corresponding to the <code>tracing</code> …\nContains task poll statistics.\nA histogram of task poll durations.\nHdrHistogram.rs <code>Histogram</code> serialized to binary in the V2 …\nThe total duration this task was scheduled prior to being …\nA histogram of task scheduled durations.\nThe total number of times this task has woken itself.\nSets <code>kind</code> to the provided enum value.\nAny task stats that have changed since the last update.\nNested message and enum types in <code>Task</code>.\nNested message and enum types in <code>TaskDetails</code>.\nThe task’s ID which the details belong to.\nThe total number of times this task’s waker has been …\nThe total number of times this task’s waker has been …\nThe total number of times this task has been woken over …\nA task spawned via a runtime’s blocking task spawning …\nThe category of task this task belongs to.\nA task spawned using a runtime’s standard asynchronous …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Kind</code>, or <code>None</code> if <code>value</code> is not a valid …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Kind</code>.\nA histogram plus additional data.\nHdrHistogram.rs <code>Histogram</code> serialized to binary in the V2 …\nA histogram of task poll durations.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nA trace event\nStart watching trace events with the provided filter.\nA trace event\nSpecifies which trace events should be streamed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nNested message and enum types in <code>TraceEvent</code>.\nGenerated server implementations.\nAllows observers to stream trace events for a given …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nProduces a stream of trace events for the given filter.\n<code>Close</code> signals that a span was closed.\nA span was closed.\n<code>Enter</code> signals that a span was entered.\nA span was entered.\nA trace event\n<code>Exit</code> signals that a span was exited.\nA span was exited.\nA span was created.\nA new span metadata was registered.\nA new thread was registered.\n<code>RegisterThreads</code> signals that a new thread was registered.\n<code>at</code> identifies when the span was entered.\n<code>at</code> identifies when the span was exited.\n<code>at</code> identifies when the span was closed.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\n<code>names</code> maps the registered thread id’s to their …\n<code>span_id</code> identifies the span that was entered.\n<code>span_id</code> identifies the span that was exited.\n<code>span_id</code> identifies the span that was closed.\n<code>thread_id</code> identifies who entered the span.\n<code>thread_id</code> identifies who exited the span.\nGenerated trait containing gRPC methods that should be …\nAllows observers to stream trace events for a given …\nServer streaming response type for the Watch method.\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nProduces a stream of trace events for the given filter.")