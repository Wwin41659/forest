searchState.loadedDescShard("fil_actor_interface", 0, "Duration of each tipset epoch.\nThe maximum number of partitions that may be required to …\nThe maximum number of sector infos that may be required to …\nEpochs after which chain state is final with overwhelming …\nNumber of epochs after a consensus fault for which a miner …\nRatio of sector size to maximum deals per sector. The …\nThe number of blocks between payouts for deals\nMaximum number of unique “declarations” in batch …\nReturns the Q.0 position estimate of the filter\nThe delay between pre commit expiration and clean up from …\nExtrapolate filter “position” delta epochs in the …\nMinimum period before a deadline’s challenge window …\nThe maximum age of a fault before the sector is terminated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the code belongs to an account actor.\nReturns true if the code belongs to a ethereum account …\nReturns true if the code belongs to an evm actor.\nReturns true if the code belongs to a storage miner actor.\nReturns true if the code belongs to a multisig account …\nReturns true if the code belongs to a payment channel …\nReturns true if the code belongs to a placeholder actor.\nThe default duration after a verified deal’s nominal …\nMaximum total aggregated proof size.\nMaximum amount of sectors that can be aggregated.\nMaximum number of control addresses a miner may register.\nMaxMultiaddrData is the maximum amount of data that can be …\nMaximum number of partitions that will be assigned to a …\nMaxPeerIDLength is the maximum length allowed for any …\nMaximum total replica update proof size.\nMaximum number of epochs past the current epoch a sector …\nMaximum time a verified allocation can be active without …\nMaximum term for a verified data allocaion (epochs)\nMinimum amount of sectors that can be aggregated.\nMinimum number of epochs past the current epoch a sector …\nMinimum miner consensus power\nMinimum verified deal size\nMinimum term for a verified data allocation (epochs)\nCreate a new filter estimate given two Q.0 format ints.\nThe maximum number of new sectors that may be staged by a …\nThis macro iterates over each transaction, decodes the …\nThis macro iterates over each transaction, decodes the …\nThis macro iterates over each transaction, assumes that …\nThe maximum number of partitions that can be proven in a …\nNumber of epochs between publishing the precommit and when …\nThe maximum number of sector pre-commitments in a single …\nDenominator of the percentage of normalized cirulating …\nNumerator of the percentage of normalized cirulating …\nThe maximum number of sector replica updates in a single …\nThe maximum number of sectors that a miner can have …\nAllowed post proof types for new miners\nAllowed pre commit proof types for new miners\nStaging period for a miner worker key change.\nLookback from the deadline’s challenge window opening …\nThe duration of a deadline’s challenge window, the …\nWPoStDisputeWindow is the period after a Window PoSt …\nThe maximum distance back that a valid Window PoSt must …\nThe number of non-overlapping PoSt deadlines in each …\nThe period over which all a miner’s active sectors will …\nAccount actor method.\nAccount actor state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCron actor address.\nCron actor method.\nCron actor state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDatacap actor address.\nDatacap actor method.\nDatacap actor state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEVM actor method.\nEVM actor state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInit actor address.\nInit actor method.\nInit actor state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarket actor address.\nMarket actor method.\nMarket actor state.\nEmpty deal state\nLoads escrow table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads locked funds table\nDeal proposals\nDeal proposal meta data.\nConsume state to return just total funds locked\nDeadline holds the state for all sectors due at a specific …\nDeadline calculations with respect to a current epoch. “…\nMiner actor method.\nStatic information about miner\nMiner actor state.\nEpoch during which the sector proof was accepted\nUnclaimed funds. Actor balance - (locked funds, precommit …\nEpoch at which to sample the chain for challenge (&lt; Open).\nFirst epoch from which a proof may no longer be submitted …\nEpoch at which this info was calculated.\nReturns deadline calculations for the current (according …\nIntegral of active deals over sector lifetime\nReturns disputable proof count of the deadline\nExpected one day projection of reward for sector computed …\nExpected twenty day projection of reward for sector …\nEpoch during which the sector expires\nFirst epoch at which a fault declaration is rejected (&lt; …\nWhether the deadline’s fault cutoff has passed.\nGets fee debt of miner state\nReturns the deadline and partition index for a sector …\nFor each partition of the deadline\nLoads deadlines for a miner’s state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the current deadline has already closed.\nCurrent deadline index, in […\nPledge collected to commit this sector\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the current deadline is currently open.\nThe last epoch during which a proof may be submitted.\nLoads deadline at index for a miner’s state\nLoads sectors corresponding to the bitfield. If no …\nReturns the next instance of this deadline that has not …\nEpoch at which the subsequent deadline opens.\nThe first epoch in the next proving period.\nFirst epoch from which a proof may be submitted (&gt;= …\nReturns number of partitions posted\nWhether the proving period has elapsed.\nThe last epoch in the proving period.\nFirst epoch of the proving period (&lt;= CurrentEpoch).\nWhether the proving period has begun.\nDay reward of sector this sector replace or zero\nAge of sector this sector replaced or zero\nThe seal proof type implies the PoSt proofs\n<code>CommR</code>\nThe original <code>SealedSectorCID</code>, only gets set on the first …\nIntegral of active verified deals over sector lifetime\nMultisig actor method.\nMultisig actor state.\nTransaction type used in multisig actor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns pending transactions for the given multisig wallet\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns amount locked in multisig contract\nPower actor address.\nConstructor for Storage Power Actor\nPower actor method.\nPower actor state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume state to return total locked funds\nConsume state to return just total quality adj power\nReturns the addresses of every miner that has claimed …\nChecks power actor state for if miner meets minimum …\nLoads power for a given miner, if exists.\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nReturns total locked funds\nReturns the total power claim.\nReturns <code>this_epoch_qa_power_smoothed</code> from the state.\nReward actor address.\nReward actor method.\nReward actor state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsume state to return just storage power reward\nThe baseline power the network is targeting at this state…\nSystem actor address.\nSystem actor method.\nSystem actor state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nverifreg actor address.\nVerifreg actor state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")