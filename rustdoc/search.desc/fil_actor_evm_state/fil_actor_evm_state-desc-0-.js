searchState.loadedDescShard("fil_actor_evm_state", 0, "A Filecoin address as represented in the FEVM runtime …\nReturns this Address as an EVM word.\nInterpret the EVM word as an ID address in EVM-form, and …\nReturns the argument unchanged.\nReturns an EVM-form ID address from actor ID.\nCalls <code>U::from(self)</code>.\nReturns true if the EthAddress is an actor ID embedded in …\nReturns true if this is the null/zero EthAddress.\nReturns true if the EthAddress refers to an address in the …\nReturns a “null” address.\nMaximum value.\nMaximum value.\nLittle-endian large integer type\nLittle-endian large integer type\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nturns a i256 value to negative\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is zero.\nWhether this is zero.\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the low 64 bits, saturating the value to u64 max …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nA type alias for <code>BigEndian</code>.\nDefines big-endian serialization.\n<code>ByteOrder</code> describes types that can serialize integers as …\nA type alias for <code>LittleEndian</code>.\nDefines little-endian serialization.\nDefines system native-endian serialization.\nDefines network byte order serialization.\nExtends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…\nExtends <code>Write</code> with methods for writing numbers. (For …\nConverts the given slice of IEEE754 single-precision (4 …\nConverts the given slice of IEEE754 double-precision (8 …\nConverts the given slice of signed 128 bit integers to a …\nConverts the given slice of signed 16 bit integers to a …\nConverts the given slice of signed 32 bit integers to a …\nConverts the given slice of signed 64 bit integers to a …\nConverts the given slice of unsigned 128 bit integers to a …\nConverts the given slice of unsigned 16 bit integers to a …\nConverts the given slice of unsigned 32 bit integers to a …\nConverts the given slice of unsigned 64 bit integers to a …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a sequence of IEEE754 single-precision (4 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a sequence of IEEE754 double-precision (8 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a signed 128 bit integer from the underlying reader.\nReads a signed 128 bit integer from <code>buf</code>.\nReads a sequence of signed 128 bit integers from the …\nReads signed 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 16 bit integer from the underlying reader.\nReads a signed 16 bit integer from <code>buf</code>.\nReads a sequence of signed 16 bit integers from the …\nReads signed 16 bit integers from <code>src</code> to <code>dst</code>.\nReads a signed 24 bit integer from the underlying reader.\nReads a signed 24 bit integer from <code>buf</code>, stored in i32.\nReads a signed 32 bit integer from the underlying reader.\nReads a signed 32 bit integer from <code>buf</code>.\nReads a sequence of signed 32 bit integers from the …\nReads signed 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 48 bit integer from the underlying reader.\nReads a signed 48 bit integer from <code>buf</code>, stored in i64.\nReads a signed 64 bit integer from the underlying reader.\nReads a signed 64 bit integer from <code>buf</code>.\nReads a sequence of signed 64 bit integers from the …\nReads signed 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 8 bit integer from the underlying reader.\nReads a sequence of signed 8 bit integers from the …\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads an unsigned 128 bit integer from <code>buf</code>.\nReads an unsigned 128 bit integer from the underlying …\nReads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 128 bit integers from the …\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads an unsigned 16 bit integer from the underlying …\nReads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 16 bit integers from the …\nReads an unsigned 24 bit integer from the underlying …\nReads an unsigned 24 bit integer from <code>buf</code>, stored in u32.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads an unsigned 32 bit integer from the underlying …\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 32 bit integers from the …\nReads an unsigned 48 bit integer from the underlying …\nReads an unsigned 48 bit integer from <code>buf</code>, stored in u64.\nReads an unsigned 64 bit integer from <code>buf</code>.\nReads an unsigned 64 bit integer from the underlying …\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 64 bit integers from the …\nReads an unsigned 8 bit integer from the underlying reader.\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites IEEE754 double-precision (8 bytes) floating point …\nWrites a signed 128 bit integer to the underlying writer.\nWrites a signed 128 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 16 bit integer to the underlying writer.\nWrites a signed 16 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 24 bit integer to the underlying writer.\nWrites a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.\nWrites a signed 32 bit integer to the underlying writer.\nWrites a signed 32 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 48 bit integer to the underlying writer.\nWrites a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.\nWrites a signed 64 bit integer to the underlying writer.\nWrites a signed 64 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 8 bit integer to the underlying writer.\nWrites signed 8 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned 128 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 128 bit integer to the underlying …\nWrites unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 16 bit integer to the underlying writer.\nWrites unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 24 bit integer to the underlying writer.\nWrites an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 32 bit integer to the underlying writer.\nWrites unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 48 bit integer to the underlying writer.\nWrites an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 64 bit integer to the underlying writer.\nWrites unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 8 bit integer to the underlying writer.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nA Filecoin address as represented in the FEVM runtime …\nReturns this Address as an EVM word.\nInterpret the EVM word as an ID address in EVM-form, and …\nReturns the argument unchanged.\nReturns an EVM-form ID address from actor ID.\nCalls <code>U::from(self)</code>.\nReturns true if the EthAddress is an actor ID embedded in …\nReturns true if this is the null/zero EthAddress.\nReturns true if the EthAddress refers to an address in the …\nReturns a “null” address.\nMaximum value.\nMaximum value.\nLittle-endian large integer type\nLittle-endian large integer type\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nturns a i256 value to negative\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is zero.\nWhether this is zero.\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the low 64 bits, saturating the value to u64 max …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nA type alias for <code>BigEndian</code>.\nDefines big-endian serialization.\n<code>ByteOrder</code> describes types that can serialize integers as …\nA type alias for <code>LittleEndian</code>.\nDefines little-endian serialization.\nDefines system native-endian serialization.\nDefines network byte order serialization.\nExtends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…\nExtends <code>Write</code> with methods for writing numbers. (For …\nConverts the given slice of IEEE754 single-precision (4 …\nConverts the given slice of IEEE754 double-precision (8 …\nConverts the given slice of signed 128 bit integers to a …\nConverts the given slice of signed 16 bit integers to a …\nConverts the given slice of signed 32 bit integers to a …\nConverts the given slice of signed 64 bit integers to a …\nConverts the given slice of unsigned 128 bit integers to a …\nConverts the given slice of unsigned 16 bit integers to a …\nConverts the given slice of unsigned 32 bit integers to a …\nConverts the given slice of unsigned 64 bit integers to a …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a sequence of IEEE754 single-precision (4 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a sequence of IEEE754 double-precision (8 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a signed 128 bit integer from the underlying reader.\nReads a signed 128 bit integer from <code>buf</code>.\nReads a sequence of signed 128 bit integers from the …\nReads signed 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 16 bit integer from the underlying reader.\nReads a signed 16 bit integer from <code>buf</code>.\nReads a sequence of signed 16 bit integers from the …\nReads signed 16 bit integers from <code>src</code> to <code>dst</code>.\nReads a signed 24 bit integer from the underlying reader.\nReads a signed 24 bit integer from <code>buf</code>, stored in i32.\nReads a signed 32 bit integer from the underlying reader.\nReads a signed 32 bit integer from <code>buf</code>.\nReads a sequence of signed 32 bit integers from the …\nReads signed 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 48 bit integer from the underlying reader.\nReads a signed 48 bit integer from <code>buf</code>, stored in i64.\nReads a signed 64 bit integer from the underlying reader.\nReads a signed 64 bit integer from <code>buf</code>.\nReads a sequence of signed 64 bit integers from the …\nReads signed 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 8 bit integer from the underlying reader.\nReads a sequence of signed 8 bit integers from the …\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads an unsigned 128 bit integer from <code>buf</code>.\nReads an unsigned 128 bit integer from the underlying …\nReads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 128 bit integers from the …\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads an unsigned 16 bit integer from the underlying …\nReads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 16 bit integers from the …\nReads an unsigned 24 bit integer from the underlying …\nReads an unsigned 24 bit integer from <code>buf</code>, stored in u32.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads an unsigned 32 bit integer from the underlying …\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 32 bit integers from the …\nReads an unsigned 48 bit integer from the underlying …\nReads an unsigned 48 bit integer from <code>buf</code>, stored in u64.\nReads an unsigned 64 bit integer from <code>buf</code>.\nReads an unsigned 64 bit integer from the underlying …\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 64 bit integers from the …\nReads an unsigned 8 bit integer from the underlying reader.\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites IEEE754 double-precision (8 bytes) floating point …\nWrites a signed 128 bit integer to the underlying writer.\nWrites a signed 128 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 16 bit integer to the underlying writer.\nWrites a signed 16 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 24 bit integer to the underlying writer.\nWrites a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.\nWrites a signed 32 bit integer to the underlying writer.\nWrites a signed 32 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 48 bit integer to the underlying writer.\nWrites a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.\nWrites a signed 64 bit integer to the underlying writer.\nWrites a signed 64 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 8 bit integer to the underlying writer.\nWrites signed 8 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned 128 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 128 bit integer to the underlying …\nWrites unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 16 bit integer to the underlying writer.\nWrites unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 24 bit integer to the underlying writer.\nWrites an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 32 bit integer to the underlying writer.\nWrites unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 48 bit integer to the underlying writer.\nWrites an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 64 bit integer to the underlying writer.\nWrites unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 8 bit integer to the underlying writer.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nA Filecoin address as represented in the FEVM runtime …\nReturns this Address as an EVM word.\nInterpret the EVM word as an ID address in EVM-form, and …\nReturns the argument unchanged.\nReturns an EVM-form ID address from actor ID.\nCalls <code>U::from(self)</code>.\nReturns true if the EthAddress is an actor ID embedded in …\nReturns true if this is the null/zero EthAddress.\nReturns true if the EthAddress refers to an address in the …\nReturns a “null” address.\nMaximum value.\nMaximum value.\nLittle-endian large integer type\nLittle-endian large integer type\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nturns a i256 value to negative\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is zero.\nWhether this is zero.\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the low 64 bits, saturating the value to u64 max …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nA type alias for <code>BigEndian</code>.\nDefines big-endian serialization.\n<code>ByteOrder</code> describes types that can serialize integers as …\nA type alias for <code>LittleEndian</code>.\nDefines little-endian serialization.\nDefines system native-endian serialization.\nDefines network byte order serialization.\nExtends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…\nExtends <code>Write</code> with methods for writing numbers. (For …\nConverts the given slice of IEEE754 single-precision (4 …\nConverts the given slice of IEEE754 double-precision (8 …\nConverts the given slice of signed 128 bit integers to a …\nConverts the given slice of signed 16 bit integers to a …\nConverts the given slice of signed 32 bit integers to a …\nConverts the given slice of signed 64 bit integers to a …\nConverts the given slice of unsigned 128 bit integers to a …\nConverts the given slice of unsigned 16 bit integers to a …\nConverts the given slice of unsigned 32 bit integers to a …\nConverts the given slice of unsigned 64 bit integers to a …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a sequence of IEEE754 single-precision (4 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a sequence of IEEE754 double-precision (8 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a signed 128 bit integer from the underlying reader.\nReads a signed 128 bit integer from <code>buf</code>.\nReads a sequence of signed 128 bit integers from the …\nReads signed 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 16 bit integer from the underlying reader.\nReads a signed 16 bit integer from <code>buf</code>.\nReads a sequence of signed 16 bit integers from the …\nReads signed 16 bit integers from <code>src</code> to <code>dst</code>.\nReads a signed 24 bit integer from the underlying reader.\nReads a signed 24 bit integer from <code>buf</code>, stored in i32.\nReads a signed 32 bit integer from the underlying reader.\nReads a signed 32 bit integer from <code>buf</code>.\nReads a sequence of signed 32 bit integers from the …\nReads signed 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 48 bit integer from the underlying reader.\nReads a signed 48 bit integer from <code>buf</code>, stored in i64.\nReads a signed 64 bit integer from the underlying reader.\nReads a signed 64 bit integer from <code>buf</code>.\nReads a sequence of signed 64 bit integers from the …\nReads signed 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 8 bit integer from the underlying reader.\nReads a sequence of signed 8 bit integers from the …\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads an unsigned 128 bit integer from <code>buf</code>.\nReads an unsigned 128 bit integer from the underlying …\nReads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 128 bit integers from the …\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads an unsigned 16 bit integer from the underlying …\nReads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 16 bit integers from the …\nReads an unsigned 24 bit integer from the underlying …\nReads an unsigned 24 bit integer from <code>buf</code>, stored in u32.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads an unsigned 32 bit integer from the underlying …\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 32 bit integers from the …\nReads an unsigned 48 bit integer from the underlying …\nReads an unsigned 48 bit integer from <code>buf</code>, stored in u64.\nReads an unsigned 64 bit integer from <code>buf</code>.\nReads an unsigned 64 bit integer from the underlying …\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 64 bit integers from the …\nReads an unsigned 8 bit integer from the underlying reader.\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites IEEE754 double-precision (8 bytes) floating point …\nWrites a signed 128 bit integer to the underlying writer.\nWrites a signed 128 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 16 bit integer to the underlying writer.\nWrites a signed 16 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 24 bit integer to the underlying writer.\nWrites a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.\nWrites a signed 32 bit integer to the underlying writer.\nWrites a signed 32 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 48 bit integer to the underlying writer.\nWrites a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.\nWrites a signed 64 bit integer to the underlying writer.\nWrites a signed 64 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 8 bit integer to the underlying writer.\nWrites signed 8 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned 128 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 128 bit integer to the underlying …\nWrites unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 16 bit integer to the underlying writer.\nWrites unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 24 bit integer to the underlying writer.\nWrites an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 32 bit integer to the underlying writer.\nWrites unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 48 bit integer to the underlying writer.\nWrites an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 64 bit integer to the underlying writer.\nWrites unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 8 bit integer to the underlying writer.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nA Filecoin address as represented in the FEVM runtime …\nReturns this Address as an EVM word.\nInterpret the EVM word as an ID address in EVM-form, and …\nReturns the argument unchanged.\nReturns an EVM-form ID address from actor ID.\nCalls <code>U::from(self)</code>.\nReturns true if the EthAddress is an actor ID embedded in …\nReturns true if this is the null/zero EthAddress.\nReturns true if the EthAddress refers to an address in the …\nReturns a “null” address.\nMaximum value.\nMaximum value.\nLittle-endian large integer type\nLittle-endian large integer type\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nturns a i256 value to negative\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is zero.\nWhether this is zero.\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the low 64 bits, saturating the value to u64 max …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nA type alias for <code>BigEndian</code>.\nDefines big-endian serialization.\n<code>ByteOrder</code> describes types that can serialize integers as …\nA type alias for <code>LittleEndian</code>.\nDefines little-endian serialization.\nDefines system native-endian serialization.\nDefines network byte order serialization.\nExtends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…\nExtends <code>Write</code> with methods for writing numbers. (For …\nConverts the given slice of IEEE754 single-precision (4 …\nConverts the given slice of IEEE754 double-precision (8 …\nConverts the given slice of signed 128 bit integers to a …\nConverts the given slice of signed 16 bit integers to a …\nConverts the given slice of signed 32 bit integers to a …\nConverts the given slice of signed 64 bit integers to a …\nConverts the given slice of unsigned 128 bit integers to a …\nConverts the given slice of unsigned 16 bit integers to a …\nConverts the given slice of unsigned 32 bit integers to a …\nConverts the given slice of unsigned 64 bit integers to a …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a sequence of IEEE754 single-precision (4 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a sequence of IEEE754 double-precision (8 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a signed 128 bit integer from the underlying reader.\nReads a signed 128 bit integer from <code>buf</code>.\nReads a sequence of signed 128 bit integers from the …\nReads signed 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 16 bit integer from the underlying reader.\nReads a signed 16 bit integer from <code>buf</code>.\nReads a sequence of signed 16 bit integers from the …\nReads signed 16 bit integers from <code>src</code> to <code>dst</code>.\nReads a signed 24 bit integer from the underlying reader.\nReads a signed 24 bit integer from <code>buf</code>, stored in i32.\nReads a signed 32 bit integer from the underlying reader.\nReads a signed 32 bit integer from <code>buf</code>.\nReads a sequence of signed 32 bit integers from the …\nReads signed 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 48 bit integer from the underlying reader.\nReads a signed 48 bit integer from <code>buf</code>, stored in i64.\nReads a signed 64 bit integer from the underlying reader.\nReads a signed 64 bit integer from <code>buf</code>.\nReads a sequence of signed 64 bit integers from the …\nReads signed 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 8 bit integer from the underlying reader.\nReads a sequence of signed 8 bit integers from the …\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads an unsigned 128 bit integer from <code>buf</code>.\nReads an unsigned 128 bit integer from the underlying …\nReads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 128 bit integers from the …\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads an unsigned 16 bit integer from the underlying …\nReads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 16 bit integers from the …\nReads an unsigned 24 bit integer from the underlying …\nReads an unsigned 24 bit integer from <code>buf</code>, stored in u32.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads an unsigned 32 bit integer from the underlying …\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 32 bit integers from the …\nReads an unsigned 48 bit integer from the underlying …\nReads an unsigned 48 bit integer from <code>buf</code>, stored in u64.\nReads an unsigned 64 bit integer from <code>buf</code>.\nReads an unsigned 64 bit integer from the underlying …\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 64 bit integers from the …\nReads an unsigned 8 bit integer from the underlying reader.\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites IEEE754 double-precision (8 bytes) floating point …\nWrites a signed 128 bit integer to the underlying writer.\nWrites a signed 128 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 16 bit integer to the underlying writer.\nWrites a signed 16 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 24 bit integer to the underlying writer.\nWrites a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.\nWrites a signed 32 bit integer to the underlying writer.\nWrites a signed 32 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 48 bit integer to the underlying writer.\nWrites a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.\nWrites a signed 64 bit integer to the underlying writer.\nWrites a signed 64 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 8 bit integer to the underlying writer.\nWrites signed 8 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned 128 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 128 bit integer to the underlying …\nWrites unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 16 bit integer to the underlying writer.\nWrites unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 24 bit integer to the underlying writer.\nWrites an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 32 bit integer to the underlying writer.\nWrites unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 48 bit integer to the underlying writer.\nWrites an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 64 bit integer to the underlying writer.\nWrites unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 8 bit integer to the underlying writer.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nA Filecoin address as represented in the FEVM runtime …\nReturns this Address as an EVM word.\nInterpret the EVM word as an ID address in EVM-form, and …\nReturns the argument unchanged.\nReturns an EVM-form ID address from actor ID.\nCalls <code>U::from(self)</code>.\nReturns true if the EthAddress is an actor ID embedded in …\nReturns true if this is the null/zero EthAddress.\nReturns true if the EthAddress refers to an address in the …\nReturns a “null” address.\nMaximum value.\nMaximum value.\nLittle-endian large integer type\nLittle-endian large integer type\nComputes the absolute difference between self and other.\nComputes the absolute difference between self and other.\nConversion to u128 with overflow checking\nConversion to u128 with overflow checking\nConversion to u32 with overflow checking\nConversion to u32 with overflow checking\nConversion to u64 with overflow checking\nConversion to u64 with overflow checking\nConversion to usize with overflow checking\nConversion to usize with overflow checking\nReturn if specific bit is set.\nReturn if specific bit is set.\nReturn the least number of bits needed to represent the …\nReturn the least number of bits needed to represent the …\nReturn specific byte.\nReturn specific byte.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked addition. Returns <code>None</code> if overflow occurred.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked division. Returns <code>None</code> if <code>other == 0</code>.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked multiplication. Returns <code>None</code> if overflow occurred.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked negation. Returns <code>None</code> unless <code>self == 0</code>.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked exponentiation. Returns <code>None</code> if overflow occurred.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked modulus. Returns <code>None</code> if <code>other == 0</code>.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nReturns a pair <code>(self / other, self % other)</code>.\nReturns a pair <code>(self / other, self % other)</code>.\nCreate <code>10**n</code> as this type.\nCreate <code>10**n</code> as this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from big endian representation bytes in memory.\nConverts from big endian representation bytes in memory.\nConvert from a decimal string.\nConvert from a decimal string.\nConverts from little endian representation bytes in memory.\nConverts from little endian representation bytes in memory.\nConverts a string slice in a given base to an integer. …\nConverts a string slice in a given base to an integer. …\nturns a i256 value to negative\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCompute the highest <code>n</code> such that <code>n * n &lt;= self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is zero.\nWhether this is zero.\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nLow 2 words (u128)\nLow 2 words (u128)\nConversion to u32\nConversion to u32\nLow word (u64)\nLow word (u64)\nThe maximum value which can be inhabited by this type.\nThe maximum value which can be inhabited by this type.\nOne (multiplicative identity) of this type.\nOne (multiplicative identity) of this type.\nAddition which overflows and returns a flag if it does.\nAddition which overflows and returns a flag if it does.\nMultiply with overflow, returning a flag if it does.\nMultiply with overflow, returning a flag if it does.\nNegation with overflow.\nNegation with overflow.\nFast exponentiation by squaring. Returns result and …\nFast exponentiation by squaring. Returns result and …\nSubtraction which underflows and returns a flag if it does.\nSubtraction which underflows and returns a flag if it does.\nFast exponentiation by squaring …\nFast exponentiation by squaring …\nAddition which saturates at the maximum value (Self::MAX).\nAddition which saturates at the maximum value (Self::MAX).\nMultiplication which saturates at the maximum value..\nMultiplication which saturates at the maximum value..\nSubtraction which saturates at zero.\nSubtraction which saturates at zero.\nWrite to the slice in big-endian format.\nWrite to the slice in big-endian format.\nWrite to the slice in little-endian format.\nWrite to the slice in little-endian format.\nReturns the low 64 bits, saturating the value to u64 max …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nZero (additive identity) of this type.\nZero (additive identity) of this type.\nA type alias for <code>BigEndian</code>.\nDefines big-endian serialization.\n<code>ByteOrder</code> describes types that can serialize integers as …\nA type alias for <code>LittleEndian</code>.\nDefines little-endian serialization.\nDefines system native-endian serialization.\nDefines network byte order serialization.\nExtends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…\nExtends <code>Write</code> with methods for writing numbers. (For …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given slice of IEEE754 single-precision (4 …\nConverts the given slice of IEEE754 double-precision (8 …\nConverts the given slice of signed 128 bit integers to a …\nConverts the given slice of signed 16 bit integers to a …\nConverts the given slice of signed 32 bit integers to a …\nConverts the given slice of signed 64 bit integers to a …\nConverts the given slice of unsigned 128 bit integers to a …\nConverts the given slice of unsigned 16 bit integers to a …\nConverts the given slice of unsigned 32 bit integers to a …\nConverts the given slice of unsigned 64 bit integers to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a IEEE754 single-precision (4 bytes) floating point …\nReads a sequence of IEEE754 single-precision (4 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a IEEE754 double-precision (8 bytes) floating point …\nReads a sequence of IEEE754 double-precision (8 bytes) …\nReads IEEE754 single-precision (4 bytes) floating point …\n<strong>DEPRECATED</strong>.\n<strong>DEPRECATED</strong>.\nReads a signed 128 bit integer from the underlying reader.\nReads a signed 128 bit integer from <code>buf</code>.\nReads a sequence of signed 128 bit integers from the …\nReads signed 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 16 bit integer from the underlying reader.\nReads a signed 16 bit integer from <code>buf</code>.\nReads a sequence of signed 16 bit integers from the …\nReads signed 16 bit integers from <code>src</code> to <code>dst</code>.\nReads a signed 24 bit integer from the underlying reader.\nReads a signed 24 bit integer from <code>buf</code>, stored in i32.\nReads a signed 32 bit integer from the underlying reader.\nReads a signed 32 bit integer from <code>buf</code>.\nReads a sequence of signed 32 bit integers from the …\nReads signed 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 48 bit integer from the underlying reader.\nReads a signed 48 bit integer from <code>buf</code>, stored in i64.\nReads a signed 64 bit integer from the underlying reader.\nReads a signed 64 bit integer from <code>buf</code>.\nReads a sequence of signed 64 bit integers from the …\nReads signed 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a signed 8 bit integer from the underlying reader.\nReads a sequence of signed 8 bit integers from the …\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads a signed n-bytes integer from the underlying reader.\nReads a signed n-bytes integer from <code>buf</code>.\nReads an unsigned 128 bit integer from <code>buf</code>.\nReads an unsigned 128 bit integer from the underlying …\nReads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 128 bit integers from the …\nReads an unsigned 16 bit integer from <code>buf</code>.\nReads an unsigned 16 bit integer from the underlying …\nReads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 16 bit integers from the …\nReads an unsigned 24 bit integer from the underlying …\nReads an unsigned 24 bit integer from <code>buf</code>, stored in u32.\nReads an unsigned 32 bit integer from <code>buf</code>.\nReads an unsigned 32 bit integer from the underlying …\nReads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 32 bit integers from the …\nReads an unsigned 48 bit integer from the underlying …\nReads an unsigned 48 bit integer from <code>buf</code>, stored in u64.\nReads an unsigned 64 bit integer from <code>buf</code>.\nReads an unsigned 64 bit integer from the underlying …\nReads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nReads a sequence of unsigned 64 bit integers from the …\nReads an unsigned 8 bit integer from the underlying reader.\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nReads an unsigned n-bytes integer from <code>buf</code>.\nReads an unsigned n-bytes integer from the underlying …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 single-precision (4 bytes) floating point …\nWrites IEEE754 single-precision (4 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites a IEEE754 double-precision (8 bytes) floating point …\nWrites IEEE754 double-precision (8 bytes) floating point …\nWrites a signed 128 bit integer to the underlying writer.\nWrites a signed 128 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 16 bit integer to the underlying writer.\nWrites a signed 16 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 24 bit integer to the underlying writer.\nWrites a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.\nWrites a signed 32 bit integer to the underlying writer.\nWrites a signed 32 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 48 bit integer to the underlying writer.\nWrites a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.\nWrites a signed 64 bit integer to the underlying writer.\nWrites a signed 64 bit integer <code>n</code> to <code>buf</code>.\nWrites signed 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed 8 bit integer to the underlying writer.\nWrites signed 8 bit integers from <code>src</code> into <code>dst</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites a signed n-bytes integer to the underlying writer.\nWrites a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned 128 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 128 bit integer to the underlying …\nWrites unsigned 128 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 16 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 16 bit integer to the underlying writer.\nWrites unsigned 16 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 24 bit integer to the underlying writer.\nWrites an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.\nWrites an unsigned 32 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 32 bit integer to the underlying writer.\nWrites unsigned 32 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 48 bit integer to the underlying writer.\nWrites an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.\nWrites an unsigned 64 bit integer <code>n</code> to <code>buf</code>.\nWrites an unsigned 64 bit integer to the underlying writer.\nWrites unsigned 64 bit integers from <code>src</code> into <code>dst</code>.\nWrites an unsigned 8 bit integer to the underlying writer.\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nWrites an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.\nWrites an unsigned n-bytes integer to the underlying …\nA Keccak256 digest of EVM bytecode.\nKeccak256 hash of <code>[]</code>, empty bytecode\nKeccak256 hash of <code>[0xfe]</code>, “native bytecode”\nData stored by an EVM contract. This runs on the …\nA tombstone indicating that the contract has been …\nThe EVM contract bytecode resulting from calling the …\nThe EVM contract bytecode hash keccak256(bytecode)\nThe original caller’s Eth address.\nThe EVM contract state dictionary. All eth contract state …\nThe actor’s “creator” (specified by the EAM).\nThe actor’s “creator” (specified by the EAM).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe initcode that will construct the new EVM actor.\nThe initcode that will construct the new EVM actor.\nThe contract invocation parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message nonce when this actor was self-destructed.\nThe EVM nonce used to track how many times CREATE or …\nThe message origin when this actor was self-destructed.\nPossibly a tombstone if this actor has been …\nThe value passed in the original call.\nA Keccak256 digest of EVM bytecode.\nKeccak256 hash of <code>[]</code>, empty bytecode\nKeccak256 hash of <code>[0xfe]</code>, “native bytecode”\nData stored by an EVM contract. This runs on the …\nA tombstone indicating that the contract has been …\nThe EVM contract bytecode resulting from calling the …\nThe EVM contract bytecode hash keccak256(bytecode)\nThe original caller’s Eth address.\nThe EVM contract state dictionary. All eth contract state …\nThe actor’s “creator” (specified by the EAM).\nThe actor’s “creator” (specified by the EAM).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe initcode that will construct the new EVM actor.\nThe initcode that will construct the new EVM actor.\nThe contract invocation parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message nonce when this actor was self-destructed.\nThe EVM nonce used to track how many times CREATE or …\nThe message origin when this actor was self-destructed.\nPossibly a tombstone if this actor has been …\nThe value passed in the original call.\nA Keccak256 digest of EVM bytecode.\nKeccak256 hash of <code>[]</code>, empty bytecode\nKeccak256 hash of <code>[0xfe]</code>, “native bytecode”\nData stored by an EVM contract. This runs on the …\nA tombstone indicating that the contract has been …\nThe EVM contract bytecode resulting from calling the …\nThe EVM contract bytecode hash keccak256(bytecode)\nThe original caller’s Eth address.\nThe EVM contract state dictionary. All eth contract state …\nThe actor’s “creator” (specified by the EAM).\nThe actor’s “creator” (specified by the EAM).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe initcode that will construct the new EVM actor.\nThe initcode that will construct the new EVM actor.\nThe contract invocation parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message nonce when this actor was self-destructed.\nThe EVM nonce used to track how many times CREATE or …\nThe message origin when this actor was self-destructed.\nPossibly a tombstone if this actor has been …\nThe value passed in the original call.\nA Keccak256 digest of EVM bytecode.\nKeccak256 hash of <code>[]</code>, empty bytecode\nKeccak256 hash of <code>[0xfe]</code>, “native bytecode”\nData stored by an EVM contract. This runs on the …\nA tombstone indicating that the contract has been …\nThe EVM contract bytecode resulting from calling the …\nThe EVM contract bytecode hash keccak256(bytecode)\nThe original caller’s Eth address.\nThe EVM contract state dictionary. All eth contract state …\nThe actor’s “creator” (specified by the EAM).\nThe actor’s “creator” (specified by the EAM).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe initcode that will construct the new EVM actor.\nThe initcode that will construct the new EVM actor.\nThe contract invocation parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message nonce when this actor was self-destructed.\nThe EVM nonce used to track how many times CREATE or …\nThe message origin when this actor was self-destructed.\nPossibly a tombstone if this actor has been …\nThe value passed in the original call.\nA Keccak256 digest of EVM bytecode.\nKeccak256 hash of <code>[]</code>, empty bytecode\nKeccak256 hash of <code>[0xfe]</code>, “native bytecode”\nData stored by an EVM contract. This runs on the …\nA tombstone indicating that the contract has been …\nThe EVM contract bytecode resulting from calling the …\nThe EVM contract bytecode hash keccak256(bytecode)\nThe original caller’s Eth address.\nThe EVM contract state dictionary. All eth contract state …\nThe actor’s “creator” (specified by the EAM).\nThe actor’s “creator” (specified by the EAM).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe initcode that will construct the new EVM actor.\nThe initcode that will construct the new EVM actor.\nThe contract invocation parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message nonce when this actor was self-destructed.\nThe EVM nonce used to track how many times CREATE or …\nThe message origin when this actor was self-destructed.\nPossibly a tombstone if this actor has been …\nThe value passed in the original call.")