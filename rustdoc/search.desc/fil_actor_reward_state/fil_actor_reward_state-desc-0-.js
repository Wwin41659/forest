searchState.loadedDescShard("fil_actor_reward_state", 0, "<code>Floor(e^(ln[1 + 200%] / epochsInYear) * 2^128</code> Q.128 …\n1 EiB\nReward actor methods available\n<code>PenaltyMultiplier</code> is the factor miner penalties are scaled …\nReward actor state\nDefines vesting function type for reward actor.\nTarget <code>CumsumRealized</code> needs to reach for …\n<code>CumsumRealized</code> is cumulative sum of network power capped …\n<code>EffectiveBaselinePower</code> is the baseline power at the …\nCeiling of real effective network time <code>theta</code> based on …\nEpoch tracks for which epoch the Reward was computed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe baseline power the network is targeting at st.Epoch.\nThe reward to be paid in per <code>WinCount</code> to block producers. …\nSmoothed <code>this_epoch_reward</code>.\nFloor(e^(ln[1 + 200%] / epochsInYear) * 2^128 Q.128 …\n1EiB\nReward actor methods available\nPenaltyMultiplier is the factor miner penalties are scaled …\nReward actor state\nDefines vestion function type for reward actor.\nTarget CumsumRealized needs to reach for …\nCumsumRealized is cumulative sum of network power capped …\nEffectiveBaselinePower is the baseline power at the …\nCeiling of real effective network time <code>theta</code> based on …\nEpoch tracks for which epoch the Reward was computed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe baseline power the network is targeting at st.Epoch.\nThe reward to be paid in per WinCount to block producers. …\nSmoothed <code>this_epoch_reward</code>.\nFloor(e^(ln[1 + 100%] / epochsInYear) * 2^128 Q.128 …\n1EiB\nReward actor methods available\nPenaltyMultiplier is the factor miner penalties are scaled …\nReward actor state\nDefines vestion function type for reward actor.\nTarget CumsumRealized needs to reach for …\nCumsumRealized is cumulative sum of network power capped …\nEffectiveBaselinePower is the baseline power at the …\nCeiling of real effective network time <code>theta</code> based on …\nEpoch tracks for which epoch the Reward was computed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe baseline power the network is targeting at st.Epoch.\nThe reward to be paid in per WinCount to block producers. …\nSmoothed <code>this_epoch_reward</code>.\nFloor(e^(ln[1 + 100%] / epochsInYear) * 2^128 Q.128 …\n1EiB\nReward actor methods available\nPenaltyMultiplier is the factor miner penalties are scaled …\nReward actor state\nDefines vestion function type for reward actor.\nTarget CumsumRealized needs to reach for …\nCumsumRealized is cumulative sum of network power capped …\nEffectiveBaselinePower is the baseline power at the …\nCeiling of real effective network time <code>theta</code> based on …\nEpoch tracks for which epoch the Reward was computed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe baseline power the network is targeting at st.Epoch.\nThe reward to be paid in per WinCount to block producers. …\nSmoothed <code>this_epoch_reward</code>.\nFloor(e^(ln[1 + 100%] / epochsInYear) * 2^128 Q.128 …\n1EiB\nReward actor methods available\nPenaltyMultiplier is the factor miner penalties are scaled …\nReward actor state\nDefines vestion function type for reward actor.\nTarget CumsumRealized needs to reach for …\nCumsumRealized is cumulative sum of network power capped …\nEffectiveBaselinePower is the baseline power at the …\nCeiling of real effective network time <code>theta</code> based on …\nEpoch tracks for which epoch the Reward was computed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe baseline power the network is targeting at st.Epoch.\nThe reward to be paid in per WinCount to block producers. …\nSmoothed <code>this_epoch_reward</code>.\n<code>Floor(e^(ln[1 + 200%] / epochsInYear) * 2^128</code> Q.128 …\n1 EiB\nReward actor methods available\n<code>PenaltyMultiplier</code> is the factor miner penalties are scaled …\nReward actor state\nDefines vesting function type for reward actor.\nTarget <code>CumsumRealized</code> needs to reach for …\n<code>CumsumRealized</code> is cumulative sum of network power capped …\n<code>EffectiveBaselinePower</code> is the baseline power at the …\nCeiling of real effective network time <code>theta</code> based on …\nEpoch tracks for which epoch the <code>Reward</code> was computed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe baseline power the network is targeting at <code>st.Epoch</code>.\nThe reward to be paid in per <code>WinCount</code> to block producers. …\nSmoothed <code>this_epoch_reward</code>.\n<code>Floor(e^(ln[1 + 200%] / epochsInYear) * 2^128</code> Q.128 …\n1 EiB\nReward actor methods available\n<code>PenaltyMultiplier</code> is the factor miner penalties are scaled …\nReward actor state\nDefines vesting function type for reward actor.\nTarget <code>CumsumRealized</code> needs to reach for …\n<code>CumsumRealized</code> is cumulative sum of network power capped …\n<code>EffectiveBaselinePower</code> is the baseline power at the …\nCeiling of real effective network time <code>theta</code> based on …\nEpoch tracks for which epoch the Reward was computed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe baseline power the network is targeting at <code>st.Epoch</code>.\nThe reward to be paid in per <code>WinCount</code> to block producers. …\nSmoothed <code>this_epoch_reward</code>.")