searchState.loadedDescShard("fil_actor_miner_state", 1, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA set is empty if it has no sectors. The power and pledge …\nWhether the current deadline is currently open.\nPrefix for sealed sector CIDs (<code>CommR</code>).\nPrefix for unsealed sector CIDs (<code>CommD</code>).\nWalks the deadlines in deadline order.\nWalks the partitions in the map, in order of increasing …\nThe last epoch during which a proof may be submitted.\nCounts all sectors in the expiration set.\nPower of not-yet-terminated sectors (incl faulty &amp; …\nLive sectors are those that are not terminated (but may be …\nThe number of non-terminated sectors in this deadline …\nLoads info for a set of sectors to be proven. If any of …\nThe maximum number of partitions that may be required to …\nLoads sector info for a sequence of sectors.\nLoads the vesting funds table from the store.\nLoads sector info for a sequence of sectors, substituting …\nTotal rewards and added funds locked in vesting table\nMaximum duration to allow for the sealing process for seal …\nVector of byte arrays representing Libp2p multi-addresses …\nLoads a queue root.\nNone means unknown\nMust be an ID address\nReturns the next instance of this deadline that has not …\nEpoch at which the subsequent deadline opens.\nThe first epoch in the next proving period.\nPledge total for the on-time sectors\nSectors expiring “on time” at the end of their …\nFirst epoch from which a proof may be submitted …\nAccount that owns this miner\nPartition index within the deadline containing the faulty …\nPartition index within the deadline containing the …\nReturns a sorted vector of partitions in the map.\nPartitions in this deadline, in order. The keys of this …\nThe partitions being proven.\nLibp2p identity that should be used when connecting to …\nA proposal new beneficiary message for this miner\nA proposed new owner account for this miner. Must be …\nOptional worker key to update at an epoch\nWhether the proving period has elapsed.\nThe last epoch in the proving period.\nFirst epoch of the proving period <code>(&lt;= CurrentEpoch)</code>.\nWhether the proving period has begun.\nPops up to <code>max_sectors</code> early terminated sectors from all …\n<code>PopExpiredSectors</code> terminates expired sectors from all …\n<code>PopExpiredSectors</code> traverses the expiration queue up to and …\nRemoves and returns all values with keys less than or …\nRemoves and aggregates entries from the queue up to and …\nPower activated or deactivated (positive or negative).\nReturns the sum of the raw byte and quality-adjusted power …\nTotal funds locked as <code>pre_commit_deposit</code>\nSectors that have been pre-committed but not yet proven. …\nPower that was faulty before this advance (including …\nProcesses all PoSt submissions, marking unproven sectors as\nArray of proofs, one per distinct registered proof type …\nThe first epoch in this miner’s current proving period. …\nStores a pre-committed sector info, failing if the sector …\nReturns the quality-adjusted power for a sector.\nReturns the power for a sector size and weight.\nReturns maximum achievable QA power.\n<code>DealWeight</code> and <code>VerifiedDealWeight</code> are spacetime occupied …\npre-commit expiry\nReturns deadline calculations for the current (according …\nMaximum precision of vesting table (limits cardinality of …\nThe total amount the current beneficiary can withdraw. …\nRecord the epoch of any sectors expiring early, for …\nDeclares a set of sectors faulty. Already faulty sectors …\nMarks all non-faulty sectors in the partition as faulty …\nProcesses a series of posts, recording proven partitions …\nDiscovers how skipped faults declared during post …\nRemoves sector numbers from faults and thus from …\nSubset of faulty sectors expected to recover on next PoSt …\nPower of expected-to-recover sectors. …\nRemoves sectors and power from the expiration set in place.\n<code>RemovePartitions</code> removes the specified partitions, …\nRemoves sectors from recoveries and recovering power. …\nRemove some sectors from the queue. The sectors may be …\nRepays the full miner actor fee debt.  Returns the amount …\nDraws from vesting table and unlocked funds to repay up to …\nDeprecated: Whether to replace a “committed capacity” …\nDeprecated: The committed capacity sector to replace, and …\nRemoves some sectors and adds some others. The sectors …\nReplaces a number of “old” sectors with new ones. The …\nDay reward of sector this sector replace or zero\nAge of sector this sector replaced or zero\nRe-schedules <em>all</em> sectors to expire at an early expiration …\nRe-schedules sectors to expire at an early expiration …\nReschedules some sectors to a new (quantized) expiration …\n<code>RescheduleExpirations</code> moves expiring sectors to the target …\nRemoves sectors from any queue entries in which they …\n<code>RescheduleSectorExpirations</code> reschedules the expirations of …\nSchedules each sector to expire at its next deadline end. …\nSaves the vesting table to the store.\nThe seal proof type implies the PoSt proofs\nMaximum duration to allow for the sealing process for seal …\n<code>CommR</code>\n<code>CommR</code>\n<code>CommR</code>\nDetermine maximum number of deal miner’s sector can hold\nThe original <code>SealedSectorCID</code>, only gets set on the first …\nAmount of space in each sector committed to the network by …\nA bitfield of all sectors in the proven partitions.\nSector numbers in this partition, including faulty, …\nInformation for all proven and not-yet-garbage-collected …\nSectors maps epochs at which sectors expired, to bitfields …\nSectors in the partition being declared faulty.\nSectors in the partition being declared recovered.\nSectors skipped while proving that weren’t already …\nDuration between successive incremental vests (independent …\nMarks a collection of sectors as terminated. The sectors …\nSubset of sectors terminated but not yet removed from …\nTotal faulty power after detecting faults (before expiring …\nThe total number of sectors in this deadline (incl dead).\nUnlocks an amount of funds that have <em>not yet vested</em>, if …\nUnlocks all vesting funds that have vested before the …\nUnproven sectors in this partition. This bitfield will be …\nPower of yet-to-be-proved sectors (never faulty).\nCommD\nThe amount of quota the current beneficiary has already …\nTest invariants about the partition power are valid.\nvalidates a set of assertions that must hold for …\nIntegral of active verified deals over sector lifetime\nPeriod over which the total should vest, after the initial …\n<code>VestingFunds</code> (Vesting Funds schedule for the miner).\nThe number of sectors in each Window PoSt partition …\nThe proof type used by this miner for sealing sectors.\nWorker account for this miner This will be the key that is …\nConverts sector number to hamt key Go version: …")