searchState.loadedDescShard("fil_actor_miner_state", 0, "Base penalty for a successful disputed window post proof.\nBase reward for successfully disputing a window posts …\nWrapper for working with an <code>AMT[ChainEpoch]*Bitfield</code> …\n<code>CompactCommD</code> represents a Cid with compact representation …\nQuality multiplier for unverified deals in a sector\nDeadline holds the state for all sectors due at a specific …\nDeadline calculations with respect to a current epoch. “…\nMaps deadlines to partition maps.\nDeadlines contains Deadline objects, describing the …\nA queue of expiration sets by epoch, representing the …\n<code>ExpirationSet</code> is a collection of sector numbers that are …\nProjection period of expected sector block rewards for …\nminimum number of epochs past the current epoch a sector …\nStorage Miner actor methods available\nStorage miner actor constructor params are defined here so …\nStatic information about miner\nMaps partitions to sector bitfields.\nQuality multiplier for committed capacity (no deals) in a …\n<code>ReplicaUpdate</code> parameter with <code>Option&lt;Cid&gt;</code> for <code>CommD</code> None …\nPrecision used for making QA power calculations\nInformation stored on-chain for a proven sector.\nInformation stored on-chain for a pre-committed sector.\nBalance of Miner Actor should be greater than or equal to …\nInformation submitted by a miner to provide a Window PoSt.\nQuality multiplier for verified deals in a sector\nSpecification for a linear vesting schedule.\nRepresents the vesting table state for the miner. It is a …\nActivates unproven sectors, returning the activated power.\nEpoch during which the sector proof was accepted\nActive power is power of non-faulty sectors.\nPower that is currently active (not faulty)\nActive sectors are those that are neither terminated nor …\nAdds sectors and power to the expiration set in place.\nRecords the given sector bitfield at the given …\nRecords the given sector bitfield at the given partition …\nAdds a collection of sectors to their on-time target …\nAdds some partition numbers to the set expiring at an …\nmarks a set of sectors faulty\nFirst vests and unlocks the vested funds AND then locks …\nAdds sectors to a deadline. It’s the caller’s …\n<code>AddSectors</code> adds new sectors to the partition. The sectors …\nAdds values to the queue entry for an epoch.\nRecords the given sectors at the given deadline/partition …\nRecords the given sectors at the given partition.\nMarks a set of sector numbers as having been allocated. If …\nAllocated sector IDs. Sector IDs can never be reused once …\nAssign new sectors to deadlines.\nGet the amount that the beneficiary has not yet withdrawn …\nReturns true if we’re below the partition/sector limit. …\nAccount for receive miner benefits, withdraw on miner must …\nbeneficiary’s total quota, how much quota has been …\nChecks whether a seal proof type is supported for new …\nList of proof types which can be used when creating new …\nThe epoch at which these proofs is being committed to a …\nThe ticket randomness on the chain at the …\nEpoch at which to sample the chain for challenge (<code>&lt; Open</code>).\nCheck validates all bitfields and counts the number of …\nReturns an error if the target sector cannot be found, or …\nReturns an error if the target sector cannot be found …\n<code>CheckVestedFunds</code> returns the amount of vested funds that …\nFirst epoch from which a proof may no longer be submitted (…\nThe next epoch this miner is eligible for certain …\nAdditional addresses that are permitted to submit messages …\nCounts the number of partitions &amp; sectors within the map.\nCounts the number of partitions &amp; sectors within the map.\nIndex of the deadline within the proving period beginning …\nEpoch at which this info was calculated.\nCut cuts the elements from the bits in the given bitfield …\nThe deadline index which the submission targets.\nThe deadline to which the faulty sectors are assigned, in …\nThe deadline to which the recovered sectors are assigned, …\nReturns deadline calculations for the current (according …\nReturns true if the deadline at the given index is …\nReturns a sorted vector of deadlines in the map.\nThe sector numbers due for PoSt at each deadline in the …\nIntegral of active deals over sector lifetime\nDeclares sectors as recovering. Non-faulty and already …\nPower of new faults and failed recoveries\nSectors expiring “early” due to being faulty for too …\nSubset of terminated that were before their committed …\nPartitions with sectors that terminated early.\nDeadlines with outstanding fees for early sector …\nExpected one day projection of reward for sector computed …\nExpected twenty day projection of reward for sector …\nThe epoch at which the beneficiary’s rights expire and …\nEpoch during which the sector expires\nMaps epochs to partitions that <em>may</em> have sectors that …\nMaps epochs sectors that expire in or before that epoch. …\nFirst epoch at which a fault declaration is rejected (…\nWhether the deadline’s fault cutoff has passed.\nSubset of sectors detected/declared faulty and not yet …\nMemoized sum of faulty power in partitions.\nPower that is currently faulty\nPower of currently-faulty sectors. <code>FaultyPower &lt;= LivePower</code>…\nAbsolute value of debt this miner owes from unpaid fees.\nGets and returns the requested pre-committed sectors, …\nReturns the deadline and partition index for a sector …\nReturns the deadline and partition index for a sector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnclaimed funds. Actor balance - (locked funds, pre-commit …\nUnclaimed funds that are not locked – includes funds …\nWhether the current deadline has already closed.\nA subset of <code>sectors</code> that should be ignored.\nCurrent deadline index, in <code>[0..WPoStProvingPeriodDeadlines)</code>…\nPartitions are numbered per-deadline, from zero.\nContains static info about this miner\nDelay before any amount starts vesting.\nSum of initial pledge requirements of all active sectors.\nPledge collected to commit this sector\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA set is empty if it has no sectors. The power and pledge …\nWhether the current deadline is currently open.\nPrefix for sealed sector CIDs (<code>CommR</code>).\nPrefix for unsealed sector CIDs (<code>CommD</code>).\nWalks the deadlines in deadline order.\nWalks the partitions in the map, in order of increasing …\nThe last epoch during which a proof may be submitted.\nCounts all sectors in the expiration set.\nPower of not-yet-terminated sectors (incl faulty &amp; …\nLive sectors are those that are not terminated (but may be …\nThe number of non-terminated sectors in this deadline …\nLoads info for a set of sectors to be proven. If any of …\nThe maximum number of partitions that may be required to …\nLoads sector info for a sequence of sectors.\nLoads the vesting funds table from the store.\nLoads sector info for a sequence of sectors, substituting …\nTotal rewards and added funds locked in vesting table\nMaximum duration to allow for the sealing process for seal …\nVector of byte arrays representing Libp2p multi-addresses …\nLoads a queue root.\nNone means unknown\nMust be an ID address\nReturns the next instance of this deadline that has not …\nEpoch at which the subsequent deadline opens.\nThe first epoch in the next proving period.\nPledge total for the on-time sectors\nSectors expiring “on time” at the end of their …\nFirst epoch from which a proof may be submitted (…\nAccount that owns this miner\nPartition index within the deadline containing the faulty …\nPartition index within the deadline containing the …\nReturns a sorted vector of partitions in the map.\nPartitions in this deadline, in order. The keys of this …\nThe partitions being proven.\nLibp2p identity that should be used when connecting to …\nA proposal new beneficiary message for this miner\nA proposed new owner account for this miner. Must be …\nOptional worker key to update at an epoch\nWhether the proving period has elapsed.\nThe last epoch in the proving period.\nFirst epoch of the proving period (<code>&lt;= CurrentEpoch</code>).\nWhether the proving period has begun.\nPops up to <code>max_sectors</code> early terminated sectors from all …\n<code>PopExpiredSectors</code> terminates expired sectors from all …\n<code>PopExpiredSectors</code> traverses the expiration queue up to and …\nRemoves and returns all values with keys less than or …\nRemoves and aggregates entries from the queue up to and …\nPower activated or deactivated (positive or negative).\nReturns the sum of the raw byte and quality-adjusted power …\nTotal funds locked as <code>pre_commit_deposit</code>\nSectors that have been pre-committed but not yet proven. …\nPower that was faulty before this advance (including …\nProcesses all PoSt submissions, marking unproven sectors as\nArray of proofs, one per distinct registered proof type …\nThe first epoch in this miner’s current proving period. …\nStores a pre-committed sector info, failing if the sector …\nReturns the quality-adjusted power for a sector.\nReturns the power for a sector size and weight.\nReturns maximum achievable QA power.\n<code>DealWeight</code> and <code>VerifiedDealWeight</code> are spacetime occupied …\npre-commit expiry\nReturns deadline calculations for the current (according …\nMaximum precision of vesting table (limits cardinality of …\nThe total amount the current beneficiary can withdraw. …\nRecord the epoch of any sectors expiring early, for …\nDeclares a set of sectors faulty. Already faulty sectors …\nMarks all non-faulty sectors in the partition as faulty …\nProcesses a series of posts, recording proven partitions …\nDiscovers how skipped faults declared during post …\nRemoves sector numbers from faults and thus from …\nSubset of faulty sectors expected to recover on next PoSt …\nPower of expected-to-recover sectors. …\nRemoves sectors and power from the expiration set in place.\n<code>RemovePartitions</code> removes the specified partitions, …\nRemoves sectors from recoveries and recovering power. …\nRemove some sectors from the queue. The sectors may be …\nRepays the full miner actor fee debt.  Returns the amount …\nDraws from vesting table and unlocked funds to repay up to …\nDeprecated: Whether to replace a “committed capacity” …\nDeprecated: The committed capacity sector to replace, and …\nRemoves some sectors and adds some others. The sectors …\nReplaces a number of “old” sectors with new ones. The …\nDay reward of sector this sector replace or zero\nAge of sector this sector replaced or zero\nRe-schedules <em>all</em> sectors to expire at an early expiration …\nRe-schedules sectors to expire at an early expiration …\nReschedules some sectors to a new (quantized) expiration …\n<code>RescheduleExpirations</code> moves expiring sectors to the target …\nRemoves sectors from any queue entries in which they …\n<code>RescheduleSectorExpirations</code> reschedules the expirations of …\nSchedules each sector to expire at its next deadline end. …\nSaves the vesting table to the store.\nThe seal proof type implies the PoSt proofs\nMaximum duration to allow for the sealing process for seal …\nCommR\nCommR\nCommR\nDetermine maximum number of deal miner’s sector can hold\nThe original SealedSectorCID, only gets set on the first …\nAmount of space in each sector committed to the network by …\nA bitfield of all sectors in the proven partitions.\nSector numbers in this partition, including faulty, …\nInformation for all proven and not-yet-garbage-collected …\nSectors maps epochs at which sectors expired, to bitfields …\nSectors in the partition being declared faulty.\nSectors in the partition being declared recovered.\nSectors skipped while proving that weren’t already …\nDuration between successive incremental vests (independent …\nMarks a collection of sectors as terminated. The sectors …\nSubset of sectors terminated but not yet removed from …\nTotal faulty power after detecting faults (before expiring …\nThe total number of sectors in this deadline (incl dead).\nUnlocks an amount of funds that have <em>not yet vested</em>, if …\nUnlocks all vesting funds that have vested before the …\nUnproven sectors in this partition. This bitfield will be …\nPower of yet-to-be-proved sectors (never faulty).\nCommD\nThe amount of quota the current beneficiary has already …\nTest invariants about the partition power are valid.\nvalidates a set of assertions that must hold for …\nIntegral of active verified deals over sector lifetime\nPeriod over which the total should vest, after the initial …\n<code>VestingFunds</code> (Vesting Funds schedule for the miner).\nThe number of sectors in each Window PoSt partition …\nThe proof type used by this miner for sealing sectors.\nWorker account for this miner This will be the key that is …\nBase penalty for a successful disputed window post proof.\nBase reward for successfully disputing a window posts …\nWrapper for working with an AMTChainEpoch*Bitfield …\nCompactCommD represents a Cid with compact representation …\nQuality multiplier for unverified deals in a sector\nDeadline holds the state for all sectors due at a specific …\nDeadline calculations with respect to a current epoch. “…\nMaps deadlines to partition maps.\nDeadlines contains Deadline objects, describing the …\nA queue of expiration sets by epoch, representing the …\nExpirationSet is a collection of sector numbers that are …\nProjection period of expected sector block rewards for …\nminimum number of epochs past the current epoch a sector …\nStorage Miner actor methods available\nStorage miner actor constructor params are defined here so …\nStatic information about miner\nMaps partitions to sector bitfields.\nQuality multiplier for committed capacity (no deals) in a …\nReplicaUpdate param with Option for CommD None means …\nPrecision used for making QA power calculations\nInformation stored on-chain for a proven sector.\nInformation stored on-chain for a pre-committed sector.\nBalance of Miner Actor should be greater than or equal to …\nInformation submitted by a miner to provide a Window PoSt.\nQuality multiplier for verified deals in a sector\nSpecification for a linear vesting schedule.\nRepresents the vesting table state for the miner. It is a …\nActivates unproven sectors, returning the activated power.\nEpoch during which the sector proof was accepted\nActive power is power of non-faulty sectors.\nPower that is currently active (not faulty)\nActive sectors are those that are neither terminated nor …\nAdds sectors and power to the expiration set in place.\nRecords the given sector bitfield at the given …\nRecords the given sector bitfield at the given partition …\nAdds a collection of sectors to their on-time target …\nAdds some partition numbers to the set expiring at an …\nmarks a set of sectors faulty\nFirst vests and unlocks the vested funds AND then locks …\nAdds sectors to a deadline. It’s the caller’s …\nAddSectors adds new sectors to the partition. The sectors …\nAdds values to the queue entry for an epoch.\nRecords the given sectors at the given deadline/partition …\nRecords the given sectors at the given partition.\nMarks a set of sector numbers as having been allocated. If …\nAllocated sector IDs. Sector IDs can never be reused once …\nAssign new sectors to deadlines.\nGet the amount that the beneficiary has not yet withdrawn …\nReturns true if we’re below the partition/sector limit. …\nAccount for receive miner benefits, withdraw on miner must …\nbeneficiary’s total quota, how much quota has been …\nChecks whether a seal proof type is supported for new …\nList of proof types which can be used when creating new …\nThe epoch at which these proofs is being committed to a …\nThe ticket randomness on the chain at the …\nEpoch at which to sample the chain for challenge (&lt; Open).\nCheck validates all bitfields and counts the number of …\nReturns an error if the target sector cannot be found, or …\nReturns an error if the target sector cannot be found …\nCheckVestedFunds returns the amount of vested funds that …\nFirst epoch from which a proof may no longer be submitted …\nThe next epoch this miner is eligible for certain …\nAdditional addresses that are permitted to submit messages …\nConvert the v1_1 PoSt Proof type to the older v1 types …\nCounts the number of partitions &amp; sectors within the map.\nCounts the number of partitions &amp; sectors within the map.\nIndex of the deadline within the proving period beginning …\nEpoch at which this info was calculated.\nCut cuts the elements from the bits in the given bitfield …\nThe deadline index which the submission targets.\nThe deadline to which the faulty sectors are assigned, in …\nThe deadline to which the recovered sectors are assigned, …\nReturns deadline calculations for the current (according …\nReturns true if the deadline at the given index is …\nReturns a sorted vec of deadlines in the map.\nThe sector numbers due for PoSt at each deadline in the …\nIntegral of active deals over sector lifetime\nDeclares sectors as recovering. Non-faulty and already …\nPower of new faults and failed recoveries\nSectors expiring “early” due to being faulty for too …\nSubset of terminated that were before their committed …\nPartitions with sectors that terminated early.\nDeadlines with outstanding fees for early sector …\nExpected one day projection of reward for sector computed …\nThe projected block reward a sector would earn over some …\nExpected twenty day projection of reward for sector …\nThe epoch at which the beneficiary’s rights expire and …\nEpoch during which the sector expires\nMaps epochs to partitions that <em>may</em> have sectors that …\nMaps epochs sectors that expire in or before that epoch. …\nFirst epoch at which a fault declaration is rejected (&lt; …\nWhether the deadline’s fault cutoff has passed.\nSubset of sectors detected/declared faulty and not yet …\nMemoized sum of faulty power in partitions.\nPower that is currently faulty\nPower of currently-faulty sectors. FaultyPower &lt;= …\nAbsolute value of debt this miner owes from unpaid fees.\nGets and returns the requested pre-committed sectors, …\nReturns the deadline and partition index for a sector …\nReturns the deadline and partition index for a sector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnclaimed funds. Actor balance - (locked funds, precommit …\nUnclaimed funds that are not locked – includes funds …\nWhether the current deadline has already closed.\nA subset of <code>sectors</code> that should be ignored.\nCurrent deadline index, in […\nPartitions are numbered per-deadline, from zero.\nContains static info about this miner\nDelay before any amount starts vesting.\nSum of initial pledge requirements of all active sectors.\nPledge collected to commit this sector\nComputes the pledge requirement for committing new …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA set is empty if it has no sectors. The power and pledge …\nWhether the current deadline is currently open.\nPrefix for sealed sector CIDs (CommR).\nPrefix for unsealed sector CIDs (CommD).\nConvert the v1_1 PoSt Proof type to the older v1 types …\nWalks the deadlines in deadline order.\nWalks the partitions in the map, in order of increasing …\nThe last epoch during which a proof may be submitted.\nCounts all sectors in the expiration set.\nPower of not-yet-terminated sectors (incl faulty &amp; …\nLive sectors are those that are not terminated (but may be …\nThe number of non-terminated sectors in this deadline …\nLoads info for a set of sectors to be proven. If any of …\nThe maximum number of partitions that may be required to …\nLoads sector info for a sequence of sectors.\nLoads the vesting funds table from the store.\nLoads sector info for a sequence of sectors, substituting …\nTotal rewards and added funds locked in vesting table\nReturns the amount of a reward to vest, and the vesting …\nMaximum duration to allow for the sealing process for seal …\nVector of byte arrays representing Libp2p multi-addresses …\nLoads a queue root.\nNone means unknown\nMust be an ID address\nReturns the next instance of this deadline that has not …\nEpoch at which the subsequent deadline opens.\nThe first epoch in the next proving period.\nPledge total for the on-time sectors\nSectors expiring “on time” at the end of their …\nFirst epoch from which a proof may be submitted (&gt;= …\nAccount that owns this miner\nPartition index within the deadline containing the faulty …\nPartition index within the deadline containing the …\nReturns a sorted vec of partitions in the map.\nPartitions in this deadline, in order. The keys of this …\nThe partitions being proven.\nLibp2p identity that should be used when connecting to …\nA proposal new beneficiary message for this miner\nA proposed new owner account for this miner. Must be …\nOptional worker key to update at an epoch\nWhether the proving period has elapsed.\nThe last epoch in the proving period.\nFirst epoch of the proving period (&lt;= CurrentEpoch).\nWhether the proving period has begun.\nThe penalty for a sector continuing faulty for another …\nPenalty to locked pledge collateral for the termination of …\nThis is the SP(t) penalty for a newly faulty sector that …\nPops up to <code>max_sectors</code> early terminated sectors from all …\nPopExpiredSectors terminates expired sectors from all …\nPopExpiredSectors traverses the expiration queue up to and …\nRemoves and returns all values with keys less than or …\nRemoves and aggregates entries from the queue up to and …\nPower activated or deactivated (positive or negative).\nReturns the sum of the raw byte and quality-adjusted power …\nComputes the PreCommit deposit given sector qa weight and …\nTotal funds locked as pre_commit_deposit\nSectors that have been pre-committed but not yet proven. …\nPower that was faulty before this advance (including …\nProcesses all PoSt submissions, marking unproven sectors as\nArray of proofs, one per distinct registered proof type …\nThe first epoch in this miner’s current proving period. …\nStores a pre-committed sector info, failing if the sector …\nReturns the quality-adjusted power for a sector.\nReturns the power for a sector size and weight.\nReturns maximum achievable QA power.\nDealWeight and VerifiedDealWeight are spacetime occupied …\npre-commit expiry\nReturns deadline calculations for the current (according …\nMaximum precision of vesting table (limits cardinality of …\nThe total amount the current beneficiary can withdraw. …\nRecord the epoch of any sectors expiring early, for …\nDeclares a set of sectors faulty. Already faulty sectors …\nMarks all non-faulty sectors in the partition as faulty …\nProcesses a series of posts, recording proven partitions …\nDiscovers how skipped faults declared during post …\nRemoves sector numbers from faults and thus from …\nSubset of faulty sectors expected to recover on next PoSt …\nPower of expected-to-recover sectors. RecoveringPower &lt;= …\nRemoves sectors and power from the expiration set in place.\nRemovePartitions removes the specified partitions, …\nRemoves sectors from recoveries and recovering power. …\nRemove some sectors from the queue. The sectors may be …\nRepays the full miner actor fee debt.  Returns the amount …\nDraws from vesting table and unlocked funds to repay up to …\nDeprecated: Whether to replace a “committed capacity” …\nDeprecated: The committed capacity sector to replace, and …\nRemoves some sectors and adds some others. The sectors …\nReplaces a number of “old” sectors with new ones. The …\nDay reward of sector this sector replace or zero\nAge of sector this sector replaced or zero\nRe-schedules <em>all</em> sectors to expire at an early expiration …\nRe-schedules sectors to expire at an early expiration …\nReschedules some sectors to a new (quantized) expiration …\nRescheduleExpirations moves expiring sectors to the target …\nRemoves sectors from any queue entries in which they …\nRescheduleSectorExpirations reschedules the expirations of …\nSchedules each sector to expire at its next deadline end. …\nSaves the vesting table to the store.\nThe seal proof type implies the PoSt proofs\nMaximum duration to allow for the sealing process for seal …\nCommR\nCommR\nCommR\nDetermine maximum number of deal miner’s sector can hold\nThe original SealedSectorCID, only gets set on the first …\nAmount of space in each sector committed to the network by …\nA bitfield of all sectors in the proven partitions.\nSector numbers in this partition, including faulty, …\nInformation for all proven and not-yet-garbage-collected …\nSectors maps epochs at which sectors expired, to bitfields …\nSectors in the partition being declared faulty.\nSectors in the partition being declared recovered.\nSectors skipped while proving that weren’t already …\nDuration between successive incremental vests (independent …\nMarks a collection of sectors as terminated. The sectors …\nSubset of sectors terminated but not yet removed from …\nTotal faulty power after detecting faults (before expiring …\nThe total number of sectors in this deadline (incl dead).\nUnlocks an amount of funds that have <em>not yet vested</em>, if …\nUnlocks all vesting funds that have vested before the …\nUnproven sectors in this partition. This bitfield will be …\nPower of yet-to-be-proved sectors (never faulty).\nCommD\nThe amount of quota the current beneficiary has already …\nTest invariants about the partition power are valid.\nvalidates a set of assertions that must hold for …\nIntegral of active verified deals over sector lifetime\nPeriod over which the total should vest, after the initial …\nVestingFunds (Vesting Funds schedule for the miner).\nThe number of sectors in each Window PoSt partition …\nThe proof type used by this miner for sealing sectors.\nWorker account for this miner This will be the key that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBase penalty for a successful disputed window post proof.\nBase reward for successfully disputing a window posts …\nWrapper for working with an AMTChainEpoch*Bitfield …\nCompactCommD represents a Cid with compact representation …\nQuality multiplier for unverified deals in a sector\nDeadline holds the state for all sectors due at a specific …\nDeadline calculations with respect to a current epoch. “…\nMaps deadlines to partition maps.\nDeadlines contains Deadline objects, describing the …\nA queue of expiration sets by epoch, representing the …\nExpirationSet is a collection of sector numbers that are …\nProjection period of expected sector block rewards for …\nminimum number of epochs past the current epoch a sector …\nStorage Miner actor methods available\nStorage miner actor constructor params are defined here so …\nStatic information about miner\nMaps partitions to sector bitfields.\nQuality multiplier for committed capacity (no deals) in a …\nReplicaUpdate param with Option for CommD None means …\nPrecision used for making QA power calculations\nQA power mechanism introduced in FIP-0045\nInformation stored on-chain for a proven sector.\nInformation stored on-chain for a pre-committed sector.\nBalance of Miner Actor should be greater than or equal to …\nInformation submitted by a miner to provide a Window PoSt.\nQuality multiplier for verified deals in a sector\nSpecification for a linear vesting schedule.\nRepresents the vesting table state for the miner. It is a …\nActivates unproven sectors, returning the activated power.\nEpoch during which the sector proof was accepted\nActive power is power of non-faulty sectors.\nPower that is currently active (not faulty)\nActive sectors are those that are neither terminated nor …\nAdds sectors and power to the expiration set in place.\nRecords the given sector bitfield at the given …\nRecords the given sector bitfield at the given partition …\nAdds a collection of sectors to their on-time target …\nAdds some partition numbers to the set expiring at an …\nmarks a set of sectors faulty\nFirst vests and unlocks the vested funds AND then locks …\nAdds sectors to a deadline. It’s the caller’s …\nAddSectors adds new sectors to the partition. The sectors …\nAdds values to the queue entry for an epoch.\nRecords the given sectors at the given deadline/partition …\nRecords the given sectors at the given partition.\nGet a flags value with all known bits set.\nMarks a set of sector numbers as having been allocated. If …\nAllocated sector IDs. Sector IDs can never be reused once …\nAssign new sectors to deadlines.\nGet the amount that the beneficiary has not yet withdrawn …\nReturns true if we’re below the partition/sector limit. …\nAccount for receive miner benefits, withdraw on miner must …\nbeneficiary’s total quota, how much quota has been …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChecks whether a seal proof type is supported for new …\nList of proof types which can be used when creating new …\nThe epoch at which these proofs is being committed to a …\nThe ticket randomness on the chain at the …\nEpoch at which to sample the chain for challenge (&lt; Open).\nCheck validates all bitfields and counts the number of …\nReturns an error if the target sector cannot be found, or …\nReturns an error if the target sector cannot be found …\nCheckVestedFunds returns the amount of vested funds that …\nFirst epoch from which a proof may no longer be submitted …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe next epoch this miner is eligible for certain …\nWhether all set bits in a source flags value are also set …\nAdditional addresses that are permitted to submit messages …\nCounts the number of partitions &amp; sectors within the map.\nCounts the number of partitions &amp; sectors within the map.\nIndex of the deadline within the proving period beginning …\nEpoch at which this info was calculated.\nCut cuts the elements from the bits in the given bitfield …\nThe deadline index which the submission targets.\nThe deadline to which the faulty sectors are assigned, in …\nThe deadline to which the recovered sectors are assigned, …\nReturns deadline calculations for the current (according …\nReturns true if the deadline at the given index is …\nReturns a sorted vec of deadlines in the map.\nThe sector numbers due for PoSt at each deadline in the …\nIntegral of active deals over sector lifetime\nDeclares sectors as recovering. Non-faulty and already …\nPower of new faults and failed recoveries\nThe intersection of a source flags value with the …\nSectors expiring “early” due to being faulty for too …\nSubset of terminated that were before their committed …\nPartitions with sectors that terminated early.\nDeadlines with outstanding fees for early sector …\nGet a flags value with all bits unset.\nExpected one day projection of reward for sector computed …\nThe projected block reward a sector would earn over some …\nExpected twenty day projection of reward for sector …\nThe epoch at which the beneficiary’s rights expire and …\nEpoch during which the sector expires\nMaps epochs to partitions that <em>may</em> have sectors that …\nMaps epochs sectors that expire in or before that epoch. …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFirst epoch at which a fault declaration is rejected (&lt; …\nWhether the deadline’s fault cutoff has passed.\nSubset of sectors detected/declared faulty and not yet …\nMemoized sum of faulty power in partitions.\nPower that is currently faulty\nPower of currently-faulty sectors. FaultyPower &lt;= …\nAbsolute value of debt this miner owes from unpaid fees.\nGets and returns the requested pre-committed sectors, …\nReturns the deadline and partition index for a sector …\nReturns the deadline and partition index for a sector …\nAdditional flags, see <code>SectorOnChainInfoFlags</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nUnclaimed funds. Actor balance - (locked funds, precommit …\nUnclaimed funds that are not locked – includes funds …\nWhether the current deadline has already closed.\nA subset of <code>sectors</code> that should be ignored.\nCurrent deadline index, in […\nPartitions are numbered per-deadline, from zero.\nContains static info about this miner\nDelay before any amount starts vesting.\nSum of initial pledge requirements of all active sectors.\nPledge collected to commit this sector\nComputes the pledge requirement for committing new …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nA set is empty if it has no sectors. The power and pledge …\nWhether all bits in this flags value are unset.\nWhether the current deadline is currently open.\nPrefix for sealed sector CIDs (CommR).\nPrefix for unsealed sector CIDs (CommD).\nWalks the deadlines in deadline order.\nWalks the partitions in the map, in order of increasing …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe last epoch during which a proof may be submitted.\nCounts all sectors in the expiration set.\nPower of not-yet-terminated sectors (incl faulty &amp; …\nLive sectors are those that are not terminated (but may be …\nThe number of non-terminated sectors in this deadline …\nLoads info for a set of sectors to be proven. If any of …\nThe maximum number of partitions that may be required to …\nLoads sector info for a sequence of sectors.\nLoads the vesting funds table from the store.\nLoads sector info for a sequence of sectors, substituting …\nTotal rewards and added funds locked in vesting table\nReturns the amount of a reward to vest, and the vesting …\nMaximum duration to allow for the sealing process for seal …\nVector of byte arrays representing Libp2p multi-addresses …\nLoads a queue root.\nNone means unknown\nMust be an ID address\nReturns the next instance of this deadline that has not …\nEpoch at which the subsequent deadline opens.\nThe first epoch in the next proving period.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPledge total for the on-time sectors\nSectors expiring “on time” at the end of their …\nFirst epoch from which a proof may be submitted (&gt;= …\nAccount that owns this miner\nPartition index within the deadline containing the faulty …\nPartition index within the deadline containing the …\nReturns a sorted vec of partitions in the map.\nPartitions in this deadline, in order. The keys of this …\nThe partitions being proven.\nLibp2p identity that should be used when connecting to …\nA proposal new beneficiary message for this miner\nA proposed new owner account for this miner. Must be …\nOptional worker key to update at an epoch\nWhether the proving period has elapsed.\nThe last epoch in the proving period.\nFirst epoch of the proving period (&lt;= CurrentEpoch).\nWhether the proving period has begun.\nThe penalty for a sector continuing faulty for another …\nPenalty to locked pledge collateral for the termination of …\nThis is the SP(t) penalty for a newly faulty sector that …\nPops up to <code>max_sectors</code> early terminated sectors from all …\nPopExpiredSectors terminates expired sectors from all …\nPopExpiredSectors traverses the expiration queue up to and …\nRemoves and returns all values with keys less than or …\nRemoves and aggregates entries from the queue up to and …\nEpoch at which this sector’s power was most recently …\nPower activated or deactivated (positive or negative).\nReturns the sum of the raw byte and quality-adjusted power …\nComputes the PreCommit deposit given sector qa weight and …\nTotal funds locked as pre_commit_deposit\nSectors that have been pre-committed but not yet proven. …\nPower that was faulty before this advance (including …\nProcesses all PoSt submissions, marking unproven sectors as\nArray of proofs, one per distinct registered proof type …\nThe first epoch in this miner’s current proving period. …\nStores a pre-committed sector info, failing if the sector …\nReturns the quality-adjusted power for a sector.\nReturns the power for a sector size and weight.\nReturns maximum achievable QA power.\nDealWeight and VerifiedDealWeight are spacetime occupied …\npre-commit expiry\nReturns deadline calculations for the current (according …\nMaximum precision of vesting table (limits cardinality of …\nThe total amount the current beneficiary can withdraw. …\nRecord the epoch of any sectors expiring early, for …\nDeclares a set of sectors faulty. Already faulty sectors …\nMarks all non-faulty sectors in the partition as faulty …\nProcesses a series of posts, recording proven partitions …\nDiscovers how skipped faults declared during post …\nRemoves sector numbers from faults and thus from …\nSubset of faulty sectors expected to recover on next PoSt …\nPower of expected-to-recover sectors. RecoveringPower &lt;= …\nRemoves sectors and power from the expiration set in place.\nThe intersection of a source flags value with the …\nRemovePartitions removes the specified partitions, …\nRemoves sectors from recoveries and recovering power. …\nRemove some sectors from the queue. The sectors may be …\nRepays the full miner actor fee debt.  Returns the amount …\nDraws from vesting table and unlocked funds to repay up to …\nDeprecated: Whether to replace a “committed capacity” …\nDeprecated: The committed capacity sector to replace, and …\nRemoves some sectors and adds some others. The sectors …\nReplaces a number of “old” sectors with new ones. The …\nMaximum day reward this sector has had in previous …\nRe-schedules <em>all</em> sectors to expire at an early expiration …\nRe-schedules sectors to expire at an early expiration …\nReschedules some sectors to a new (quantized) expiration …\nRescheduleExpirations moves expiring sectors to the target …\nRemoves sectors from any queue entries in which they …\nRescheduleSectorExpirations reschedules the expirations of …\nSchedules each sector to expire at its next deadline end. …\nSaves the vesting table to the store.\nThe seal proof type implies the PoSt proofs\nMaximum duration to allow for the sealing process for seal …\nCommR\nCommR\nCommR\nDetermine maximum number of deal miner’s sector can hold\nThe original SealedSectorCID, only gets set on the first …\nAmount of space in each sector committed to the network by …\nA bitfield of all sectors in the proven partitions.\nSector numbers in this partition, including faulty, …\nInformation for all proven and not-yet-garbage-collected …\nSectors maps epochs at which sectors expired, to bitfields …\nSectors in the partition being declared faulty.\nSectors in the partition being declared recovered.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSectors skipped while proving that weren’t already …\nDuration between successive incremental vests (independent …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMarks a collection of sectors as terminated. The sectors …\nSubset of sectors terminated but not yet removed from …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTotal faulty power after detecting faults (before expiring …\nThe total number of sectors in this deadline (incl dead).\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnlocks an amount of funds that have <em>not yet vested</em>, if …\nUnlocks all vesting funds that have vested before the …\nUnproven sectors in this partition. This bitfield will be …\nPower of yet-to-be-proved sectors (never faulty).\nCommD\nThe amount of quota the current beneficiary has already …\nTest invariants about the partition power are valid.\nvalidates a set of assertions that must hold for …\nIntegral of active verified deals over sector lifetime\nPeriod over which the total should vest, after the initial …\nVestingFunds (Vesting Funds schedule for the miner).\nThe number of sectors in each Window PoSt partition …\nThe proof type used by this miner for sealing sectors.\nWorker account for this miner This will be the key that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBase penalty for a successful disputed window post proof.\nBase reward for successfully disputing a window posts …\nWrapper for working with an AMTChainEpoch*Bitfield …\nCompactCommD represents a Cid with compact representation …\nQuality multiplier for unverified deals in a sector\nDeadline holds the state for all sectors due at a specific …\nDeadline calculations with respect to a current epoch. “…\nMaps deadlines to partition maps.\nDeadlines contains Deadline objects, describing the …\nA queue of expiration sets by epoch, representing the …\nExpirationSet is a collection of sector numbers that are …\nProjection period of expected sector block rewards for …\nminimum number of epochs past the current epoch a sector …\nStorage Miner actor methods available\nStorage miner actor constructor params are defined here so …\nStatic information about miner\nMaps partitions to sector bitfields.\nQuality multiplier for committed capacity (no deals) in a …\nReplicaUpdate param with Option for CommD None means …\nPrecision used for making QA power calculations\nQA power mechanism introduced in FIP-0045\nInformation stored on-chain for a proven sector.\nInformation stored on-chain for a pre-committed sector.\nBalance of Miner Actor should be greater than or equal to …\nInformation submitted by a miner to provide a Window PoSt.\nQuality multiplier for verified deals in a sector\nSpecification for a linear vesting schedule.\nRepresents the vesting table state for the miner. It is a …\nActivates unproven sectors, returning the activated power.\nEpoch during which the sector proof was accepted\nActive power is power of non-faulty sectors.\nPower that is currently active (not faulty)\nActive sectors are those that are neither terminated nor …\nAdds sectors and power to the expiration set in place.\nRecords the given sector bitfield at the given …\nRecords the given sector bitfield at the given partition …\nAdds a collection of sectors to their on-time target …\nAdds some partition numbers to the set expiring at an …\nmarks a set of sectors faulty\nFirst vests and unlocks the vested funds AND then locks …\nAdds sectors to a deadline. It’s the caller’s …\nAddSectors adds new sectors to the partition. The sectors …\nAdds values to the queue entry for an epoch.\nRecords the given sectors at the given deadline/partition …\nRecords the given sectors at the given partition.\nGet a flags value with all known bits set.\nMarks a set of sector numbers as having been allocated. If …\nAllocated sector IDs. Sector IDs can never be reused once …\nAssign new sectors to deadlines.\nGet the amount that the beneficiary has not yet withdrawn …\nReturns true if we’re below the partition/sector limit. …\nAccount for receive miner benefits, withdraw on miner must …\nbeneficiary’s total quota, how much quota has been …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChecks whether a seal proof type is supported for new …\nList of proof types which can be used when creating new …\nThe epoch at which these proofs is being committed to a …\nThe ticket randomness on the chain at the …\nEpoch at which to sample the chain for challenge (&lt; Open).\nCheck validates all bitfields and counts the number of …\nReturns an error if the target sector cannot be found, or …\nReturns an error if the target sector cannot be found …\nCheckVestedFunds returns the amount of vested funds that …\nFirst epoch from which a proof may no longer be submitted …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe next epoch this miner is eligible for certain …\nWhether all set bits in a source flags value are also set …\nAdditional addresses that are permitted to submit messages …\nCounts the number of partitions &amp; sectors within the map.\nCounts the number of partitions &amp; sectors within the map.\nIndex of the deadline within the proving period beginning …\nEpoch at which this info was calculated.\nCut cuts the elements from the bits in the given bitfield …\nThe deadline index which the submission targets.\nThe deadline to which the faulty sectors are assigned, in …\nThe deadline to which the recovered sectors are assigned, …\nReturns deadline calculations for the current (according …\nReturns true if the deadline at the given index is …\nReturns a sorted vec of deadlines in the map.\nThe sector numbers due for PoSt at each deadline in the …\nIntegral of active deals over sector lifetime\nDeclares sectors as recovering. Non-faulty and already …\nPower of new faults and failed recoveries\nThe intersection of a source flags value with the …\nSectors expiring “early” due to being faulty for too …\nSubset of terminated that were before their committed …\nPartitions with sectors that terminated early.\nDeadlines with outstanding fees for early sector …\nGet a flags value with all bits unset.\nExpected one day projection of reward for sector computed …\nThe projected block reward a sector would earn over some …\nExpected twenty day projection of reward for sector …\nThe epoch at which the beneficiary’s rights expire and …\nEpoch during which the sector expires\nMaps epochs to partitions that <em>may</em> have sectors that …\nMaps epochs sectors that expire in or before that epoch. …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFirst epoch at which a fault declaration is rejected (&lt; …\nWhether the deadline’s fault cutoff has passed.\nSubset of sectors detected/declared faulty and not yet …\nMemoized sum of faulty power in partitions.\nPower that is currently faulty\nPower of currently-faulty sectors. FaultyPower &lt;= …\nAbsolute value of debt this miner owes from unpaid fees.\nGets and returns the requested pre-committed sectors, …\nReturns the deadline and partition index for a sector …\nReturns the deadline and partition index for a sector …\nAdditional flags, see <code>SectorOnChainInfoFlags</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nUnclaimed funds. Actor balance - (locked funds, precommit …\nUnclaimed funds that are not locked – includes funds …\nWhether the current deadline has already closed.\nA subset of <code>sectors</code> that should be ignored.\nCurrent deadline index, in […\nPartitions are numbered per-deadline, from zero.\nContains static info about this miner\nDelay before any amount starts vesting.\nSum of initial pledge requirements of all active sectors.\nPledge collected to commit this sector\nComputes the pledge requirement for committing new …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nA set is empty if it has no sectors. The power and pledge …\nWhether all bits in this flags value are unset.\nWhether the current deadline is currently open.\nPrefix for sealed sector CIDs (CommR).\nPrefix for unsealed sector CIDs (CommD).\nWalks the deadlines in deadline order.\nWalks the partitions in the map, in order of increasing …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe last epoch during which a proof may be submitted.\nCounts all sectors in the expiration set.\nPower of not-yet-terminated sectors (incl faulty &amp; …\nLive sectors are those that are not terminated (but may be …\nThe number of non-terminated sectors in this deadline …\nLoads info for a set of sectors to be proven. If any of …\nThe maximum number of partitions that may be required to …\nLoads sector info for a sequence of sectors.\nLoads the vesting funds table from the store.\nLoads sector info for a sequence of sectors, substituting …\nTotal rewards and added funds locked in vesting table\nReturns the amount of a reward to vest, and the vesting …\nMaximum duration to allow for the sealing process for seal …\nVector of byte arrays representing Libp2p multi-addresses …\nLoads a queue root.\nNone means unknown\nMust be an ID address\nReturns the next instance of this deadline that has not …\nEpoch at which the subsequent deadline opens.\nThe first epoch in the next proving period.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPledge total for the on-time sectors\nSectors expiring “on time” at the end of their …\nFirst epoch from which a proof may be submitted (&gt;= …\nAccount that owns this miner\nPartition index within the deadline containing the faulty …\nPartition index within the deadline containing the …\nReturns a sorted vec of partitions in the map.\nPartitions in this deadline, in order. The keys of this …\nThe partitions being proven.\nLibp2p identity that should be used when connecting to …\nA proposal new beneficiary message for this miner\nA proposed new owner account for this miner. Must be …\nOptional worker key to update at an epoch\nWhether the proving period has elapsed.\nThe last epoch in the proving period.\nFirst epoch of the proving period (&lt;= CurrentEpoch).\nWhether the proving period has begun.\nThe penalty for a sector continuing faulty for another …\nPenalty to locked pledge collateral for the termination of …\nThis is the SP(t) penalty for a newly faulty sector that …\nPops up to <code>max_sectors</code> early terminated sectors from all …\nPopExpiredSectors terminates expired sectors from all …\nPopExpiredSectors traverses the expiration queue up to and …\nRemoves and returns all values with keys less than or …\nRemoves and aggregates entries from the queue up to and …\nEpoch at which this sector’s power was most recently …\nPower activated or deactivated (positive or negative).\nReturns the sum of the raw byte and quality-adjusted power …\nComputes the PreCommit deposit given sector qa weight and …\nTotal funds locked as pre_commit_deposit\nSectors that have been pre-committed but not yet proven. …\nPower that was faulty before this advance (including …\nProcesses all PoSt submissions, marking unproven sectors as\nArray of proofs, one per distinct registered proof type …\nThe first epoch in this miner’s current proving period. …\nStores a pre-committed sector info, failing if the sector …\nReturns the quality-adjusted power for a sector.\nReturns the power for a sector size and weight.\nReturns maximum achievable QA power.\nDealWeight and VerifiedDealWeight are spacetime occupied …\npre-commit expiry\nReturns deadline calculations for the current (according …\nMaximum precision of vesting table (limits cardinality of …\nThe total amount the current beneficiary can withdraw. …\nRecord the epoch of any sectors expiring early, for …\nDeclares a set of sectors faulty. Already faulty sectors …\nMarks all non-faulty sectors in the partition as faulty …\nProcesses a series of posts, recording proven partitions …\nDiscovers how skipped faults declared during post …\nRemoves sector numbers from faults and thus from …\nSubset of faulty sectors expected to recover on next PoSt …\nPower of expected-to-recover sectors. RecoveringPower &lt;= …\nRemoves sectors and power from the expiration set in place.\nThe intersection of a source flags value with the …\nRemovePartitions removes the specified partitions, …\nRemoves sectors from recoveries and recovering power. …\nRemove some sectors from the queue. The sectors may be …\nRepays the full miner actor fee debt.  Returns the amount …\nDraws from vesting table and unlocked funds to repay up to …\nDeprecated: Whether to replace a “committed capacity” …\nDeprecated: The committed capacity sector to replace, and …\nRemoves some sectors and adds some others. The sectors …\nReplaces a number of “old” sectors with new ones. The …\nMaximum day reward this sector has had in previous …\nRe-schedules <em>all</em> sectors to expire at an early expiration …\nRe-schedules sectors to expire at an early expiration …\nReschedules some sectors to a new (quantized) expiration …\nRescheduleExpirations moves expiring sectors to the target …\nRemoves sectors from any queue entries in which they …\nRescheduleSectorExpirations reschedules the expirations of …\nSchedules each sector to expire at its next deadline end. …\nSaves the vesting table to the store.\nThe seal proof type implies the PoSt proofs\nMaximum duration to allow for the sealing process for seal …\nCommR\nCommR\nCommR\nDetermine maximum number of deal miner’s sector can hold\nThe original SealedSectorCID, only gets set on the first …\nAmount of space in each sector committed to the network by …\nA bitfield of all sectors in the proven partitions.\nSector numbers in this partition, including faulty, …\nInformation for all proven and not-yet-garbage-collected …\nSectors maps epochs at which sectors expired, to bitfields …\nSectors in the partition being declared faulty.\nSectors in the partition being declared recovered.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSectors skipped while proving that weren’t already …\nDuration between successive incremental vests (independent …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMarks a collection of sectors as terminated. The sectors …\nSubset of sectors terminated but not yet removed from …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTotal faulty power after detecting faults (before expiring …\nThe total number of sectors in this deadline (incl dead).\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnlocks an amount of funds that have <em>not yet vested</em>, if …\nUnlocks all vesting funds that have vested before the …\nUnproven sectors in this partition. This bitfield will be …\nPower of yet-to-be-proved sectors (never faulty).\nCommD\nThe amount of quota the current beneficiary has already …\nTest invariants about the partition power are valid.\nvalidates a set of assertions that must hold for …\nIntegral of active verified deals over sector lifetime\nPeriod over which the total should vest, after the initial …\nVestingFunds (Vesting Funds schedule for the miner).\nThe number of sectors in each Window PoSt partition …\nThe proof type used by this miner for sealing sectors.\nWorker account for this miner This will be the key that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBase penalty for a successful disputed window post proof.\nBase reward for successfully disputing a window posts …\nWrapper for working with an AMTChainEpoch*Bitfield …\nCompactCommD represents a Cid with compact representation …\nQuality multiplier for unverified deals in a sector\nDeadline holds the state for all sectors due at a specific …\nDeadline calculations with respect to a current epoch. “…\nMaps deadlines to partition maps.\nDeadlines contains Deadline objects, describing the …\nA queue of expiration sets by epoch, representing the …\nExpirationSet is a collection of sector numbers that are …\nProjection period of expected sector block rewards for …\nminimum number of epochs past the current epoch a sector …\nStorage Miner actor methods available\nStorage miner actor constructor params are defined here so …\nStatic information about miner\nBase number of sectors before imposing the additional …\nConstant defining the QuantSpec which performs no …\nMaps partitions to sector bitfields.\nQuality multiplier for committed capacity (no deals) in a …\nA spec for epoch quantization.\nReplicaUpdate param with Option for CommD None means …\nPrecision used for making QA power calculations\nQA power mechanism introduced in FIP-0045\nInformation stored on-chain for a proven sector.\nInformation stored on-chain for a pre-committed sector.\nBalance of Miner Actor should be greater than or equal to …\nInformation submitted by a miner to provide a Window PoSt.\nQuality multiplier for verified deals in a sector\nSpecification for a linear vesting schedule.\nRepresents the vesting table state for the miner. It is a …\nActivates unproven sectors, returning the activated power.\nEpoch during which the sector proof was accepted\nActive power is power of non-faulty sectors.\nPower that is currently active (not faulty)\nActive sectors are those that are neither terminated nor …\nAdds sectors and power to the expiration set in place.\nRecords the given sector bitfield at the given …\nRecords the given sector bitfield at the given partition …\nAdds a collection of sectors to their on-time target …\nAdds some partition numbers to the set expiring at an …\nmarks a set of sectors faulty\nFirst vests and unlocks the vested funds AND then locks …\nAdds sectors to a deadline. It’s the caller’s …\nAddSectors adds new sectors to the partition. The sectors …\nAdds values to the queue entry for an epoch.\nRecords the given sectors at the given deadline/partition …\nRecords the given sectors at the given partition.\nGet a flags value with all known bits set.\nMarks a set of sector numbers as having been allocated. If …\nAllocated sector IDs. Sector IDs can never be reused once …\nAssign new sectors to deadlines.\nGet the amount that the beneficiary has not yet withdrawn …\nReturns true if we’re below the partition/sector limit. …\nAccount for receive miner benefits, withdraw on miner must …\nbeneficiary’s total quota, how much quota has been …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChecks whether a seal proof type is supported for new …\nList of proof types which can be used when creating new …\nThe epoch at which these proofs is being committed to a …\nThe ticket randomness on the chain at the …\nEpoch at which to sample the chain for challenge (&lt; Open).\nCheck validates all bitfields and counts the number of …\nReturns an error if the target sector cannot be found, or …\nReturns an error if the target sector cannot be found …\nCheckVestedFunds returns the amount of vested funds that …\nFirst epoch from which a proof may no longer be submitted …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe next epoch this miner is eligible for certain …\nWhether all set bits in a source flags value are also set …\nAdditional addresses that are permitted to submit messages …\nCounts the number of partitions &amp; sectors within the map.\nCounts the number of partitions &amp; sectors within the map.\nIndex of the deadline within the proving period beginning …\nEpoch at which this info was calculated.\nCut cuts the elements from the bits in the given bitfield …\nThe deadline index which the submission targets.\nThe deadline to which the faulty sectors are assigned, in …\nThe deadline to which the recovered sectors are assigned, …\nReturns deadline calculations for the current (according …\nReturns true if the deadline at the given index is …\nReturns a sorted vec of deadlines in the map.\nThe sector numbers due for PoSt at each deadline in the …\nIntegral of active deals over sector lifetime\nDeclares sectors as recovering. Non-faulty and already …\nPower of new faults and failed recoveries\nThe intersection of a source flags value with the …\nSectors expiring “early” due to being faulty for too …\nSubset of terminated that were before their committed …\nPartitions with sectors that terminated early.\nDeadlines with outstanding fees for early sector …\nGet a flags value with all bits unset.\nExpected one day projection of reward for sector computed …\nThe projected block reward a sector would earn over some …\nExpected twenty day projection of reward for sector …\nThe epoch at which the beneficiary’s rights expire and …\nEpoch during which the sector expires\nMaps epochs to partitions that <em>may</em> have sectors that …\nMaps epochs sectors that expire in or before that epoch. …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFirst epoch at which a fault declaration is rejected (&lt; …\nWhether the deadline’s fault cutoff has passed.\nSubset of sectors detected/declared faulty and not yet …\nMemoized sum of faulty power in partitions.\nPower that is currently faulty\nPower of currently-faulty sectors. FaultyPower &lt;= …\nAbsolute value of debt this miner owes from unpaid fees.\nGets and returns the requested pre-committed sectors, …\nReturns the deadline and partition index for a sector …\nReturns the deadline and partition index for a sector …\nAdditional flags, see <code>SectorOnChainInfoFlags</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nUnclaimed funds. Actor balance - (locked funds, precommit …\nUnclaimed funds that are not locked – includes funds …\nWhether the current deadline has already closed.\nA subset of <code>sectors</code> that should be ignored.\nCurrent deadline index, in […\nPartitions are numbered per-deadline, from zero.\nContains static info about this miner\nDelay before any amount starts vesting.\nSum of initial pledge requirements of all active sectors.\nPledge collected to commit this sector\nComputes the pledge requirement for committing new …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nA set is empty if it has no sectors. The power and pledge …\nWhether all bits in this flags value are unset.\nWhether the current deadline is currently open.\nPrefix for sealed sector CIDs (CommR).\nPrefix for unsealed sector CIDs (CommD).\nWalks the deadlines in deadline order.\nWalks the partitions in the map, in order of increasing …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe last epoch during which a proof may be submitted.\nCounts all sectors in the expiration set.\nPower of not-yet-terminated sectors (incl faulty &amp; …\nLive sectors are those that are not terminated (but may be …\nThe number of non-terminated sectors in this deadline …\nLoads info for a set of sectors to be proven. If any of …\nThe maximum number of partitions that may be required to …\nLoads sector info for a sequence of sectors.\nLoads the vesting funds table from the store.\nLoads sector info for a sequence of sectors, substituting …\nTotal rewards and added funds locked in vesting table\nReturns the amount of a reward to vest, and the vesting …\nMaximum duration to allow for the sealing process for seal …\nVector of byte arrays representing Libp2p multi-addresses …\nLoads a queue root.\nNone means unknown\nMust be an ID address\nReturns the next instance of this deadline that has not …\nEpoch at which the subsequent deadline opens.\nThe first epoch in the next proving period.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset from zero from which to base the modulus\nPledge total for the on-time sectors\nSectors expiring “on time” at the end of their …\nFirst epoch from which a proof may be submitted (&gt;= …\nAccount that owns this miner\nPartition index within the deadline containing the faulty …\nPartition index within the deadline containing the …\nReturns a sorted vec of partitions in the map.\nPartitions in this deadline, in order. The keys of this …\nThe partitions being proven.\nLibp2p identity that should be used when connecting to …\nA proposal new beneficiary message for this miner\nA proposed new owner account for this miner. Must be …\nOptional worker key to update at an epoch\nWhether the proving period has elapsed.\nThe last epoch in the proving period.\nFirst epoch of the proving period (&lt;= CurrentEpoch).\nWhether the proving period has begun.\nThe penalty for a sector continuing faulty for another …\nPenalty to locked pledge collateral for the termination of …\nThis is the SP(t) penalty for a newly faulty sector that …\nPops up to <code>max_sectors</code> early terminated sectors from all …\nPopExpiredSectors terminates expired sectors from all …\nPopExpiredSectors traverses the expiration queue up to and …\nRemoves and returns all values with keys less than or …\nRemoves and aggregates entries from the queue up to and …\nEpoch at which this sector’s power was most recently …\nPower activated or deactivated (positive or negative).\nReturns the sum of the raw byte and quality-adjusted power …\nComputes the PreCommit deposit given sector qa weight and …\nTotal funds locked as pre_commit_deposit\nSectors that have been pre-committed but not yet proven. …\nPower that was faulty before this advance (including …\nProcesses all PoSt submissions, marking unproven sectors as\nArray of proofs, one per distinct registered proof type …\nThe first epoch in this miner’s current proving period. …\nStores a pre-committed sector info, failing if the sector …\nReturns the quality-adjusted power for a sector.\nReturns the power for a sector size and weight.\nReturns maximum achievable QA power.\nDealWeight and VerifiedDealWeight are spacetime occupied …\npre-commit expiry\nReturns deadline calculations for the current (according …\nMaximum precision of vesting table (limits cardinality of …\nRounds <code>epoch</code> to the nearest exact multiple of the …\nThe total amount the current beneficiary can withdraw. …\nRecord the epoch of any sectors expiring early, for …\nDeclares a set of sectors faulty. Already faulty sectors …\nMarks all non-faulty sectors in the partition as faulty …\nProcesses a series of posts, recording proven partitions …\nDiscovers how skipped faults declared during post …\nRemoves sector numbers from faults and thus from …\nSubset of faulty sectors expected to recover on next PoSt …\nPower of expected-to-recover sectors. RecoveringPower &lt;= …\nRemoves sectors and power from the expiration set in place.\nThe intersection of a source flags value with the …\nRemovePartitions removes the specified partitions, …\nRemoves sectors from recoveries and recovering power. …\nRemove some sectors from the queue. The sectors may be …\nRepays the full miner actor fee debt.  Returns the amount …\nDraws from vesting table and unlocked funds to repay up to …\nDeprecated: Whether to replace a “committed capacity” …\nDeprecated: The committed capacity sector to replace, and …\nRemoves some sectors and adds some others. The sectors …\nReplaces a number of “old” sectors with new ones. The …\nMaximum day reward this sector has had in previous …\nRe-schedules <em>all</em> sectors to expire at an early expiration …\nRe-schedules sectors to expire at an early expiration …\nReschedules some sectors to a new (quantized) expiration …\nRescheduleExpirations moves expiring sectors to the target …\nRemoves sectors from any queue entries in which they …\nRescheduleSectorExpirations reschedules the expirations of …\nSchedules each sector to expire at its next deadline end. …\nSaves the vesting table to the store.\nThe seal proof type implies the PoSt proofs\nMaximum duration to allow for the sealing process for seal …\nCommR\nCommR\nCommR\nDetermine maximum number of deal miner’s sector can hold\nThe original SealedSectorCID, only gets set on the first …\nAmount of space in each sector committed to the network by …\nA bitfield of all sectors in the proven partitions.\nSector numbers in this partition, including faulty, …\nInformation for all proven and not-yet-garbage-collected …\nSectors maps epochs at which sectors expired, to bitfields …\nSectors in the partition being declared faulty.\nSectors in the partition being declared recovered.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSectors skipped while proving that weren’t already …\nDuration between successive incremental vests (independent …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMarks a collection of sectors as terminated. The sectors …\nSubset of sectors terminated but not yet removed from …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTotal faulty power after detecting faults (before expiring …\nThe total number of sectors in this deadline (incl dead).\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe unit of quantization\nUnlocks an amount of funds that have <em>not yet vested</em>, if …\nUnlocks all vesting funds that have vested before the …\nUnproven sectors in this partition. This bitfield will be …\nPower of yet-to-be-proved sectors (never faulty).\nCommD\nThe amount of quota the current beneficiary has already …\nTest invariants about the partition power are valid.\nvalidates a set of assertions that must hold for …\nIntegral of active verified deals over sector lifetime\nPeriod over which the total should vest, after the initial …\nVestingFunds (Vesting Funds schedule for the miner).\nThe number of sectors in each Window PoSt partition …\nThe proof type used by this miner for sealing sectors.\nWorker account for this miner This will be the key that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBase penalty for a successful disputed window post proof.\nBase reward for successfully disputing a window posts …\nWrapper for working with an <code>AMT[ChainEpoch]*Bitfield</code> …\nQuality multiplier for unverified deals in a sector\nDeadline holds the state for all sectors due at a specific …\nDeadline calculations with respect to a current epoch. “…\nMaps deadlines to partition maps.\nDeadlines contains Deadline objects, describing the …\nA queue of expiration sets by epoch, representing the …\n<code>ExpirationSet</code> is a collection of sector numbers that are …\nProjection period of expected sector block rewards for …\nminimum number of epochs past the current epoch a sector …\nStorage Miner actor methods available\nStorage miner actor constructor params are defined here so …\nStatic information about miner\nMaps partitions to sector bitfields.\nQuality multiplier for committed capacity (no deals) in a …\nPrecision used for making QA power calculations\nInformation stored on-chain for a proven sector.\nInformation stored on-chain for a pre-committed sector.\nBalance of Miner Actor should be greater than or equal to …\nInformation submitted by a miner to provide a Window PoSt.\nQuality multiplier for verified deals in a sector\nSpecification for a linear vesting schedule.\nRepresents the vesting table state for the miner. It is a …\nActivates unproven sectors, returning the activated power.\nEpoch during which the sector proof was accepted\nActive power is power of non-faulty sectors.\nPower that is currently active (not faulty)\nActive sectors are those that are neither terminated nor …\nAdds sectors and power to the expiration set in place.\nRecords the given sector bitfield at the given …\nRecords the given sector bitfield at the given partition …\nAdds a collection of sectors to their on-time target …\nAdds some partition numbers to the set expiring at an …\nmarks a set of sectors faulty\nFirst vests and unlocks the vested funds AND then locks …\nAdds sectors to a deadline. It’s the caller’s …\n<code>AddSectors</code> adds new sectors to the partition. The sectors …\nAdds values to the queue entry for an epoch.\nRecords the given sectors at the given deadline/partition …\nRecords the given sectors at the given partition.\nMarks a set of sector numbers as having been allocated. If …\nAllocated sector IDs. Sector IDs can never be reused once …\nAssign new sectors to deadlines.\nReturns true if we’re below the partition/sector limit. …\nChecks whether a seal proof type is supported for new …\nList of proof types which can be used when creating new …\nThe epoch at which these proofs is being committed to a …\nThe ticket randomness on the chain at the …\nEpoch at which to sample the chain for challenge (<code>&lt; Open</code>).\nCheck validates all bitfields and counts the number of …\nReturns an error if the target sector cannot be found, or …\nReturns an error if the target sector cannot be found …\n<code>CheckVestedFunds</code> returns the amount of vested funds that …\nFirst epoch from which a proof may no longer be submitted (…\nThe next epoch this miner is eligible for certain …\nAdditional addresses that are permitted to submit messages …\nCounts the number of partitions &amp; sectors within the map.\nCounts the number of partitions &amp; sectors within the map.\nIndex of the deadline within the proving period beginning …\nEpoch at which this info was calculated.\nCut cuts the elements from the bits in the given bitfield …\nThe deadline index which the submission targets.\nThe deadline to which the faulty sectors are assigned, in …\nThe deadline to which the recovered sectors are assigned, …\nReturns deadline calculations for the current (according …\nReturns true if the deadline at the given index is …\nReturns a sorted vector of deadlines in the map.\nThe sector numbers due for PoSt at each deadline in the …\nIntegral of active deals over sector lifetime, 0 if …\nIntegral of active deals over sector lifetime\nDeclares sectors as recovering. Non-faulty and already …\nPower of new faults and failed recoveries\nSectors expiring “early” due to being faulty for too …\nSubset of terminated that were before their committed …\nPartitions with sectors that terminated early.\nDeadlines with outstanding fees for early sector …\nExpected one day projection of reward for sector computed …\nExpected twenty day projection of reward for sector …\nEpoch during which the sector expires\nMaps epochs to partitions that <em>may</em> have sectors that …\nMaps epochs sectors that expire in or before that epoch. …\nFirst epoch at which a fault declaration is rejected (…\nWhether the deadline’s fault cutoff has passed.\nSubset of sectors detected/declared faulty and not yet …\nMemoized sum of faulty power in partitions.\nPower that is currently faulty\nPower of currently-faulty sectors. <code>FaultyPower &lt;= LivePower</code>…\nAbsolute value of debt this miner owes from unpaid fees.\nGets and returns the requested pre-committed sectors, …\nReturns the deadline and partition index for a sector …\nReturns the deadline and partition index for a sector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnclaimed funds. Actor balance - (locked funds, pre-commit …\nUnclaimed funds that are not locked – includes funds …\nWhether the current deadline has already closed.\nA subset of <code>sectors</code> that should be ignored.\nCurrent deadline index, in <code>[0..WPoStProvingPeriodDeadlines)</code>…\nPartitions are numbered per-deadline, from zero.\nContains static info about this miner\nSum of initial pledge requirements of all active sectors.\nPledge collected to commit this sector\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA set is empty if it has no sectors. The power and pledge …\nWhether the current deadline is currently open.\nPrefix for sealed sector CIDs (<code>CommR</code>).\nWalks the deadlines in deadline order.\nWalks the partitions in the map, in order of increasing …\nThe last epoch during which a proof may be submitted.\nCounts all sectors in the expiration set.\nPower of not-yet-terminated sectors (incl faulty &amp; …\nLive sectors are those that are not terminated (but may be …\nThe number of non-terminated sectors in this deadline …\nLoads info for a set of sectors to be proven. If any of …\nThe maximum number of partitions that may be required to …\nLoads sector info for a sequence of sectors.\nLoads the vesting funds table from the store.\nLoads sector info for a sequence of sectors, substituting …\nTotal rewards and added funds locked in vesting table\nMaximum duration to allow for the sealing process for seal …\nVector of byte arrays representing Libp2p multi-addresses …\nLoads a queue root.\nMust be an ID address\nReturns the next instance of this deadline that has not …\nEpoch at which the subsequent deadline opens.\nThe first epoch in the next proving period.\nPledge total for the on-time sectors\nSectors expiring “on time” at the end of their …\nFirst epoch from which a proof may be submitted (…\nAccount that owns this miner\nPartition index within the deadline containing the faulty …\nPartition index within the deadline containing the …\nReturns a sorted vector of partitions in the map.\nPartitions in this deadline, in order. The keys of this …\nThe partitions being proven.\nLibp2p identity that should be used when connecting to …\nA proposed new owner account for this miner. Must be …\nOptional worker key to update at an epoch\nWhether the proving period has elapsed.\nThe last epoch in the proving period.\nFirst epoch of the proving period (<code>&lt;= CurrentEpoch</code>).\nWhether the proving period has begun.\nPops up to <code>max_sectors</code> early terminated sectors from all …\n<code>PopExpiredSectors</code> terminates expired sectors from all …\n<code>PopExpiredSectors</code> traverses the expiration queue up to and …\nRemoves and returns all values with keys less than or …\nRemoves and aggregates entries from the queue up to and …\nPower activated or deactivated (positive or negative).\nReturns the sum of the raw byte and quality-adjusted power …\nTotal funds locked as <code>pre_commit_deposit</code>\nSectors that have been pre-committed but not yet proven. …\nPower that was faulty before this advance (including …\nProcesses all PoSt submissions, marking unproven sectors as\nArray of proofs, one per distinct registered proof type …\nThe first epoch in this miner’s current proving period. …\nStores a pre-committed sector info, failing if the sector …\nReturns the quality-adjusted power for a sector.\nReturns the power for a sector size and weight.\n<code>DealWeight</code> and <code>VerifiedDealWeight</code> are spacetime occupied …\npre-commit expiry\nReturns deadline calculations for the current (according …\nRecord the epoch of any sectors expiring early, for …\nDeclares a set of sectors faulty. Already faulty sectors …\nMarks all non-faulty sectors in the partition as faulty …\nProcesses a series of posts, recording proven partitions …\nDiscovers how skipped faults declared during post …\nRemoves sector numbers from faults and thus from …\nSubset of faulty sectors expected to recover on next PoSt …\nPower of expected-to-recover sectors. …\nRemoves sectors and power from the expiration set in place.\n<code>RemovePartitions</code> removes the specified partitions, …\nRemoves sectors from recoveries and recovering power. …\nRemove some sectors from the queue. The sectors may be …\nRepays the full miner actor fee debt.  Returns the amount …\nDraws from vesting table and unlocked funds to repay up to …\nWhether to replace a “committed capacity” no-deal …\nWhether to replace a “committed capacity” no-deal …\nThe committed capacity sector to replace, and its …\nThe committed capacity sector to replace, and its …\nRemoves some sectors and adds some others. The sectors …\nReplaces a number of “old” sectors with new ones. The …\nDay reward of sector this sector replace or zero\nAge of sector this sector replaced or zero\nRe-schedules <em>all</em> sectors to expire at an early expiration …\nRe-schedules sectors to expire at an early expiration …\nReschedules some sectors to a new (quantized) expiration …\n<code>RescheduleExpirations</code> moves expiring sectors to the target …\nRemoves sectors from any queue entries in which they …\n<code>RescheduleSectorExpirations</code> reschedules the expirations of …\nSchedules each sector to expire at its next deadline end. …\nSaves the vesting table to the store.\nThe seal proof type implies the PoSt proofs\nMaximum duration to allow for the sealing process for seal …\n<code>CommR</code>\n<code>CommR</code>\n<code>CommR</code>\nDetermine maximum number of deal miner’s sector can hold\nThe original <code>SealedSectorCID</code>, only gets set on the first …\nAmount of space in each sector committed to the network by …\nA bitfield of all sectors in the proven partitions.\nSector numbers in this partition, including faulty, …\nInformation for all proven and not-yet-garbage-collected …\nSectors maps epochs at which sectors expired, to bitfields …\nSectors in the partition being declared faulty.\nSectors in the partition being declared recovered.\nSectors skipped while proving that weren’t already …\nMarks a collection of sectors as terminated. The sectors …\nSubset of sectors terminated but not yet removed from …\nTotal faulty power after detecting faults (before expiring …\nThe total number of sectors in this deadline (incl dead).\nUnlocks an amount of funds that have <em>not yet vested</em>, if …\nUnlocks all vesting funds that have vested before the …\nUnproven sectors in this partition. This bitfield will be …\nPower of yet-to-be-proved sectors (never faulty).\nTest invariants about the partition power are valid.\nvalidates a set of assertions that must hold for …\nIntegral of active verified deals over sector lifetime\nIntegral of active verified deals over sector lifetime\n<code>VestingFunds</code> (Vesting Funds schedule for the miner).\nThe number of sectors in each Window PoSt partition …\nThe proof type used by this miner for sealing sectors.\nWorker account for this miner This will be the key that is …\nBase penalty for a successful disputed window post proof.\nBase reward for successfully disputing a window posts …\nWrapper for working with an <code>AMT[ChainEpoch]*Bitfield</code> …\n<code>CompactCommD</code> represents a Cid with compact representation …\nQuality multiplier for unverified deals in a sector\nDeadline holds the state for all sectors due at a specific …\nDeadline calculations with respect to a current epoch. “…\nMaps deadlines to partition maps.\nDeadlines contains Deadline objects, describing the …\nA queue of expiration sets by epoch, representing the …\n<code>ExpirationSet</code> is a collection of sector numbers that are …\nProjection period of expected sector block rewards for …\nminimum number of epochs past the current epoch a sector …\nStorage Miner actor methods available\nStorage miner actor constructor params are defined here so …\nStatic information about miner\nMaps partitions to sector bitfields.\nQuality multiplier for committed capacity (no deals) in a …\n<code>ReplicaUpdate</code> parameter with <code>Option&lt;Cid&gt;</code> for <code>CommD</code> None …\nPrecision used for making QA power calculations\nInformation stored on-chain for a proven sector.\nInformation stored on-chain for a pre-committed sector.\nBalance of Miner Actor should be greater than or equal to …\nInformation submitted by a miner to provide a Window PoSt.\nQuality multiplier for verified deals in a sector\nSpecification for a linear vesting schedule.\nRepresents the vesting table state for the miner. It is a …\nActivates unproven sectors, returning the activated power.\nEpoch during which the sector proof was accepted\nActive power is power of non-faulty sectors.\nPower that is currently active (not faulty)\nActive sectors are those that are neither terminated nor …\nAdds sectors and power to the expiration set in place.\nRecords the given sector bitfield at the given …\nRecords the given sector bitfield at the given partition …\nAdds a collection of sectors to their on-time target …\nAdds some partition numbers to the set expiring at an …\nmarks a set of sectors faulty\nFirst vests and unlocks the vested funds AND then locks …\nAdds sectors to a deadline. It’s the caller’s …\n<code>AddSectors</code> adds new sectors to the partition. The sectors …\nAdds values to the queue entry for an epoch.\nRecords the given sectors at the given deadline/partition …\nRecords the given sectors at the given partition.\nMarks a set of sector numbers as having been allocated. If …\nAllocated sector IDs. Sector IDs can never be reused once …\nAssign new sectors to deadlines.\nGet the amount that the beneficiary has not yet withdrawn …\nReturns true if we’re below the partition/sector limit. …\nAccount for receive miner benefits, withdraw on miner must …\nbeneficiary’s total quota, how much quota has been …\nChecks whether a seal proof type is supported for new …\nList of proof types which can be used when creating new …\nThe epoch at which these proofs is being committed to a …\nThe ticket randomness on the chain at the …\nEpoch at which to sample the chain for challenge <code>(&lt; Open)</code>.\nCheck validates all bitfields and counts the number of …\nReturns an error if the target sector cannot be found, or …\nReturns an error if the target sector cannot be found …\n<code>CheckVestedFunds</code> returns the amount of vested funds that …\nFirst epoch from which a proof may no longer be submitted …\nThe next epoch this miner is eligible for certain …\nAdditional addresses that are permitted to submit messages …\nCounts the number of partitions &amp; sectors within the map.\nCounts the number of partitions &amp; sectors within the map.\nIndex of the deadline within the proving period beginning …\nEpoch at which this info was calculated.\nCut cuts the elements from the bits in the given bitfield …\nThe deadline index which the submission targets.\nThe deadline to which the faulty sectors are assigned, in …\nThe deadline to which the recovered sectors are assigned, …\nReturns deadline calculations for the current (according …\nReturns true if the deadline at the given index is …\nReturns a sorted vector of deadlines in the map.\nThe sector numbers due for PoSt at each deadline in the …\nIntegral of active deals over sector lifetime\nDeclares sectors as recovering. Non-faulty and already …\nPower of new faults and failed recoveries\nSectors expiring “early” due to being faulty for too …\nSubset of terminated that were before their committed …\nPartitions with sectors that terminated early.\nDeadlines with outstanding fees for early sector …\nExpected one day projection of reward for sector computed …\nExpected twenty day projection of reward for sector …\nThe epoch at which the beneficiary’s rights expire and …\nEpoch during which the sector expires\nMaps epochs to partitions that <em>may</em> have sectors that …\nMaps epochs sectors that expire in or before that epoch. …\nFirst epoch at which a fault declaration is rejected …\nWhether the deadline’s fault cutoff has passed.\nSubset of sectors detected/declared faulty and not yet …\nMemoized sum of faulty power in partitions.\nPower that is currently faulty\nPower of currently-faulty sectors. <code>FaultyPower &lt;= LivePower</code>…\nAbsolute value of debt this miner owes from unpaid fees.\nGets and returns the requested pre-committed sectors, …\nReturns the deadline and partition index for a sector …\nReturns the deadline and partition index for a sector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnclaimed funds. Actor balance - (locked funds, pre-commit …\nUnclaimed funds that are not locked – includes funds …\nWhether the current deadline has already closed.\nA subset of <code>sectors</code> that should be ignored.\nCurrent deadline index, in <code>[0..WPoStProvingPeriodDeadlines)</code>…\nPartitions are numbered per-deadline, from zero.\nContains static info about this miner\nDelay before any amount starts vesting.\nSum of initial pledge requirements of all active sectors.\nPledge collected to commit this sector\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")