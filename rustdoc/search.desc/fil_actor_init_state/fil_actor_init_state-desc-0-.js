searchState.loadedDescShard("fil_actor_init_state", 0, "Init actor Constructor parameters\nInit actor Exec Params\nInit actor Exec Return value\nInit actor methods available\nState is reponsible for creating\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID based address for created actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReorg safe address for actor\nInit actor Constructor parameters\nInit actor Exec4 Params\nInit actor Exec4 Return value\nInit actor Exec Params\nInit actor Exec Return value\nInit actor methods available\nState is responsible for creating\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID based address for created actor\nID based address for created actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllocates a new ID address and stores a mapping of the …\n<code>ResolveAddress</code> resolves an address to an ID-address, if …\nReorg safe address for actor\nReorg safe address for actor\nInit actor Constructor parameters\nInit actor Exec4 Params\nInit actor Exec4 Return value\nInit actor Exec Params\nInit actor Exec Return value\nInit actor methods available\nState is reponsible for creating\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID based address for created actor\nID based address for created actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps argument addresses to to a new or existing actor ID. …\nResolveAddress resolves an address to an ID-address, if …\nReorg safe address for actor\nReorg safe address for actor\nInit actor Constructor parameters\nInit actor Exec4 Params\nInit actor Exec4 Return value\nInit actor Exec Params\nInit actor Exec Return value\nInit actor methods available\nHAMTAddressActorID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID based address for created actor\nID based address for created actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps argument addresses to to a new or existing actor ID. …\nResolveAddress resolves an address to an ID-address, if …\nReorg safe address for actor\nReorg safe address for actor\nInit actor Constructor parameters\nInit actor Exec4 Params\nInit actor Exec4 Return value\nInit actor Exec Params\nInit actor Exec Return value\nInit actor methods available\nHAMTAddressActorID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID based address for created actor\nID based address for created actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps argument addresses to to a new or existing actor ID. …\nResolveAddress resolves an address to an ID-address, if …\nReorg safe address for actor\nReorg safe address for actor\nInit actor Constructor parameters\nInit actor Exec Params\nInit actor Exec Return value\nInit actor methods available\nState is responsible for creating\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID based address for created actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllocates a new ID address and stores a mapping of the …\n<code>ResolveAddress</code> resolves an address to an ID-address, if …\nReorg safe address for actor\nInit actor Constructor parameters\nInit actor Exec Params\nInit actor Exec Return value\nInit actor methods available\nState is responsible for creating\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID based address for created actor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllocates a new ID address and stores a mapping of the …\n<code>ResolveAddress</code> resolves an address to an ID-address, if …\nReorg safe address for actor")