searchState.loadedDescShard("ez_jsonrpc_types", 0, "A transcription of types from the <code>JSON-RPC 2.0</code> …\nparams MUST be an Object, with member names that match the …\nparams MUST be an Array, containing the values in the …\nA <code>JSON-RPC 2.0</code> error object.\nInternal JSON-RPC error.\nInvalid method parameter(s).\nThe JSON sent is not a valid Request object.\nSee <code>Request::id</code>.\nThe method does not exist / is not available.\nTo send several Request objects at the same time, the …\nA response to a <code>MaybeBatchedRequest</code>.\nInvalid JSON was received by the server. An error occurred …\nA <code>JSON-RPC 2.0</code> request object.\nIf present, parameters for the rpc call MUST be provided …\nA <code>JSON-RPC 2.0</code> response object.\nReserved for implementation-defined server-errors.\nA Number that indicates the error type that occurred. This …\nA Primitive or Structured value that contains additional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn identifier established by the Client that MUST contain …\nThis member is REQUIRED. It MUST be the same as the value …\nConvenience method for creating a new error with code …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method for creating a new error with code …\nConvenience method for creating a new error with code …\nA map of Strings to values (typically Value).\nA String providing a short description of the error. The …\nA String containing the name of the method to be invoked. …\nConvenience method for creating a new error with code …\nConvenience method for creating a new error.\nExtra support for parameter (de)serialization\nA Structured value that holds the parameter values to be …\nConvenience method for creating a new error with code …\n“result”:\nIf <code>Self::code</code> is one of the predefined errors in the spec, …\nA view into a single entry in a map, which may either be …\nAn owning iterator over a serde_json::Map’s entries.\nAn iterator over a serde_json::Map’s entries.\nA mutable iterator over a serde_json::Map’s entries.\nAn iterator over a serde_json::Map’s keys.\nRepresents a JSON key/value type.\nAn occupied Entry.\nAn occupied Entry. It is part of the <code>Entry</code> enum.\nA vacant Entry.\nA vacant Entry. It is part of the <code>Entry</code> enum.\nAn iterator over a serde_json::Map’s values.\nA mutable iterator over a serde_json::Map’s values.\nProvides in-place mutable access to an occupied entry …\nMoves all elements from other into self, leaving other …\nClears the map, removing all values.\nReturns true if the map contains a value for the specified …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair matching the given key.\nGets a mutable reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to its value.\nReturns true if the map contains no elements.\nGets an iterator over the entries of the map.\nGets a mutable iterator over the entries of the map.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nGets an iterator over the keys of the map.\nReturns the number of elements in the map.\nMakes a new empty Map.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nTakes the value of the entry out of the map, and returns …\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the predicate.\nGets an iterator over the values of the map.\nGets an iterator over mutable values of the map.\nMakes a new empty Map with the given initial capacity.\nError when serializing to <code>RequestParameters</code> using a …\n<code>IntoDeserializer</code> implementation for <code>RequestParameters</code>.\nSerializer whose output is a <code>RequestParameters</code>.\nCheck for remaining elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")